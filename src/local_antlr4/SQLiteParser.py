# Generated from SQLiteParser.g4 by ANTLR 4.9.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00c4")
        buf.write("\u0809\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\3\2\3\2\7\2\u00e9\n\2\f\2\16\2\u00ec")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\3\3\4\7\4\u00f4\n\4\f\4\16\4\u00f7")
        buf.write("\13\4\3\4\3\4\6\4\u00fb\n\4\r\4\16\4\u00fc\3\4\7\4\u0100")
        buf.write("\n\4\f\4\16\4\u0103\13\4\3\4\7\4\u0106\n\4\f\4\16\4\u0109")
        buf.write("\13\4\3\5\3\5\3\5\5\5\u010e\n\5\5\5\u0110\n\5\3\5\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5\5\u012a\n\5\3\6\3")
        buf.write("\6\3\6\3\6\3\6\5\6\u0131\n\6\3\6\3\6\3\6\3\6\3\6\5\6\u0138")
        buf.write("\n\6\3\6\3\6\3\6\3\6\5\6\u013e\n\6\3\6\3\6\5\6\u0142\n")
        buf.write("\6\3\6\5\6\u0145\n\6\3\7\3\7\3\7\3\7\3\7\5\7\u014c\n\7")
        buf.write("\3\7\5\7\u014f\n\7\3\b\3\b\5\b\u0153\n\b\3\b\3\b\3\b\3")
        buf.write("\b\3\t\3\t\5\t\u015b\n\t\3\t\3\t\5\t\u015f\n\t\5\t\u0161")
        buf.write("\n\t\3\n\3\n\5\n\u0165\n\n\3\13\3\13\5\13\u0169\n\13\3")
        buf.write("\13\3\13\5\13\u016d\n\13\3\13\5\13\u0170\n\13\3\f\3\f")
        buf.write("\3\f\3\r\3\r\5\r\u0177\n\r\3\r\3\r\3\16\3\16\5\16\u017d")
        buf.write("\n\16\3\16\3\16\3\16\3\16\5\16\u0183\n\16\3\16\3\16\3")
        buf.write("\16\5\16\u0188\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\7\16\u0191\n\16\f\16\16\16\u0194\13\16\3\16\3\16\3\16")
        buf.write("\5\16\u0199\n\16\3\17\3\17\5\17\u019d\n\17\3\17\3\17\5")
        buf.write("\17\u01a1\n\17\3\17\5\17\u01a4\n\17\3\20\3\20\5\20\u01a8")
        buf.write("\n\20\3\20\3\20\3\20\3\20\5\20\u01ae\n\20\3\20\3\20\3")
        buf.write("\20\5\20\u01b3\n\20\3\20\3\20\3\20\3\20\3\20\7\20\u01ba")
        buf.write("\n\20\f\20\16\20\u01bd\13\20\3\20\3\20\7\20\u01c1\n\20")
        buf.write("\f\20\16\20\u01c4\13\20\3\20\3\20\3\20\5\20\u01c9\n\20")
        buf.write("\3\20\3\20\5\20\u01cd\n\20\3\21\3\21\5\21\u01d1\n\21\3")
        buf.write("\21\7\21\u01d4\n\21\f\21\16\21\u01d7\13\21\3\22\6\22\u01da")
        buf.write("\n\22\r\22\16\22\u01db\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\5\22\u01e8\n\22\3\23\3\23\5\23\u01ec")
        buf.write("\n\23\3\23\3\23\3\23\5\23\u01f1\n\23\3\23\5\23\u01f4\n")
        buf.write("\23\3\23\5\23\u01f7\n\23\3\23\3\23\3\23\5\23\u01fc\n\23")
        buf.write("\3\23\5\23\u01ff\n\23\3\23\3\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\5\23\u020d\n\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\5\23\u0214\n\23\3\23\3\23\3\23\3\23\3")
        buf.write("\23\5\23\u021b\n\23\5\23\u021d\n\23\3\24\5\24\u0220\n")
        buf.write("\24\3\24\3\24\3\25\3\25\5\25\u0226\n\25\3\25\3\25\3\25")
        buf.write("\5\25\u022b\n\25\3\25\3\25\3\25\3\25\7\25\u0231\n\25\f")
        buf.write("\25\16\25\u0234\13\25\3\25\3\25\5\25\u0238\n\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\7\25")
        buf.write("\u0245\n\25\f\25\16\25\u0248\13\25\3\25\3\25\3\25\5\25")
        buf.write("\u024d\n\25\3\26\3\26\3\26\3\26\3\26\3\26\7\26\u0255\n")
        buf.write("\26\f\26\16\26\u0258\13\26\3\26\3\26\5\26\u025c\n\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0266\n\26")
        buf.write("\3\26\3\26\7\26\u026a\n\26\f\26\16\26\u026d\13\26\3\26")
        buf.write("\5\26\u0270\n\26\3\26\3\26\3\26\5\26\u0275\n\26\5\26\u0277")
        buf.write("\n\26\3\27\3\27\3\27\3\27\3\30\3\30\5\30\u027f\n\30\3")
        buf.write("\30\3\30\3\30\3\30\5\30\u0285\n\30\3\30\3\30\3\30\5\30")
        buf.write("\u028a\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u0291\n\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\7\30\u029a\n\30\f\30")
        buf.write("\16\30\u029d\13\30\5\30\u029f\n\30\5\30\u02a1\n\30\3\30")
        buf.write("\3\30\3\30\3\30\3\30\5\30\u02a8\n\30\3\30\3\30\5\30\u02ac")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u02b3\n\30\3\30\3")
        buf.write("\30\6\30\u02b7\n\30\r\30\16\30\u02b8\3\30\3\30\3\31\3")
        buf.write("\31\5\31\u02bf\n\31\3\31\3\31\3\31\3\31\5\31\u02c5\n\31")
        buf.write("\3\31\3\31\3\31\5\31\u02ca\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\7\31\u02d1\n\31\f\31\16\31\u02d4\13\31\3\31\3\31\5")
        buf.write("\31\u02d8\n\31\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u02e3\n\32\3\32\3\32\3\32\5\32\u02e8\n\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\7\32\u02f1\n\32\f\32")
        buf.write("\16\32\u02f4\13\32\3\32\3\32\5\32\u02f8\n\32\3\33\3\33")
        buf.write("\5\33\u02fc\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\7\33\u030a\n\33\f\33\16\33\u030d")
        buf.write("\13\33\3\34\3\34\3\34\3\34\3\34\7\34\u0314\n\34\f\34\16")
        buf.write("\34\u0317\13\34\3\34\3\34\5\34\u031b\n\34\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\5\35\u0323\n\35\3\35\3\35\3\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\7\36\u032d\n\36\f\36\16\36\u0330")
        buf.write("\13\36\3\36\3\36\5\36\u0334\n\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\37\5\37\u033c\n\37\3\37\3\37\3\37\3\37\3\37\5\37")
        buf.write("\u0343\n\37\3 \5 \u0346\n \3 \3 \3 \3 \3 \5 \u034d\n ")
        buf.write("\3 \5 \u0350\n \3 \5 \u0353\n \3!\3!\5!\u0357\n!\3!\3")
        buf.write("!\3\"\3\"\3\"\3\"\5\"\u035f\n\"\3\"\3\"\3\"\5\"\u0364")
        buf.write("\n\"\3\"\3\"\3#\3#\3#\3#\3#\3#\5#\u036e\n#\3#\3#\3#\5")
        buf.write("#\u0373\n#\3#\3#\3#\3#\3#\3#\3#\5#\u037c\n#\3#\3#\3#\7")
        buf.write("#\u0381\n#\f#\16#\u0384\13#\3#\5#\u0387\n#\3#\3#\5#\u038b")
        buf.write("\n#\3#\5#\u038e\n#\3#\3#\3#\3#\7#\u0394\n#\f#\16#\u0397")
        buf.write("\13#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03a3\n#\3#\5#\u03a6")
        buf.write("\n#\3#\3#\3#\3#\3#\3#\5#\u03ae\n#\3#\3#\3#\3#\3#\6#\u03b5")
        buf.write("\n#\r#\16#\u03b6\3#\3#\5#\u03bb\n#\3#\3#\3#\5#\u03c0\n")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03de\n#\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\5#\u03ea\n#\3#\3#\3#\5#\u03ef\n#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\3#\3#\5#\u03fb\n#\3#\3#\3#\3#\5")
        buf.write("#\u0401\n#\3#\3#\3#\3#\3#\5#\u0408\n#\3#\3#\5#\u040c\n")
        buf.write("#\3#\3#\3#\3#\3#\3#\7#\u0414\n#\f#\16#\u0417\13#\5#\u0419")
        buf.write("\n#\3#\3#\3#\3#\5#\u041f\n#\3#\3#\3#\3#\5#\u0425\n#\3")
        buf.write("#\3#\3#\3#\3#\7#\u042c\n#\f#\16#\u042f\13#\5#\u0431\n")
        buf.write("#\3#\3#\5#\u0435\n#\7#\u0437\n#\f#\16#\u043a\13#\3$\3")
        buf.write("$\3$\3$\3$\3$\5$\u0442\n$\3$\3$\3%\3%\3&\5&\u0449\n&\3")
        buf.write("&\3&\3&\3&\3&\5&\u0450\n&\3&\3&\3&\3&\5&\u0456\n&\3&\3")
        buf.write("&\3&\5&\u045b\n&\3&\3&\3&\3&\7&\u0461\n&\f&\16&\u0464")
        buf.write("\13&\3&\3&\5&\u0468\n&\3&\3&\3&\3&\3&\7&\u046f\n&\f&\16")
        buf.write("&\u0472\13&\3&\3&\3&\3&\3&\3&\7&\u047a\n&\f&\16&\u047d")
        buf.write("\13&\3&\3&\7&\u0481\n&\f&\16&\u0484\13&\3&\5&\u0487\n")
        buf.write("&\3&\5&\u048a\n&\3&\3&\5&\u048e\n&\3\'\3\'\3\'\3\'\3\'")
        buf.write("\3\'\7\'\u0496\n\'\f\'\16\'\u0499\13\'\3\'\3\'\3\'\5\'")
        buf.write("\u049e\n\'\5\'\u04a0\n\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u04a8")
        buf.write("\n\'\3\'\3\'\3\'\3\'\3\'\5\'\u04af\n\'\3\'\3\'\3\'\7\'")
        buf.write("\u04b4\n\'\f\'\16\'\u04b7\13\'\3\'\3\'\5\'\u04bb\n\'\5")
        buf.write("\'\u04bd\n\'\3(\3(\3(\3(\5(\u04c3\n(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u04cc\n(\3)\3)\3)\5)\u04d1\n)\3*\3*\3*\3*\3*\5")
        buf.write("*\u04d8\n*\3*\3*\5*\u04dc\n*\5*\u04de\n*\3+\5+\u04e1\n")
        buf.write("+\3+\3+\3+\3+\7+\u04e7\n+\f+\16+\u04ea\13+\3+\5+\u04ed")
        buf.write("\n+\3+\5+\u04f0\n+\3,\3,\3,\3,\5,\u04f6\n,\7,\u04f8\n")
        buf.write(",\f,\16,\u04fb\13,\3-\3-\5-\u04ff\n-\3-\3-\3-\7-\u0504")
        buf.write("\n-\f-\16-\u0507\13-\3-\3-\3-\3-\7-\u050d\n-\f-\16-\u0510")
        buf.write("\13-\3-\5-\u0513\n-\5-\u0515\n-\3-\3-\5-\u0519\n-\3-\5")
        buf.write("-\u051c\n-\3-\3-\3-\3-\3-\3-\3-\3-\3-\7-\u0527\n-\f-\16")
        buf.write("-\u052a\13-\5-\u052c\n-\3-\3-\3-\3-\3-\7-\u0533\n-\f-")
        buf.write("\16-\u0536\13-\3-\3-\3-\3-\3-\3-\7-\u053e\n-\f-\16-\u0541")
        buf.write("\13-\3-\3-\7-\u0545\n-\f-\16-\u0548\13-\5-\u054a\n-\3")
        buf.write(".\3.\3.\3.\3.\7.\u0551\n.\f.\16.\u0554\13.\3.\5.\u0557")
        buf.write("\n.\3/\3/\3/\3\60\3\60\3\61\5\61\u055f\n\61\3\61\3\61")
        buf.write("\5\61\u0563\n\61\3\61\5\61\u0566\n\61\3\62\5\62\u0569")
        buf.write("\n\62\3\62\3\62\3\62\5\62\u056e\n\62\3\62\3\62\5\62\u0572")
        buf.write("\n\62\3\62\6\62\u0575\n\62\r\62\16\62\u0576\3\62\5\62")
        buf.write("\u057a\n\62\3\62\5\62\u057d\n\62\3\63\3\63\3\63\5\63\u0582")
        buf.write("\n\63\3\63\3\63\5\63\u0586\n\63\3\63\5\63\u0589\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\5\63\u0590\n\63\3\63\3\63\3\63")
        buf.write("\5\63\u0595\n\63\3\63\3\63\3\63\3\63\3\63\7\63\u059c\n")
        buf.write("\63\f\63\16\63\u059f\13\63\3\63\3\63\5\63\u05a3\n\63\3")
        buf.write("\63\5\63\u05a6\n\63\3\63\3\63\3\63\3\63\7\63\u05ac\n\63")
        buf.write("\f\63\16\63\u05af\13\63\3\63\5\63\u05b2\n\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\5\63\u05ba\n\63\3\63\5\63\u05bd\n")
        buf.write("\63\5\63\u05bf\n\63\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u05c8\n\64\3\64\5\64\u05cb\n\64\5\64\u05cd\n\64")
        buf.write("\3\65\3\65\5\65\u05d1\n\65\3\65\3\65\5\65\u05d5\n\65\3")
        buf.write("\65\3\65\5\65\u05d9\n\65\3\65\5\65\u05dc\n\65\3\66\3\66")
        buf.write("\3\66\3\66\3\66\3\66\3\66\7\66\u05e5\n\66\f\66\16\66\u05e8")
        buf.write("\13\66\3\66\3\66\5\66\u05ec\n\66\3\67\3\67\5\67\u05f0")
        buf.write("\n\67\3\67\3\67\5\67\u05f4\n\67\38\58\u05f7\n8\38\38\3")
        buf.write("8\58\u05fc\n8\38\38\38\38\58\u0602\n8\38\38\38\38\38\5")
        buf.write("8\u0609\n8\38\38\38\78\u060e\n8\f8\168\u0611\138\38\3")
        buf.write("8\58\u0615\n8\39\39\39\39\79\u061b\n9\f9\169\u061e\13")
        buf.write("9\39\39\3:\5:\u0623\n:\3:\3:\3:\5:\u0628\n:\3:\3:\3:\3")
        buf.write(":\5:\u062e\n:\3:\3:\3:\3:\3:\5:\u0635\n:\3:\3:\3:\7:\u063a")
        buf.write("\n:\f:\16:\u063d\13:\3:\3:\5:\u0641\n:\3:\5:\u0644\n:")
        buf.write("\3:\5:\u0647\n:\3;\3;\3;\5;\u064c\n;\3;\3;\3;\5;\u0651")
        buf.write("\n;\3;\3;\3;\3;\3;\5;\u0658\n;\3<\3<\5<\u065c\n<\3<\3")
        buf.write("<\5<\u0660\n<\3=\3=\3=\3=\3=\3=\3>\3>\5>\u066a\n>\3>\3")
        buf.write(">\3>\3>\3>\7>\u0671\n>\f>\16>\u0674\13>\5>\u0676\n>\3")
        buf.write(">\3>\3>\3>\3>\7>\u067d\n>\f>\16>\u0680\13>\3>\5>\u0683")
        buf.write("\n>\3>\3>\3?\3?\3?\3?\5?\u068b\n?\3?\3?\3?\3?\3?\7?\u0692")
        buf.write("\n?\f?\16?\u0695\13?\5?\u0697\n?\3?\3?\3?\3?\3?\7?\u069e")
        buf.write("\n?\f?\16?\u06a1\13?\5?\u06a3\n?\3?\5?\u06a6\n?\3?\5?")
        buf.write("\u06a9\n?\3@\3@\3@\3@\3@\3@\3@\3@\5@\u06b3\n@\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\5A\u06bc\nA\3B\3B\3B\3B\3B\7B\u06c3\nB\f")
        buf.write("B\16B\u06c6\13B\3B\5B\u06c9\nB\3B\3B\3C\3C\3C\5C\u06d0")
        buf.write("\nC\3C\3C\3C\7C\u06d5\nC\fC\16C\u06d8\13C\3C\5C\u06db")
        buf.write("\nC\3C\3C\5C\u06df\nC\3D\3D\3D\3D\3D\7D\u06e6\nD\fD\16")
        buf.write("D\u06e9\13D\3D\5D\u06ec\nD\3D\3D\5D\u06f0\nD\3D\3D\3D")
        buf.write("\5D\u06f5\nD\3E\3E\5E\u06f9\nE\3E\3E\3E\7E\u06fe\nE\f")
        buf.write("E\16E\u0701\13E\3F\3F\3F\3F\3F\7F\u0708\nF\fF\16F\u070b")
        buf.write("\13F\3G\3G\3G\3G\5G\u0711\nG\3H\3H\3H\5H\u0716\nH\3H\5")
        buf.write("H\u0719\nH\3H\3H\5H\u071d\nH\3I\3I\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\5J\u072b\nJ\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5")
        buf.write("K\u0737\nK\3L\3L\3L\3L\3L\3L\3L\5L\u0740\nL\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\5M\u0749\nM\3M\3M\5M\u074d\nM\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\5M\u0757\nM\3M\5M\u075a\nM\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\5M\u0763\nM\3M\3M\3M\3M\3M\3M\3M\5M\u076c\nM\3M\5")
        buf.write("M\u076f\nM\3M\3M\3M\3M\5M\u0775\nM\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\5M\u0783\nM\3M\3M\5M\u0787\nM\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\5M\u0792\nM\3M\3M\3M\5M\u0797\nM\3")
        buf.write("N\3N\3N\3O\3O\3O\3P\3P\3P\6P\u07a2\nP\rP\16P\u07a3\3Q")
        buf.write("\3Q\3Q\6Q\u07a9\nQ\rQ\16Q\u07aa\3R\3R\3R\3R\3S\3S\5S\u07b3")
        buf.write("\nS\3S\3S\3S\5S\u07b8\nS\7S\u07ba\nS\fS\16S\u07bd\13S")
        buf.write("\3T\3T\3U\3U\3V\3V\3W\3W\3X\3X\5X\u07c9\nX\3Y\3Y\3Z\3")
        buf.write("Z\3[\3[\3\\\3\\\3]\3]\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3")
        buf.write("c\3c\3d\3d\3e\3e\3f\3f\3g\3g\3h\3h\3i\3i\3j\3j\3k\3k\3")
        buf.write("l\3l\3m\3m\3n\3n\3o\3o\3p\3p\3q\3q\3r\3r\3s\3s\3s\3s\3")
        buf.write("s\3s\3s\3s\5s\u0807\ns\3s\4\u01bb\u01db\3Dt\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086")
        buf.write("\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098")
        buf.write("\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa")
        buf.write("\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc")
        buf.write("\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce")
        buf.write("\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0")
        buf.write("\u00e2\u00e4\2\36\5\2==HHUU\4\2\62\62EE\3\2\u0087\u0088")
        buf.write("\4\2\u0094\u0094\u00ad\u00ad\3\2\13\f\4\2>>\u008f\u008f")
        buf.write("\4\2;;kk\4\2==UU\7\2\34\34KKTT}}\u0080\u0080\6\2WW\u0086")
        buf.write("\u0086\u008c\u008c\u0093\u0093\4\2\t\t\17\20\3\2\21\24")
        buf.write("\3\2\25\30\6\2PPddffyy\5\2\34\34KK\u0080\u0080\7\2\67")
        buf.write("9kk\u00ae\u00af\u00bc\u00bc\u00bf\u00c0\4\2  AA\5\2\u0082")
        buf.write("\u0082\u009c\u009c\u00b5\u00b5\4\2\7\7mm\3\2\u00b2\u00b3")
        buf.write("\4\2%%??\4\2\u0099\u0099\u00a4\u00a4\4\2\u00a1\u00a1\u00a8")
        buf.write("\u00a8\4\2\u00a2\u00a2\u00a9\u00aa\4\2\u00a3\u00a3\u00a5")
        buf.write("\u00a5\4\2\13\rii\4\2\u00bb\u00bb\u00bf\u00bf\3\2\34\u00b6")
        buf.write("\2\u091c\2\u00ea\3\2\2\2\4\u00ef\3\2\2\2\6\u00f5\3\2\2")
        buf.write("\2\b\u010f\3\2\2\2\n\u012b\3\2\2\2\f\u0146\3\2\2\2\16")
        buf.write("\u0150\3\2\2\2\20\u0158\3\2\2\2\22\u0162\3\2\2\2\24\u0166")
        buf.write("\3\2\2\2\26\u0171\3\2\2\2\30\u0174\3\2\2\2\32\u017a\3")
        buf.write("\2\2\2\34\u019c\3\2\2\2\36\u01a5\3\2\2\2 \u01ce\3\2\2")
        buf.write("\2\"\u01d9\3\2\2\2$\u01eb\3\2\2\2&\u021f\3\2\2\2(\u0225")
        buf.write("\3\2\2\2*\u024e\3\2\2\2,\u0278\3\2\2\2.\u027c\3\2\2\2")
        buf.write("\60\u02bc\3\2\2\2\62\u02dc\3\2\2\2\64\u02f9\3\2\2\2\66")
        buf.write("\u030e\3\2\2\28\u031c\3\2\2\2:\u0327\3\2\2\2<\u033b\3")
        buf.write("\2\2\2>\u0345\3\2\2\2@\u0354\3\2\2\2B\u035a\3\2\2\2D\u03bf")
        buf.write("\3\2\2\2F\u043b\3\2\2\2H\u0445\3\2\2\2J\u048d\3\2\2\2")
        buf.write("L\u048f\3\2\2\2N\u04be\3\2\2\2P\u04d0\3\2\2\2R\u04d2\3")
        buf.write("\2\2\2T\u04e0\3\2\2\2V\u04f1\3\2\2\2X\u0549\3\2\2\2Z\u054b")
        buf.write("\3\2\2\2\\\u0558\3\2\2\2^\u055b\3\2\2\2`\u055e\3\2\2\2")
        buf.write("b\u0568\3\2\2\2d\u05be\3\2\2\2f\u05cc\3\2\2\2h\u05db\3")
        buf.write("\2\2\2j\u05eb\3\2\2\2l\u05f3\3\2\2\2n\u05f6\3\2\2\2p\u0616")
        buf.write("\3\2\2\2r\u0622\3\2\2\2t\u064b\3\2\2\2v\u0659\3\2\2\2")
        buf.write("x\u0661\3\2\2\2z\u0667\3\2\2\2|\u0686\3\2\2\2~\u06aa\3")
        buf.write("\2\2\2\u0080\u06b4\3\2\2\2\u0082\u06bd\3\2\2\2\u0084\u06cc")
        buf.write("\3\2\2\2\u0086\u06e0\3\2\2\2\u0088\u06f6\3\2\2\2\u008a")
        buf.write("\u0702\3\2\2\2\u008c\u070c\3\2\2\2\u008e\u0712\3\2\2\2")
        buf.write("\u0090\u071e\3\2\2\2\u0092\u072a\3\2\2\2\u0094\u0736\3")
        buf.write("\2\2\2\u0096\u073f\3\2\2\2\u0098\u0796\3\2\2\2\u009a\u0798")
        buf.write("\3\2\2\2\u009c\u079b\3\2\2\2\u009e\u079e\3\2\2\2\u00a0")
        buf.write("\u07a5\3\2\2\2\u00a2\u07ac\3\2\2\2\u00a4\u07b0\3\2\2\2")
        buf.write("\u00a6\u07be\3\2\2\2\u00a8\u07c0\3\2\2\2\u00aa\u07c2\3")
        buf.write("\2\2\2\u00ac\u07c4\3\2\2\2\u00ae\u07c8\3\2\2\2\u00b0\u07ca")
        buf.write("\3\2\2\2\u00b2\u07cc\3\2\2\2\u00b4\u07ce\3\2\2\2\u00b6")
        buf.write("\u07d0\3\2\2\2\u00b8\u07d2\3\2\2\2\u00ba\u07d4\3\2\2\2")
        buf.write("\u00bc\u07d6\3\2\2\2\u00be\u07d8\3\2\2\2\u00c0\u07da\3")
        buf.write("\2\2\2\u00c2\u07dc\3\2\2\2\u00c4\u07de\3\2\2\2\u00c6\u07e0")
        buf.write("\3\2\2\2\u00c8\u07e2\3\2\2\2\u00ca\u07e4\3\2\2\2\u00cc")
        buf.write("\u07e6\3\2\2\2\u00ce\u07e8\3\2\2\2\u00d0\u07ea\3\2\2\2")
        buf.write("\u00d2\u07ec\3\2\2\2\u00d4\u07ee\3\2\2\2\u00d6\u07f0\3")
        buf.write("\2\2\2\u00d8\u07f2\3\2\2\2\u00da\u07f4\3\2\2\2\u00dc\u07f6")
        buf.write("\3\2\2\2\u00de\u07f8\3\2\2\2\u00e0\u07fa\3\2\2\2\u00e2")
        buf.write("\u07fc\3\2\2\2\u00e4\u0806\3\2\2\2\u00e6\u00e9\5\6\4\2")
        buf.write("\u00e7\u00e9\5\4\3\2\u00e8\u00e6\3\2\2\2\u00e8\u00e7\3")
        buf.write("\2\2\2\u00e9\u00ec\3\2\2\2\u00ea\u00e8\3\2\2\2\u00ea\u00eb")
        buf.write("\3\2\2\2\u00eb\u00ed\3\2\2\2\u00ec\u00ea\3\2\2\2\u00ed")
        buf.write("\u00ee\7\2\2\3\u00ee\3\3\2\2\2\u00ef\u00f0\7\u00c4\2\2")
        buf.write("\u00f0\u00f1\b\3\1\2\u00f1\5\3\2\2\2\u00f2\u00f4\7\3\2")
        buf.write("\2\u00f3\u00f2\3\2\2\2\u00f4\u00f7\3\2\2\2\u00f5\u00f3")
        buf.write("\3\2\2\2\u00f5\u00f6\3\2\2\2\u00f6\u00f8\3\2\2\2\u00f7")
        buf.write("\u00f5\3\2\2\2\u00f8\u0101\5\b\5\2\u00f9\u00fb\7\3\2\2")
        buf.write("\u00fa\u00f9\3\2\2\2\u00fb\u00fc\3\2\2\2\u00fc\u00fa\3")
        buf.write("\2\2\2\u00fc\u00fd\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe\u0100")
        buf.write("\5\b\5\2\u00ff\u00fa\3\2\2\2\u0100\u0103\3\2\2\2\u0101")
        buf.write("\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102\u0107\3\2\2\2")
        buf.write("\u0103\u0101\3\2\2\2\u0104\u0106\7\3\2\2\u0105\u0104\3")
        buf.write("\2\2\2\u0106\u0109\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108")
        buf.write("\3\2\2\2\u0108\7\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u010d")
        buf.write("\7J\2\2\u010b\u010c\7u\2\2\u010c\u010e\7r\2\2\u010d\u010b")
        buf.write("\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0110\3\2\2\2\u010f")
        buf.write("\u010a\3\2\2\2\u010f\u0110\3\2\2\2\u0110\u0129\3\2\2\2")
        buf.write("\u0111\u012a\5\n\6\2\u0112\u012a\5\f\7\2\u0113\u012a\5")
        buf.write("\16\b\2\u0114\u012a\5\20\t\2\u0115\u012a\5\22\n\2\u0116")
        buf.write("\u012a\5\32\16\2\u0117\u012a\5\36\20\2\u0118\u012a\5.")
        buf.write("\30\2\u0119\u012a\5\60\31\2\u011a\u012a\5\62\32\2\u011b")
        buf.write("\u012a\5<\37\2\u011c\u012a\5> \2\u011d\u012a\5@!\2\u011e")
        buf.write("\u012a\5B\"\2\u011f\u012a\5J&\2\u0120\u012a\5N(\2\u0121")
        buf.write("\u012a\5R*\2\u0122\u012a\5\30\r\2\u0123\u012a\5\24\13")
        buf.write("\2\u0124\u012a\5\26\f\2\u0125\u012a\5T+\2\u0126\u012a")
        buf.write("\5n8\2\u0127\u012a\5r:\2\u0128\u012a\5v<\2\u0129\u0111")
        buf.write("\3\2\2\2\u0129\u0112\3\2\2\2\u0129\u0113\3\2\2\2\u0129")
        buf.write("\u0114\3\2\2\2\u0129\u0115\3\2\2\2\u0129\u0116\3\2\2\2")
        buf.write("\u0129\u0117\3\2\2\2\u0129\u0118\3\2\2\2\u0129\u0119\3")
        buf.write("\2\2\2\u0129\u011a\3\2\2\2\u0129\u011b\3\2\2\2\u0129\u011c")
        buf.write("\3\2\2\2\u0129\u011d\3\2\2\2\u0129\u011e\3\2\2\2\u0129")
        buf.write("\u011f\3\2\2\2\u0129\u0120\3\2\2\2\u0129\u0121\3\2\2\2")
        buf.write("\u0129\u0122\3\2\2\2\u0129\u0123\3\2\2\2\u0129\u0124\3")
        buf.write("\2\2\2\u0129\u0125\3\2\2\2\u0129\u0126\3\2\2\2\u0129\u0127")
        buf.write("\3\2\2\2\u0129\u0128\3\2\2\2\u012a\t\3\2\2\2\u012b\u012c")
        buf.write("\7!\2\2\u012c\u0130\7\u0086\2\2\u012d\u012e\5\u00b8]\2")
        buf.write("\u012e\u012f\7\4\2\2\u012f\u0131\3\2\2\2\u0130\u012d\3")
        buf.write("\2\2\2\u0130\u0131\3\2\2\2\u0131\u0132\3\2\2\2\u0132\u0144")
        buf.write("\5\u00ba^\2\u0133\u013d\7|\2\2\u0134\u0135\7\u008a\2\2")
        buf.write("\u0135\u013e\5\u00be`\2\u0136\u0138\7\61\2\2\u0137\u0136")
        buf.write("\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u0139\3\2\2\2\u0139")
        buf.write("\u013a\5\u00c0a\2\u013a\u013b\7\u008a\2\2\u013b\u013c")
        buf.write("\5\u00c0a\2\u013c\u013e\3\2\2\2\u013d\u0134\3\2\2\2\u013d")
        buf.write("\u0137\3\2\2\2\u013e\u0145\3\2\2\2\u013f\u0141\7\36\2")
        buf.write("\2\u0140\u0142\7\61\2\2\u0141\u0140\3\2\2\2\u0141\u0142")
        buf.write("\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0145\5 \21\2\u0144")
        buf.write("\u0133\3\2\2\2\u0144\u013f\3\2\2\2\u0145\13\3\2\2\2\u0146")
        buf.write("\u014e\7\"\2\2\u0147\u014f\5\u00b8]\2\u0148\u0149\5\u00b8")
        buf.write("]\2\u0149\u014a\7\4\2\2\u014a\u014c\3\2\2\2\u014b\u0148")
        buf.write("\3\2\2\2\u014b\u014c\3\2\2\2\u014c\u014d\3\2\2\2\u014d")
        buf.write("\u014f\5\u00bc_\2\u014e\u0147\3\2\2\2\u014e\u014b\3\2")
        buf.write("\2\2\u014e\u014f\3\2\2\2\u014f\r\3\2\2\2\u0150\u0152\7")
        buf.write("&\2\2\u0151\u0153\7:\2\2\u0152\u0151\3\2\2\2\u0152\u0153")
        buf.write("\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u0155\5D#\2\u0155\u0156")
        buf.write("\7$\2\2\u0156\u0157\5\u00b8]\2\u0157\17\3\2\2\2\u0158")
        buf.write("\u015a\7)\2\2\u0159\u015b\t\2\2\2\u015a\u0159\3\2\2\2")
        buf.write("\u015a\u015b\3\2\2\2\u015b\u0160\3\2\2\2\u015c\u015e\7")
        buf.write("\u008b\2\2\u015d\u015f\5\u00d4k\2\u015e\u015d\3\2\2\2")
        buf.write("\u015e\u015f\3\2\2\2\u015f\u0161\3\2\2\2\u0160\u015c\3")
        buf.write("\2\2\2\u0160\u0161\3\2\2\2\u0161\21\3\2\2\2\u0162\u0164")
        buf.write("\t\3\2\2\u0163\u0165\7\u008b\2\2\u0164\u0163\3\2\2\2\u0164")
        buf.write("\u0165\3\2\2\2\u0165\23\3\2\2\2\u0166\u0168\7\u0080\2")
        buf.write("\2\u0167\u0169\7\u008b\2\2\u0168\u0167\3\2\2\2\u0168\u0169")
        buf.write("\3\2\2\2\u0169\u016f\3\2\2\2\u016a\u016c\7\u008a\2\2\u016b")
        buf.write("\u016d\7\u0083\2\2\u016c\u016b\3\2\2\2\u016c\u016d\3\2")
        buf.write("\2\2\u016d\u016e\3\2\2\2\u016e\u0170\5\u00d0i\2\u016f")
        buf.write("\u016a\3\2\2\2\u016f\u0170\3\2\2\2\u0170\25\3\2\2\2\u0171")
        buf.write("\u0172\7\u0083\2\2\u0172\u0173\5\u00d0i\2\u0173\27\3\2")
        buf.write("\2\2\u0174\u0176\7{\2\2\u0175\u0177\7\u0083\2\2\u0176")
        buf.write("\u0175\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0178\3\2\2\2")
        buf.write("\u0178\u0179\5\u00d0i\2\u0179\31\3\2\2\2\u017a\u017c\7")
        buf.write("\65\2\2\u017b\u017d\7\u008e\2\2\u017c\u017b\3\2\2\2\u017c")
        buf.write("\u017d\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u0182\7W\2\2")
        buf.write("\u017f\u0180\7S\2\2\u0180\u0181\7i\2\2\u0181\u0183\7I")
        buf.write("\2\2\u0182\u017f\3\2\2\2\u0182\u0183\3\2\2\2\u0183\u0187")
        buf.write("\3\2\2\2\u0184\u0185\5\u00b8]\2\u0185\u0186\7\4\2\2\u0186")
        buf.write("\u0188\3\2\2\2\u0187\u0184\3\2\2\2\u0187\u0188\3\2\2\2")
        buf.write("\u0188\u0189\3\2\2\2\u0189\u018a\5\u00c6d\2\u018a\u018b")
        buf.write("\7n\2\2\u018b\u018c\5\u00ba^\2\u018c\u018d\7\5\2\2\u018d")
        buf.write("\u0192\5\34\17\2\u018e\u018f\7\7\2\2\u018f\u0191\5\34")
        buf.write("\17\2\u0190\u018e\3\2\2\2\u0191\u0194\3\2\2\2\u0192\u0190")
        buf.write("\3\2\2\2\u0192\u0193\3\2\2\2\u0193\u0195\3\2\2\2\u0194")
        buf.write("\u0192\3\2\2\2\u0195\u0198\7\6\2\2\u0196\u0197\7\u0096")
        buf.write("\2\2\u0197\u0199\5D#\2\u0198\u0196\3\2\2\2\u0198\u0199")
        buf.write("\3\2\2\2\u0199\33\3\2\2\2\u019a\u019d\5\u00c0a\2\u019b")
        buf.write("\u019d\5D#\2\u019c\u019a\3\2\2\2\u019c\u019b\3\2\2\2\u019d")
        buf.write("\u01a0\3\2\2\2\u019e\u019f\7\60\2\2\u019f\u01a1\5\u00c2")
        buf.write("b\2\u01a0\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u01a3")
        buf.write("\3\2\2\2\u01a2\u01a4\5\u0090I\2\u01a3\u01a2\3\2\2\2\u01a3")
        buf.write("\u01a4\3\2\2\2\u01a4\35\3\2\2\2\u01a5\u01a7\7\65\2\2\u01a6")
        buf.write("\u01a8\t\4\2\2\u01a7\u01a6\3\2\2\2\u01a7\u01a8\3\2\2\2")
        buf.write("\u01a8\u01a9\3\2\2\2\u01a9\u01ad\7\u0086\2\2\u01aa\u01ab")
        buf.write("\7S\2\2\u01ab\u01ac\7i\2\2\u01ac\u01ae\7I\2\2\u01ad\u01aa")
        buf.write("\3\2\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01b2\3\2\2\2\u01af")
        buf.write("\u01b0\5\u00b8]\2\u01b0\u01b1\7\4\2\2\u01b1\u01b3\3\2")
        buf.write("\2\2\u01b2\u01af\3\2\2\2\u01b2\u01b3\3\2\2\2\u01b3\u01b4")
        buf.write("\3\2\2\2\u01b4\u01cc\5\u00ba^\2\u01b5\u01b6\7\5\2\2\u01b6")
        buf.write("\u01bb\5 \21\2\u01b7\u01b8\7\7\2\2\u01b8\u01ba\5 \21\2")
        buf.write("\u01b9\u01b7\3\2\2\2\u01ba\u01bd\3\2\2\2\u01bb\u01bc\3")
        buf.write("\2\2\2\u01bb\u01b9\3\2\2\2\u01bc\u01c2\3\2\2\2\u01bd\u01bb")
        buf.write("\3\2\2\2\u01be\u01bf\7\7\2\2\u01bf\u01c1\5(\25\2\u01c0")
        buf.write("\u01be\3\2\2\2\u01c1\u01c4\3\2\2\2\u01c2\u01c0\3\2\2\2")
        buf.write("\u01c2\u01c3\3\2\2\2\u01c3\u01c5\3\2\2\2\u01c4\u01c2\3")
        buf.write("\2\2\2\u01c5\u01c8\7\6\2\2\u01c6\u01c7\7\u0098\2\2\u01c7")
        buf.write("\u01c9\7\u00bb\2\2\u01c8\u01c6\3\2\2\2\u01c8\u01c9\3\2")
        buf.write("\2\2\u01c9\u01cd\3\2\2\2\u01ca\u01cb\7$\2\2\u01cb\u01cd")
        buf.write("\5T+\2\u01cc\u01b5\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cd\37")
        buf.write("\3\2\2\2\u01ce\u01d0\5\u00c0a\2\u01cf\u01d1\5\"\22\2\u01d0")
        buf.write("\u01cf\3\2\2\2\u01d0\u01d1\3\2\2\2\u01d1\u01d5\3\2\2\2")
        buf.write("\u01d2\u01d4\5$\23\2\u01d3\u01d2\3\2\2\2\u01d4\u01d7\3")
        buf.write("\2\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2\u01d6!")
        buf.write("\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d8\u01da\5\u00b4[\2\u01d9")
        buf.write("\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01dc\3\2\2\2")
        buf.write("\u01db\u01d9\3\2\2\2\u01dc\u01e7\3\2\2\2\u01dd\u01de\7")
        buf.write("\5\2\2\u01de\u01df\5&\24\2\u01df\u01e0\7\6\2\2\u01e0\u01e8")
        buf.write("\3\2\2\2\u01e1\u01e2\7\5\2\2\u01e2\u01e3\5&\24\2\u01e3")
        buf.write("\u01e4\7\7\2\2\u01e4\u01e5\5&\24\2\u01e5\u01e6\7\6\2\2")
        buf.write("\u01e6\u01e8\3\2\2\2\u01e7\u01dd\3\2\2\2\u01e7\u01e1\3")
        buf.write("\2\2\2\u01e7\u01e8\3\2\2\2\u01e8#\3\2\2\2\u01e9\u01ea")
        buf.write("\7\64\2\2\u01ea\u01ec\5\u00b4[\2\u01eb\u01e9\3\2\2\2\u01eb")
        buf.write("\u01ec\3\2\2\2\u01ec\u021c\3\2\2\2\u01ed\u01ee\7t\2\2")
        buf.write("\u01ee\u01f0\7b\2\2\u01ef\u01f1\5\u0090I\2\u01f0\u01ef")
        buf.write("\3\2\2\2\u01f0\u01f1\3\2\2\2\u01f1\u01f3\3\2\2\2\u01f2")
        buf.write("\u01f4\5,\27\2\u01f3\u01f2\3\2\2\2\u01f3\u01f4\3\2\2\2")
        buf.write("\u01f4\u01f6\3\2\2\2\u01f5\u01f7\7\'\2\2\u01f6\u01f5\3")
        buf.write("\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u021d\3\2\2\2\u01f8\u01f9")
        buf.write("\7i\2\2\u01f9\u01fc\7k\2\2\u01fa\u01fc\7\u008e\2\2\u01fb")
        buf.write("\u01f8\3\2\2\2\u01fb\u01fa\3\2\2\2\u01fc\u01fe\3\2\2\2")
        buf.write("\u01fd\u01ff\5,\27\2\u01fe\u01fd\3\2\2\2\u01fe\u01ff\3")
        buf.write("\2\2\2\u01ff\u021d\3\2\2\2\u0200\u0201\7/\2\2\u0201\u0202")
        buf.write("\7\5\2\2\u0202\u0203\5D#\2\u0203\u0204\7\6\2\2\u0204\u021d")
        buf.write("\3\2\2\2\u0205\u020c\7;\2\2\u0206\u020d\5&\24\2\u0207")
        buf.write("\u020d\5H%\2\u0208\u0209\7\5\2\2\u0209\u020a\5D#\2\u020a")
        buf.write("\u020b\7\6\2\2\u020b\u020d\3\2\2\2\u020c\u0206\3\2\2\2")
        buf.write("\u020c\u0207\3\2\2\2\u020c\u0208\3\2\2\2\u020d\u021d\3")
        buf.write("\2\2\2\u020e\u020f\7\60\2\2\u020f\u021d\5\u00c2b\2\u0210")
        buf.write("\u021d\5*\26\2\u0211\u0212\7\u00ab\2\2\u0212\u0214\7\u00ac")
        buf.write("\2\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215")
        buf.write("\3\2\2\2\u0215\u0216\7$\2\2\u0216\u0217\7\5\2\2\u0217")
        buf.write("\u0218\5D#\2\u0218\u021a\7\6\2\2\u0219\u021b\t\5\2\2\u021a")
        buf.write("\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021d\3\2\2\2")
        buf.write("\u021c\u01ed\3\2\2\2\u021c\u01fb\3\2\2\2\u021c\u0200\3")
        buf.write("\2\2\2\u021c\u0205\3\2\2\2\u021c\u020e\3\2\2\2\u021c\u0210")
        buf.write("\3\2\2\2\u021c\u0213\3\2\2\2\u021d%\3\2\2\2\u021e\u0220")
        buf.write("\t\6\2\2\u021f\u021e\3\2\2\2\u021f\u0220\3\2\2\2\u0220")
        buf.write("\u0221\3\2\2\2\u0221\u0222\7\u00bc\2\2\u0222\'\3\2\2\2")
        buf.write("\u0223\u0224\7\64\2\2\u0224\u0226\5\u00b4[\2\u0225\u0223")
        buf.write("\3\2\2\2\u0225\u0226\3\2\2\2\u0226\u024c\3\2\2\2\u0227")
        buf.write("\u0228\7t\2\2\u0228\u022b\7b\2\2\u0229\u022b\7\u008e\2")
        buf.write("\2\u022a\u0227\3\2\2\2\u022a\u0229\3\2\2\2\u022b\u022c")
        buf.write("\3\2\2\2\u022c\u022d\7\5\2\2\u022d\u0232\5\34\17\2\u022e")
        buf.write("\u022f\7\7\2\2\u022f\u0231\5\34\17\2\u0230\u022e\3\2\2")
        buf.write("\2\u0231\u0234\3\2\2\2\u0232\u0230\3\2\2\2\u0232\u0233")
        buf.write("\3\2\2\2\u0233\u0235\3\2\2\2\u0234\u0232\3\2\2\2\u0235")
        buf.write("\u0237\7\6\2\2\u0236\u0238\5,\27\2\u0237\u0236\3\2\2\2")
        buf.write("\u0237\u0238\3\2\2\2\u0238\u024d\3\2\2\2\u0239\u023a\7")
        buf.write("/\2\2\u023a\u023b\7\5\2\2\u023b\u023c\5D#\2\u023c\u023d")
        buf.write("\7\6\2\2\u023d\u024d\3\2\2\2\u023e\u023f\7M\2\2\u023f")
        buf.write("\u0240\7b\2\2\u0240\u0241\7\5\2\2\u0241\u0246\5\u00c0")
        buf.write("a\2\u0242\u0243\7\7\2\2\u0243\u0245\5\u00c0a\2\u0244\u0242")
        buf.write("\3\2\2\2\u0245\u0248\3\2\2\2\u0246\u0244\3\2\2\2\u0246")
        buf.write("\u0247\3\2\2\2\u0247\u0249\3\2\2\2\u0248\u0246\3\2\2\2")
        buf.write("\u0249\u024a\7\6\2\2\u024a\u024b\5*\26\2\u024b\u024d\3")
        buf.write("\2\2\2\u024c\u022a\3\2\2\2\u024c\u0239\3\2\2\2\u024c\u023e")
        buf.write("\3\2\2\2\u024d)\3\2\2\2\u024e\u024f\7x\2\2\u024f\u025b")
        buf.write("\5\u00c4c\2\u0250\u0251\7\5\2\2\u0251\u0256\5\u00c0a\2")
        buf.write("\u0252\u0253\7\7\2\2\u0253\u0255\5\u00c0a\2\u0254\u0252")
        buf.write("\3\2\2\2\u0255\u0258\3\2\2\2\u0256\u0254\3\2\2\2\u0256")
        buf.write("\u0257\3\2\2\2\u0257\u0259\3\2\2\2\u0258\u0256\3\2\2\2")
        buf.write("\u0259\u025a\7\6\2\2\u025a\u025c\3\2\2\2\u025b\u0250\3")
        buf.write("\2\2\2\u025b\u025c\3\2\2\2\u025c\u026b\3\2\2\2\u025d\u025e")
        buf.write("\7n\2\2\u025e\u0265\t\7\2\2\u025f\u0260\7\u0085\2\2\u0260")
        buf.write("\u0266\t\b\2\2\u0261\u0266\7,\2\2\u0262\u0266\7~\2\2\u0263")
        buf.write("\u0264\7h\2\2\u0264\u0266\7\35\2\2\u0265\u025f\3\2\2\2")
        buf.write("\u0265\u0261\3\2\2\2\u0265\u0262\3\2\2\2\u0265\u0263\3")
        buf.write("\2\2\2\u0266\u026a\3\2\2\2\u0267\u0268\7f\2\2\u0268\u026a")
        buf.write("\5\u00b4[\2\u0269\u025d\3\2\2\2\u0269\u0267\3\2\2\2\u026a")
        buf.write("\u026d\3\2\2\2\u026b\u0269\3\2\2\2\u026b\u026c\3\2\2\2")
        buf.write("\u026c\u0276\3\2\2\2\u026d\u026b\3\2\2\2\u026e\u0270\7")
        buf.write("i\2\2\u026f\u026e\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271")
        buf.write("\3\2\2\2\u0271\u0274\7<\2\2\u0272\u0273\7Y\2\2\u0273\u0275")
        buf.write("\t\t\2\2\u0274\u0272\3\2\2\2\u0274\u0275\3\2\2\2\u0275")
        buf.write("\u0277\3\2\2\2\u0276\u026f\3\2\2\2\u0276\u0277\3\2\2\2")
        buf.write("\u0277+\3\2\2\2\u0278\u0279\7n\2\2\u0279\u027a\7\63\2")
        buf.write("\2\u027a\u027b\t\n\2\2\u027b-\3\2\2\2\u027c\u027e\7\65")
        buf.write("\2\2\u027d\u027f\t\4\2\2\u027e\u027d\3\2\2\2\u027e\u027f")
        buf.write("\3\2\2\2\u027f\u0280\3\2\2\2\u0280\u0284\7\u008c\2\2\u0281")
        buf.write("\u0282\7S\2\2\u0282\u0283\7i\2\2\u0283\u0285\7I\2\2\u0284")
        buf.write("\u0281\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u0289\3\2\2\2")
        buf.write("\u0286\u0287\5\u00b8]\2\u0287\u0288\7\4\2\2\u0288\u028a")
        buf.write("\3\2\2\2\u0289\u0286\3\2\2\2\u0289\u028a\3\2\2\2\u028a")
        buf.write("\u028b\3\2\2\2\u028b\u0290\5\u00c8e\2\u028c\u0291\7(\2")
        buf.write("\2\u028d\u0291\7\37\2\2\u028e\u028f\7\\\2\2\u028f\u0291")
        buf.write("\7l\2\2\u0290\u028c\3\2\2\2\u0290\u028d\3\2\2\2\u0290")
        buf.write("\u028e\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u02a0\3\2\2\2")
        buf.write("\u0292\u02a1\7>\2\2\u0293\u02a1\7[\2\2\u0294\u029e\7\u008f")
        buf.write("\2\2\u0295\u0296\7l\2\2\u0296\u029b\5\u00c0a\2\u0297\u0298")
        buf.write("\7\7\2\2\u0298\u029a\5\u00c0a\2\u0299\u0297\3\2\2\2\u029a")
        buf.write("\u029d\3\2\2\2\u029b\u0299\3\2\2\2\u029b\u029c\3\2\2\2")
        buf.write("\u029c\u029f\3\2\2\2\u029d\u029b\3\2\2\2\u029e\u0295\3")
        buf.write("\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a1\3\2\2\2\u02a0\u0292")
        buf.write("\3\2\2\2\u02a0\u0293\3\2\2\2\u02a0\u0294\3\2\2\2\u02a1")
        buf.write("\u02a2\3\2\2\2\u02a2\u02a3\7n\2\2\u02a3\u02a7\5\u00ba")
        buf.write("^\2\u02a4\u02a5\7L\2\2\u02a5\u02a6\7C\2\2\u02a6\u02a8")
        buf.write("\7\u0081\2\2\u02a7\u02a4\3\2\2\2\u02a7\u02a8\3\2\2\2\u02a8")
        buf.write("\u02ab\3\2\2\2\u02a9\u02aa\7\u0095\2\2\u02aa\u02ac\5D")
        buf.write("#\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad")
        buf.write("\3\2\2\2\u02ad\u02b6\7)\2\2\u02ae\u02b3\5n8\2\u02af\u02b3")
        buf.write("\5J&\2\u02b0\u02b3\5<\37\2\u02b1\u02b3\5T+\2\u02b2\u02ae")
        buf.write("\3\2\2\2\u02b2\u02af\3\2\2\2\u02b2\u02b0\3\2\2\2\u02b2")
        buf.write("\u02b1\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b5\7\3\2\2")
        buf.write("\u02b5\u02b7\3\2\2\2\u02b6\u02b2\3\2\2\2\u02b7\u02b8\3")
        buf.write("\2\2\2\u02b8\u02b6\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02ba")
        buf.write("\3\2\2\2\u02ba\u02bb\7E\2\2\u02bb/\3\2\2\2\u02bc\u02be")
        buf.write("\7\65\2\2\u02bd\u02bf\t\4\2\2\u02be\u02bd\3\2\2\2\u02be")
        buf.write("\u02bf\3\2\2\2\u02bf\u02c0\3\2\2\2\u02c0\u02c4\7\u0093")
        buf.write("\2\2\u02c1\u02c2\7S\2\2\u02c2\u02c3\7i\2\2\u02c3\u02c5")
        buf.write("\7I\2\2\u02c4\u02c1\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5")
        buf.write("\u02c9\3\2\2\2\u02c6\u02c7\5\u00b8]\2\u02c7\u02c8\7\4")
        buf.write("\2\2\u02c8\u02ca\3\2\2\2\u02c9\u02c6\3\2\2\2\u02c9\u02ca")
        buf.write("\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02d7\5\u00caf\2\u02cc")
        buf.write("\u02cd\7\5\2\2\u02cd\u02d2\5\u00c0a\2\u02ce\u02cf\7\7")
        buf.write("\2\2\u02cf\u02d1\5\u00c0a\2\u02d0\u02ce\3\2\2\2\u02d1")
        buf.write("\u02d4\3\2\2\2\u02d2\u02d0\3\2\2\2\u02d2\u02d3\3\2\2\2")
        buf.write("\u02d3\u02d5\3\2\2\2\u02d4\u02d2\3\2\2\2\u02d5\u02d6\7")
        buf.write("\6\2\2\u02d6\u02d8\3\2\2\2\u02d7\u02cc\3\2\2\2\u02d7\u02d8")
        buf.write("\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9\u02da\7$\2\2\u02da")
        buf.write("\u02db\5T+\2\u02db\61\3\2\2\2\u02dc\u02dd\7\65\2\2\u02dd")
        buf.write("\u02de\7\u0094\2\2\u02de\u02e2\7\u0086\2\2\u02df\u02e0")
        buf.write("\7S\2\2\u02e0\u02e1\7i\2\2\u02e1\u02e3\7I\2\2\u02e2\u02df")
        buf.write("\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e7\3\2\2\2\u02e4")
        buf.write("\u02e5\5\u00b8]\2\u02e5\u02e6\7\4\2\2\u02e6\u02e8\3\2")
        buf.write("\2\2\u02e7\u02e4\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9")
        buf.write("\3\2\2\2\u02e9\u02ea\5\u00ba^\2\u02ea\u02eb\7\u0090\2")
        buf.write("\2\u02eb\u02f7\5\u00ccg\2\u02ec\u02ed\7\5\2\2\u02ed\u02f2")
        buf.write("\5\u00aeX\2\u02ee\u02ef\7\7\2\2\u02ef\u02f1\5\u00aeX\2")
        buf.write("\u02f0\u02ee\3\2\2\2\u02f1\u02f4\3\2\2\2\u02f2\u02f0\3")
        buf.write("\2\2\2\u02f2\u02f3\3\2\2\2\u02f3\u02f5\3\2\2\2\u02f4\u02f2")
        buf.write("\3\2\2\2\u02f5\u02f6\7\6\2\2\u02f6\u02f8\3\2\2\2\u02f7")
        buf.write("\u02ec\3\2\2\2\u02f7\u02f8\3\2\2\2\u02f8\63\3\2\2\2\u02f9")
        buf.write("\u02fb\7\u0097\2\2\u02fa\u02fc\7w\2\2\u02fb\u02fa\3\2")
        buf.write("\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe")
        buf.write("\5\66\34\2\u02fe\u02ff\7$\2\2\u02ff\u0300\7\5\2\2\u0300")
        buf.write("\u0301\5T+\2\u0301\u030b\7\6\2\2\u0302\u0303\7\7\2\2\u0303")
        buf.write("\u0304\5\66\34\2\u0304\u0305\7$\2\2\u0305\u0306\7\5\2")
        buf.write("\2\u0306\u0307\5T+\2\u0307\u0308\7\6\2\2\u0308\u030a\3")
        buf.write("\2\2\2\u0309\u0302\3\2\2\2\u030a\u030d\3\2\2\2\u030b\u0309")
        buf.write("\3\2\2\2\u030b\u030c\3\2\2\2\u030c\65\3\2\2\2\u030d\u030b")
        buf.write("\3\2\2\2\u030e\u031a\5\u00ba^\2\u030f\u0310\7\5\2\2\u0310")
        buf.write("\u0315\5\u00c0a\2\u0311\u0312\7\7\2\2\u0312\u0314\5\u00c0")
        buf.write("a\2\u0313\u0311\3\2\2\2\u0314\u0317\3\2\2\2\u0315\u0313")
        buf.write("\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0318\3\2\2\2\u0317")
        buf.write("\u0315\3\2\2\2\u0318\u0319\7\6\2\2\u0319\u031b\3\2\2\2")
        buf.write("\u031a\u030f\3\2\2\2\u031a\u031b\3\2\2\2\u031b\67\3\2")
        buf.write("\2\2\u031c\u031d\5\66\34\2\u031d\u031e\7$\2\2\u031e\u031f")
        buf.write("\7\5\2\2\u031f\u0320\5\u00a6T\2\u0320\u0322\7\u008d\2")
        buf.write("\2\u0321\u0323\7 \2\2\u0322\u0321\3\2\2\2\u0322\u0323")
        buf.write("\3\2\2\2\u0323\u0324\3\2\2\2\u0324\u0325\5\u00a8U\2\u0325")
        buf.write("\u0326\7\6\2\2\u03269\3\2\2\2\u0327\u0333\5\u00ba^\2\u0328")
        buf.write("\u0329\7\5\2\2\u0329\u032e\5\u00c0a\2\u032a\u032b\7\7")
        buf.write("\2\2\u032b\u032d\5\u00c0a\2\u032c\u032a\3\2\2\2\u032d")
        buf.write("\u0330\3\2\2\2\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2")
        buf.write("\u032f\u0331\3\2\2\2\u0330\u032e\3\2\2\2\u0331\u0332\7")
        buf.write("\6\2\2\u0332\u0334\3\2\2\2\u0333\u0328\3\2\2\2\u0333\u0334")
        buf.write("\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0336\7$\2\2\u0336")
        buf.write("\u0337\7\5\2\2\u0337\u0338\5T+\2\u0338\u0339\7\6\2\2\u0339")
        buf.write(";\3\2\2\2\u033a\u033c\5\64\33\2\u033b\u033a\3\2\2\2\u033b")
        buf.write("\u033c\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033e\7>\2\2")
        buf.write("\u033e\u033f\7N\2\2\u033f\u0342\5t;\2\u0340\u0341\7\u0096")
        buf.write("\2\2\u0341\u0343\5D#\2\u0342\u0340\3\2\2\2\u0342\u0343")
        buf.write("\3\2\2\2\u0343=\3\2\2\2\u0344\u0346\5\64\33\2\u0345\u0344")
        buf.write("\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0347\3\2\2\2\u0347")
        buf.write("\u0348\7>\2\2\u0348\u0349\7N\2\2\u0349\u034c\5t;\2\u034a")
        buf.write("\u034b\7\u0096\2\2\u034b\u034d\5D#\2\u034c\u034a\3\2\2")
        buf.write("\2\u034c\u034d\3\2\2\2\u034d\u0352\3\2\2\2\u034e\u0350")
        buf.write("\5\u008aF\2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0351\3\2\2\2\u0351\u0353\5\u008cG\2\u0352\u034f\3\2")
        buf.write("\2\2\u0352\u0353\3\2\2\2\u0353?\3\2\2\2\u0354\u0356\7")
        buf.write("@\2\2\u0355\u0357\7:\2\2\u0356\u0355\3\2\2\2\u0356\u0357")
        buf.write("\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359\5\u00b8]\2\u0359")
        buf.write("A\3\2\2\2\u035a\u035b\7B\2\2\u035b\u035e\t\13\2\2\u035c")
        buf.write("\u035d\7S\2\2\u035d\u035f\7I\2\2\u035e\u035c\3\2\2\2\u035e")
        buf.write("\u035f\3\2\2\2\u035f\u0363\3\2\2\2\u0360\u0361\5\u00b8")
        buf.write("]\2\u0361\u0362\7\4\2\2\u0362\u0364\3\2\2\2\u0363\u0360")
        buf.write("\3\2\2\2\u0363\u0364\3\2\2\2\u0364\u0365\3\2\2\2\u0365")
        buf.write("\u0366\5\u00e4s\2\u0366C\3\2\2\2\u0367\u0368\b#\1\2\u0368")
        buf.write("\u03c0\5H%\2\u0369\u03c0\7\u00be\2\2\u036a\u036b\5\u00b8")
        buf.write("]\2\u036b\u036c\7\4\2\2\u036c\u036e\3\2\2\2\u036d\u036a")
        buf.write("\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f\3\2\2\2\u036f")
        buf.write("\u0370\5\u00ba^\2\u0370\u0371\7\4\2\2\u0371\u0373\3\2")
        buf.write("\2\2\u0372\u036d\3\2\2\2\u0372\u0373\3\2\2\2\u0373\u0374")
        buf.write("\3\2\2\2\u0374\u03c0\5\u00c0a\2\u0375\u0376\5\u00aaV\2")
        buf.write("\u0376\u0377\5D#\27\u0377\u03c0\3\2\2\2\u0378\u0379\5")
        buf.write("\u00b6\\\2\u0379\u0386\7\5\2\2\u037a\u037c\7A\2\2\u037b")
        buf.write("\u037a\3\2\2\2\u037b\u037c\3\2\2\2\u037c\u037d\3\2\2\2")
        buf.write("\u037d\u0382\5D#\2\u037e\u037f\7\7\2\2\u037f\u0381\5D")
        buf.write("#\2\u0380\u037e\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0380")
        buf.write("\3\2\2\2\u0382\u0383\3\2\2\2\u0383\u0387\3\2\2\2\u0384")
        buf.write("\u0382\3\2\2\2\u0385\u0387\7\t\2\2\u0386\u037b\3\2\2\2")
        buf.write("\u0386\u0385\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0388\3")
        buf.write("\2\2\2\u0388\u038a\7\6\2\2\u0389\u038b\5x=\2\u038a\u0389")
        buf.write("\3\2\2\2\u038a\u038b\3\2\2\2\u038b\u038d\3\2\2\2\u038c")
        buf.write("\u038e\5|?\2\u038d\u038c\3\2\2\2\u038d\u038e\3\2\2\2\u038e")
        buf.write("\u03c0\3\2\2\2\u038f\u0390\7\5\2\2\u0390\u0395\5D#\2\u0391")
        buf.write("\u0392\7\7\2\2\u0392\u0394\5D#\2\u0393\u0391\3\2\2\2\u0394")
        buf.write("\u0397\3\2\2\2\u0395\u0393\3\2\2\2\u0395\u0396\3\2\2\2")
        buf.write("\u0396\u0398\3\2\2\2\u0397\u0395\3\2\2\2\u0398\u0399\7")
        buf.write("\6\2\2\u0399\u03c0\3\2\2\2\u039a\u039b\7.\2\2\u039b\u039c")
        buf.write("\7\5\2\2\u039c\u039d\5D#\2\u039d\u039e\7$\2\2\u039e\u039f")
        buf.write("\5\"\22\2\u039f\u03a0\7\6\2\2\u03a0\u03c0\3\2\2\2\u03a1")
        buf.write("\u03a3\7i\2\2\u03a2\u03a1\3\2\2\2\u03a2\u03a3\3\2\2\2")
        buf.write("\u03a3\u03a4\3\2\2\2\u03a4\u03a6\7I\2\2\u03a5\u03a2\3")
        buf.write("\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8")
        buf.write("\7\5\2\2\u03a8\u03a9\5T+\2\u03a9\u03aa\7\6\2\2\u03aa\u03c0")
        buf.write("\3\2\2\2\u03ab\u03ad\7-\2\2\u03ac\u03ae\5D#\2\u03ad\u03ac")
        buf.write("\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b4\3\2\2\2\u03af")
        buf.write("\u03b0\7\u0095\2\2\u03b0\u03b1\5D#\2\u03b1\u03b2\7\u0089")
        buf.write("\2\2\u03b2\u03b3\5D#\2\u03b3\u03b5\3\2\2\2\u03b4\u03af")
        buf.write("\3\2\2\2\u03b5\u03b6\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6")
        buf.write("\u03b7\3\2\2\2\u03b7\u03ba\3\2\2\2\u03b8\u03b9\7D\2\2")
        buf.write("\u03b9\u03bb\5D#\2\u03ba\u03b8\3\2\2\2\u03ba\u03bb\3\2")
        buf.write("\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd\7E\2\2\u03bd\u03c0")
        buf.write("\3\2\2\2\u03be\u03c0\5F$\2\u03bf\u0367\3\2\2\2\u03bf\u0369")
        buf.write("\3\2\2\2\u03bf\u0372\3\2\2\2\u03bf\u0375\3\2\2\2\u03bf")
        buf.write("\u0378\3\2\2\2\u03bf\u038f\3\2\2\2\u03bf\u039a\3\2\2\2")
        buf.write("\u03bf\u03a5\3\2\2\2\u03bf\u03ab\3\2\2\2\u03bf\u03be\3")
        buf.write("\2\2\2\u03c0\u0438\3\2\2\2\u03c1\u03c2\f\26\2\2\u03c2")
        buf.write("\u03c3\7\16\2\2\u03c3\u0437\5D#\27\u03c4\u03c5\f\25\2")
        buf.write("\2\u03c5\u03c6\t\f\2\2\u03c6\u0437\5D#\26\u03c7\u03c8")
        buf.write("\f\24\2\2\u03c8\u03c9\t\6\2\2\u03c9\u0437\5D#\25\u03ca")
        buf.write("\u03cb\f\23\2\2\u03cb\u03cc\t\r\2\2\u03cc\u0437\5D#\24")
        buf.write("\u03cd\u03ce\f\22\2\2\u03ce\u03cf\t\16\2\2\u03cf\u0437")
        buf.write("\5D#\23\u03d0\u03dd\f\21\2\2\u03d1\u03de\7\b\2\2\u03d2")
        buf.write("\u03de\7\31\2\2\u03d3\u03de\7\32\2\2\u03d4\u03de\7\33")
        buf.write("\2\2\u03d5\u03de\7_\2\2\u03d6\u03d7\7_\2\2\u03d7\u03de")
        buf.write("\7i\2\2\u03d8\u03de\7V\2\2\u03d9\u03de\7d\2\2\u03da\u03de")
        buf.write("\7P\2\2\u03db\u03de\7f\2\2\u03dc\u03de\7y\2\2\u03dd\u03d1")
        buf.write("\3\2\2\2\u03dd\u03d2\3\2\2\2\u03dd\u03d3\3\2\2\2\u03dd")
        buf.write("\u03d4\3\2\2\2\u03dd\u03d5\3\2\2\2\u03dd\u03d6\3\2\2\2")
        buf.write("\u03dd\u03d8\3\2\2\2\u03dd\u03d9\3\2\2\2\u03dd\u03da\3")
        buf.write("\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03dc\3\2\2\2\u03de\u03df")
        buf.write("\3\2\2\2\u03df\u0437\5D#\22\u03e0\u03e1\f\20\2\2\u03e1")
        buf.write("\u03e2\7#\2\2\u03e2\u0437\5D#\21\u03e3\u03e4\f\17\2\2")
        buf.write("\u03e4\u03e5\7o\2\2\u03e5\u0437\5D#\20\u03e6\u03e7\f\b")
        buf.write("\2\2\u03e7\u03e9\7_\2\2\u03e8\u03ea\7i\2\2\u03e9\u03e8")
        buf.write("\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb\3\2\2\2\u03eb")
        buf.write("\u0437\5D#\t\u03ec\u03ee\f\7\2\2\u03ed\u03ef\7i\2\2\u03ee")
        buf.write("\u03ed\3\2\2\2\u03ee\u03ef\3\2\2\2\u03ef\u03f0\3\2\2\2")
        buf.write("\u03f0\u03f1\7*\2\2\u03f1\u03f2\5D#\2\u03f2\u03f3\7#\2")
        buf.write("\2\u03f3\u03f4\5D#\b\u03f4\u0437\3\2\2\2\u03f5\u03f6\f")
        buf.write("\13\2\2\u03f6\u03f7\7\60\2\2\u03f7\u0437\5\u00c2b\2\u03f8")
        buf.write("\u03fa\f\n\2\2\u03f9\u03fb\7i\2\2\u03fa\u03f9\3\2\2\2")
        buf.write("\u03fa\u03fb\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\t")
        buf.write("\17\2\2\u03fd\u0400\5D#\2\u03fe\u03ff\7F\2\2\u03ff\u0401")
        buf.write("\5D#\2\u0400\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0437")
        buf.write("\3\2\2\2\u0402\u0407\f\t\2\2\u0403\u0408\7`\2\2\u0404")
        buf.write("\u0408\7j\2\2\u0405\u0406\7i\2\2\u0406\u0408\7k\2\2\u0407")
        buf.write("\u0403\3\2\2\2\u0407\u0404\3\2\2\2\u0407\u0405\3\2\2\2")
        buf.write("\u0408\u0437\3\2\2\2\u0409\u040b\f\6\2\2\u040a\u040c\7")
        buf.write("i\2\2\u040b\u040a\3\2\2\2\u040b\u040c\3\2\2\2\u040c\u040d")
        buf.write("\3\2\2\2\u040d\u0434\7V\2\2\u040e\u0418\7\5\2\2\u040f")
        buf.write("\u0419\5T+\2\u0410\u0415\5D#\2\u0411\u0412\7\7\2\2\u0412")
        buf.write("\u0414\5D#\2\u0413\u0411\3\2\2\2\u0414\u0417\3\2\2\2\u0415")
        buf.write("\u0413\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0419\3\2\2\2")
        buf.write("\u0417\u0415\3\2\2\2\u0418\u040f\3\2\2\2\u0418\u0410\3")
        buf.write("\2\2\2\u0418\u0419\3\2\2\2\u0419\u041a\3\2\2\2\u041a\u0435")
        buf.write("\7\6\2\2\u041b\u041c\5\u00b8]\2\u041c\u041d\7\4\2\2\u041d")
        buf.write("\u041f\3\2\2\2\u041e\u041b\3\2\2\2\u041e\u041f\3\2\2\2")
        buf.write("\u041f\u0420\3\2\2\2\u0420\u0435\5\u00ba^\2\u0421\u0422")
        buf.write("\5\u00b8]\2\u0422\u0423\7\4\2\2\u0423\u0425\3\2\2\2\u0424")
        buf.write("\u0421\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\3\2\2\2")
        buf.write("\u0426\u0427\5\u00e2r\2\u0427\u0430\7\5\2\2\u0428\u042d")
        buf.write("\5D#\2\u0429\u042a\7\7\2\2\u042a\u042c\5D#\2\u042b\u0429")
        buf.write("\3\2\2\2\u042c\u042f\3\2\2\2\u042d\u042b\3\2\2\2\u042d")
        buf.write("\u042e\3\2\2\2\u042e\u0431\3\2\2\2\u042f\u042d\3\2\2\2")
        buf.write("\u0430\u0428\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0432\3")
        buf.write("\2\2\2\u0432\u0433\7\6\2\2\u0433\u0435\3\2\2\2\u0434\u040e")
        buf.write("\3\2\2\2\u0434\u041e\3\2\2\2\u0434\u0424\3\2\2\2\u0435")
        buf.write("\u0437\3\2\2\2\u0436\u03c1\3\2\2\2\u0436\u03c4\3\2\2\2")
        buf.write("\u0436\u03c7\3\2\2\2\u0436\u03ca\3\2\2\2\u0436\u03cd\3")
        buf.write("\2\2\2\u0436\u03d0\3\2\2\2\u0436\u03e0\3\2\2\2\u0436\u03e3")
        buf.write("\3\2\2\2\u0436\u03e6\3\2\2\2\u0436\u03ec\3\2\2\2\u0436")
        buf.write("\u03f5\3\2\2\2\u0436\u03f8\3\2\2\2\u0436\u0402\3\2\2\2")
        buf.write("\u0436\u0409\3\2\2\2\u0437\u043a\3\2\2\2\u0438\u0436\3")
        buf.write("\2\2\2\u0438\u0439\3\2\2\2\u0439E\3\2\2\2\u043a\u0438")
        buf.write("\3\2\2\2\u043b\u043c\7v\2\2\u043c\u0441\7\5\2\2\u043d")
        buf.write("\u0442\7T\2\2\u043e\u043f\t\20\2\2\u043f\u0440\7\7\2\2")
        buf.write("\u0440\u0442\5\u00acW\2\u0441\u043d\3\2\2\2\u0441\u043e")
        buf.write("\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444\7\6\2\2\u0444")
        buf.write("G\3\2\2\2\u0445\u0446\t\21\2\2\u0446I\3\2\2\2\u0447\u0449")
        buf.write("\5\64\33\2\u0448\u0447\3\2\2\2\u0448\u0449\3\2\2\2\u0449")
        buf.write("\u044f\3\2\2\2\u044a\u0450\7[\2\2\u044b\u0450\7}\2\2\u044c")
        buf.write("\u044d\7[\2\2\u044d\u044e\7o\2\2\u044e\u0450\t\n\2\2\u044f")
        buf.write("\u044a\3\2\2\2\u044f\u044b\3\2\2\2\u044f\u044c\3\2\2\2")
        buf.write("\u0450\u0451\3\2\2\2\u0451\u0455\7^\2\2\u0452\u0453\5")
        buf.write("\u00b8]\2\u0453\u0454\7\4\2\2\u0454\u0456\3\2\2\2\u0455")
        buf.write("\u0452\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457\3\2\2\2")
        buf.write("\u0457\u045a\5\u00ba^\2\u0458\u0459\7$\2\2\u0459\u045b")
        buf.write("\5\u00d2j\2\u045a\u0458\3\2\2\2\u045a\u045b\3\2\2\2\u045b")
        buf.write("\u0467\3\2\2\2\u045c\u045d\7\5\2\2\u045d\u0462\5\u00c0")
        buf.write("a\2\u045e\u045f\7\7\2\2\u045f\u0461\5\u00c0a\2\u0460\u045e")
        buf.write("\3\2\2\2\u0461\u0464\3\2\2\2\u0462\u0460\3\2\2\2\u0462")
        buf.write("\u0463\3\2\2\2\u0463\u0465\3\2\2\2\u0464\u0462\3\2\2\2")
        buf.write("\u0465\u0466\7\6\2\2\u0466\u0468\3\2\2\2\u0467\u045c\3")
        buf.write("\2\2\2\u0467\u0468\3\2\2\2\u0468\u0486\3\2\2\2\u0469\u046a")
        buf.write("\7\u0092\2\2\u046a\u046b\7\5\2\2\u046b\u0470\5D#\2\u046c")
        buf.write("\u046d\7\7\2\2\u046d\u046f\5D#\2\u046e\u046c\3\2\2\2\u046f")
        buf.write("\u0472\3\2\2\2\u0470\u046e\3\2\2\2\u0470\u0471\3\2\2\2")
        buf.write("\u0471\u0473\3\2\2\2\u0472\u0470\3\2\2\2\u0473\u0482\7")
        buf.write("\6\2\2\u0474\u0475\7\7\2\2\u0475\u0476\7\5\2\2\u0476\u047b")
        buf.write("\5D#\2\u0477\u0478\7\7\2\2\u0478\u047a\5D#\2\u0479\u0477")
        buf.write("\3\2\2\2\u047a\u047d\3\2\2\2\u047b\u0479\3\2\2\2\u047b")
        buf.write("\u047c\3\2\2\2\u047c\u047e\3\2\2\2\u047d\u047b\3\2\2\2")
        buf.write("\u047e\u047f\7\6\2\2\u047f\u0481\3\2\2\2\u0480\u0474\3")
        buf.write("\2\2\2\u0481\u0484\3\2\2\2\u0482\u0480\3\2\2\2\u0482\u0483")
        buf.write("\3\2\2\2\u0483\u0487\3\2\2\2\u0484\u0482\3\2\2\2\u0485")
        buf.write("\u0487\5T+\2\u0486\u0469\3\2\2\2\u0486\u0485\3\2\2\2\u0487")
        buf.write("\u0489\3\2\2\2\u0488\u048a\5L\'\2\u0489\u0488\3\2\2\2")
        buf.write("\u0489\u048a\3\2\2\2\u048a\u048e\3\2\2\2\u048b\u048c\7")
        buf.write(";\2\2\u048c\u048e\7\u0092\2\2\u048d\u0448\3\2\2\2\u048d")
        buf.write("\u048b\3\2\2\2\u048eK\3\2\2\2\u048f\u0490\7n\2\2\u0490")
        buf.write("\u049f\7\63\2\2\u0491\u0492\7\5\2\2\u0492\u0497\5\34\17")
        buf.write("\2\u0493\u0494\7\7\2\2\u0494\u0496\5\34\17\2\u0495\u0493")
        buf.write("\3\2\2\2\u0496\u0499\3\2\2\2\u0497\u0495\3\2\2\2\u0497")
        buf.write("\u0498\3\2\2\2\u0498\u049a\3\2\2\2\u0499\u0497\3\2\2\2")
        buf.write("\u049a\u049d\7\6\2\2\u049b\u049c\7\u0096\2\2\u049c\u049e")
        buf.write("\5D#\2\u049d\u049b\3\2\2\2\u049d\u049e\3\2\2\2\u049e\u04a0")
        buf.write("\3\2\2\2\u049f\u0491\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0")
        buf.write("\u04a1\3\2\2\2\u04a1\u04bc\7\u00b9\2\2\u04a2\u04bd\7\u00ba")
        buf.write("\2\2\u04a3\u04a4\7\u008f\2\2\u04a4\u04a7\7\u0085\2\2\u04a5")
        buf.write("\u04a8\5\u00c0a\2\u04a6\u04a8\5p9\2\u04a7\u04a5\3\2\2")
        buf.write("\2\u04a7\u04a6\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9\u04aa")
        buf.write("\7\31\2\2\u04aa\u04b5\5D#\2\u04ab\u04ae\7\7\2\2\u04ac")
        buf.write("\u04af\5\u00c0a\2\u04ad\u04af\5p9\2\u04ae\u04ac\3\2\2")
        buf.write("\2\u04ae\u04ad\3\2\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b1")
        buf.write("\7\31\2\2\u04b1\u04b2\5D#\2\u04b2\u04b4\3\2\2\2\u04b3")
        buf.write("\u04ab\3\2\2\2\u04b4\u04b7\3\2\2\2\u04b5\u04b3\3\2\2\2")
        buf.write("\u04b5\u04b6\3\2\2\2\u04b6\u04ba\3\2\2\2\u04b7\u04b5\3")
        buf.write("\2\2\2\u04b8\u04b9\7\u0096\2\2\u04b9\u04bb\5D#\2\u04ba")
        buf.write("\u04b8\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bd\3\2\2\2")
        buf.write("\u04bc\u04a2\3\2\2\2\u04bc\u04a3\3\2\2\2\u04bdM\3\2\2")
        buf.write("\2\u04be\u04c2\7s\2\2\u04bf\u04c0\5\u00b8]\2\u04c0\u04c1")
        buf.write("\7\4\2\2\u04c1\u04c3\3\2\2\2\u04c2\u04bf\3\2\2\2\u04c2")
        buf.write("\u04c3\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04cb\5\u00ce")
        buf.write("h\2\u04c5\u04c6\7\b\2\2\u04c6\u04cc\5P)\2\u04c7\u04c8")
        buf.write("\7\5\2\2\u04c8\u04c9\5P)\2\u04c9\u04ca\7\6\2\2\u04ca\u04cc")
        buf.write("\3\2\2\2\u04cb\u04c5\3\2\2\2\u04cb\u04c7\3\2\2\2\u04cb")
        buf.write("\u04cc\3\2\2\2\u04ccO\3\2\2\2\u04cd\u04d1\5&\24\2\u04ce")
        buf.write("\u04d1\5\u00b4[\2\u04cf\u04d1\7\u00bf\2\2\u04d0\u04cd")
        buf.write("\3\2\2\2\u04d0\u04ce\3\2\2\2\u04d0\u04cf\3\2\2\2\u04d1")
        buf.write("Q\3\2\2\2\u04d2\u04dd\7z\2\2\u04d3\u04de\5\u00c2b\2\u04d4")
        buf.write("\u04d5\5\u00b8]\2\u04d5\u04d6\7\4\2\2\u04d6\u04d8\3\2")
        buf.write("\2\2\u04d7\u04d4\3\2\2\2\u04d7\u04d8\3\2\2\2\u04d8\u04db")
        buf.write("\3\2\2\2\u04d9\u04dc\5\u00ba^\2\u04da\u04dc\5\u00c6d\2")
        buf.write("\u04db\u04d9\3\2\2\2\u04db\u04da\3\2\2\2\u04dc\u04de\3")
        buf.write("\2\2\2\u04dd\u04d3\3\2\2\2\u04dd\u04d7\3\2\2\2\u04dd\u04de")
        buf.write("\3\2\2\2\u04deS\3\2\2\2\u04df\u04e1\5\u0088E\2\u04e0\u04df")
        buf.write("\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2")
        buf.write("\u04e8\5X-\2\u04e3\u04e4\5l\67\2\u04e4\u04e5\5X-\2\u04e5")
        buf.write("\u04e7\3\2\2\2\u04e6\u04e3\3\2\2\2\u04e7\u04ea\3\2\2\2")
        buf.write("\u04e8\u04e6\3\2\2\2\u04e8\u04e9\3\2\2\2\u04e9\u04ec\3")
        buf.write("\2\2\2\u04ea\u04e8\3\2\2\2\u04eb\u04ed\5\u008aF\2\u04ec")
        buf.write("\u04eb\3\2\2\2\u04ec\u04ed\3\2\2\2\u04ed\u04ef\3\2\2\2")
        buf.write("\u04ee\u04f0\5\u008cG\2\u04ef\u04ee\3\2\2\2\u04ef\u04f0")
        buf.write("\3\2\2\2\u04f0U\3\2\2\2\u04f1\u04f9\5d\63\2\u04f2\u04f3")
        buf.write("\5h\65\2\u04f3\u04f5\5d\63\2\u04f4\u04f6\5j\66\2\u04f5")
        buf.write("\u04f4\3\2\2\2\u04f5\u04f6\3\2\2\2\u04f6\u04f8\3\2\2\2")
        buf.write("\u04f7\u04f2\3\2\2\2\u04f8\u04fb\3\2\2\2\u04f9\u04f7\3")
        buf.write("\2\2\2\u04f9\u04fa\3\2\2\2\u04faW\3\2\2\2\u04fb\u04f9")
        buf.write("\3\2\2\2\u04fc\u04fe\7\u0084\2\2\u04fd\u04ff\t\22\2\2")
        buf.write("\u04fe\u04fd\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500\3")
        buf.write("\2\2\2\u0500\u0505\5f\64\2\u0501\u0502\7\7\2\2\u0502\u0504")
        buf.write("\5f\64\2\u0503\u0501\3\2\2\2\u0504\u0507\3\2\2\2\u0505")
        buf.write("\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506\u0514\3\2\2\2")
        buf.write("\u0507\u0505\3\2\2\2\u0508\u0512\7N\2\2\u0509\u050e\5")
        buf.write("d\63\2\u050a\u050b\7\7\2\2\u050b\u050d\5d\63\2\u050c\u050a")
        buf.write("\3\2\2\2\u050d\u0510\3\2\2\2\u050e\u050c\3\2\2\2\u050e")
        buf.write("\u050f\3\2\2\2\u050f\u0513\3\2\2\2\u0510\u050e\3\2\2\2")
        buf.write("\u0511\u0513\5V,\2\u0512\u0509\3\2\2\2\u0512\u0511\3\2")
        buf.write("\2\2\u0513\u0515\3\2\2\2\u0514\u0508\3\2\2\2\u0514\u0515")
        buf.write("\3\2\2\2\u0515\u0518\3\2\2\2\u0516\u0517\7\u0096\2\2\u0517")
        buf.write("\u0519\5D#\2\u0518\u0516\3\2\2\2\u0518\u0519\3\2\2\2\u0519")
        buf.write("\u051b\3\2\2\2\u051a\u051c\5Z.\2\u051b\u051a\3\2\2\2\u051b")
        buf.write("\u051c\3\2\2\2\u051c\u052b\3\2\2\2\u051d\u051e\7\u00b0")
        buf.write("\2\2\u051e\u051f\5\u00d6l\2\u051f\u0520\7$\2\2\u0520\u0528")
        buf.write("\5z>\2\u0521\u0522\7\7\2\2\u0522\u0523\5\u00d6l\2\u0523")
        buf.write("\u0524\7$\2\2\u0524\u0525\5z>\2\u0525\u0527\3\2\2\2\u0526")
        buf.write("\u0521\3\2\2\2\u0527\u052a\3\2\2\2\u0528\u0526\3\2\2\2")
        buf.write("\u0528\u0529\3\2\2\2\u0529\u052c\3\2\2\2\u052a\u0528\3")
        buf.write("\2\2\2\u052b\u051d\3\2\2\2\u052b\u052c\3\2\2\2\u052c\u054a")
        buf.write("\3\2\2\2\u052d\u052e\7\u0092\2\2\u052e\u052f\7\5\2\2\u052f")
        buf.write("\u0534\5D#\2\u0530\u0531\7\7\2\2\u0531\u0533\5D#\2\u0532")
        buf.write("\u0530\3\2\2\2\u0533\u0536\3\2\2\2\u0534\u0532\3\2\2\2")
        buf.write("\u0534\u0535\3\2\2\2\u0535\u0537\3\2\2\2\u0536\u0534\3")
        buf.write("\2\2\2\u0537\u0546\7\6\2\2\u0538\u0539\7\7\2\2\u0539\u053a")
        buf.write("\7\5\2\2\u053a\u053f\5D#\2\u053b\u053c\7\7\2\2\u053c\u053e")
        buf.write("\5D#\2\u053d\u053b\3\2\2\2\u053e\u0541\3\2\2\2\u053f\u053d")
        buf.write("\3\2\2\2\u053f\u0540\3\2\2\2\u0540\u0542\3\2\2\2\u0541")
        buf.write("\u053f\3\2\2\2\u0542\u0543\7\6\2\2\u0543\u0545\3\2\2\2")
        buf.write("\u0544\u0538\3\2\2\2\u0545\u0548\3\2\2\2\u0546\u0544\3")
        buf.write("\2\2\2\u0546\u0547\3\2\2\2\u0547\u054a\3\2\2\2\u0548\u0546")
        buf.write("\3\2\2\2\u0549\u04fc\3\2\2\2\u0549\u052d\3\2\2\2\u054a")
        buf.write("Y\3\2\2\2\u054b\u054c\7Q\2\2\u054c\u054d\7+\2\2\u054d")
        buf.write("\u0552\5D#\2\u054e\u054f\7\7\2\2\u054f\u0551\5D#\2\u0550")
        buf.write("\u054e\3\2\2\2\u0551\u0554\3\2\2\2\u0552\u0550\3\2\2\2")
        buf.write("\u0552\u0553\3\2\2\2\u0553\u0556\3\2\2\2\u0554\u0552\3")
        buf.write("\2\2\2\u0555\u0557\5\\/\2\u0556\u0555\3\2\2\2\u0556\u0557")
        buf.write("\3\2\2\2\u0557[\3\2\2\2\u0558\u0559\7R\2\2\u0559\u055a")
        buf.write("\5D#\2\u055a]\3\2\2\2\u055b\u055c\5T+\2\u055c_\3\2\2\2")
        buf.write("\u055d\u055f\5\u0088E\2\u055e\u055d\3\2\2\2\u055e\u055f")
        buf.write("\3\2\2\2\u055f\u0560\3\2\2\2\u0560\u0562\5X-\2\u0561\u0563")
        buf.write("\5\u008aF\2\u0562\u0561\3\2\2\2\u0562\u0563\3\2\2\2\u0563")
        buf.write("\u0565\3\2\2\2\u0564\u0566\5\u008cG\2\u0565\u0564\3\2")
        buf.write("\2\2\u0565\u0566\3\2\2\2\u0566a\3\2\2\2\u0567\u0569\5")
        buf.write("\u0088E\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2\2\2\u0569")
        buf.write("\u056a\3\2\2\2\u056a\u0574\5X-\2\u056b\u056d\7\u008d\2")
        buf.write("\2\u056c\u056e\7 \2\2\u056d\u056c\3\2\2\2\u056d\u056e")
        buf.write("\3\2\2\2\u056e\u0572\3\2\2\2\u056f\u0572\7]\2\2\u0570")
        buf.write("\u0572\7G\2\2\u0571\u056b\3\2\2\2\u0571\u056f\3\2\2\2")
        buf.write("\u0571\u0570\3\2\2\2\u0572\u0573\3\2\2\2\u0573\u0575\5")
        buf.write("X-\2\u0574\u0571\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0574")
        buf.write("\3\2\2\2\u0576\u0577\3\2\2\2\u0577\u0579\3\2\2\2\u0578")
        buf.write("\u057a\5\u008aF\2\u0579\u0578\3\2\2\2\u0579\u057a\3\2")
        buf.write("\2\2\u057a\u057c\3\2\2\2\u057b\u057d\5\u008cG\2\u057c")
        buf.write("\u057b\3\2\2\2\u057c\u057d\3\2\2\2\u057dc\3\2\2\2\u057e")
        buf.write("\u057f\5\u00b8]\2\u057f\u0580\7\4\2\2\u0580\u0582\3\2")
        buf.write("\2\2\u0581\u057e\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583")
        buf.write("\3\2\2\2\u0583\u0588\5\u00ba^\2\u0584\u0586\7$\2\2\u0585")
        buf.write("\u0584\3\2\2\2\u0585\u0586\3\2\2\2\u0586\u0587\3\2\2\2")
        buf.write("\u0587\u0589\5\u00d2j\2\u0588\u0585\3\2\2\2\u0588\u0589")
        buf.write("\3\2\2\2\u0589\u058f\3\2\2\2\u058a\u058b\7X\2\2\u058b")
        buf.write("\u058c\7+\2\2\u058c\u0590\5\u00c6d\2\u058d\u058e\7i\2")
        buf.write("\2\u058e\u0590\7X\2\2\u058f\u058a\3\2\2\2\u058f\u058d")
        buf.write("\3\2\2\2\u058f\u0590\3\2\2\2\u0590\u05bf\3\2\2\2\u0591")
        buf.write("\u0592\5\u00b8]\2\u0592\u0593\7\4\2\2\u0593\u0595\3\2")
        buf.write("\2\2\u0594\u0591\3\2\2\2\u0594\u0595\3\2\2\2\u0595\u0596")
        buf.write("\3\2\2\2\u0596\u0597\5\u00e2r\2\u0597\u0598\7\5\2\2\u0598")
        buf.write("\u059d\5D#\2\u0599\u059a\7\7\2\2\u059a\u059c\5D#\2\u059b")
        buf.write("\u0599\3\2\2\2\u059c\u059f\3\2\2\2\u059d\u059b\3\2\2\2")
        buf.write("\u059d\u059e\3\2\2\2\u059e\u05a0\3\2\2\2\u059f\u059d\3")
        buf.write("\2\2\2\u05a0\u05a5\7\6\2\2\u05a1\u05a3\7$\2\2\u05a2\u05a1")
        buf.write("\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a4\3\2\2\2\u05a4")
        buf.write("\u05a6\5\u00d2j\2\u05a5\u05a2\3\2\2\2\u05a5\u05a6\3\2")
        buf.write("\2\2\u05a6\u05bf\3\2\2\2\u05a7\u05b1\7\5\2\2\u05a8\u05ad")
        buf.write("\5d\63\2\u05a9\u05aa\7\7\2\2\u05aa\u05ac\5d\63\2\u05ab")
        buf.write("\u05a9\3\2\2\2\u05ac\u05af\3\2\2\2\u05ad\u05ab\3\2\2\2")
        buf.write("\u05ad\u05ae\3\2\2\2\u05ae\u05b2\3\2\2\2\u05af\u05ad\3")
        buf.write("\2\2\2\u05b0\u05b2\5V,\2\u05b1\u05a8\3\2\2\2\u05b1\u05b0")
        buf.write("\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4\7\6\2\2\u05b4")
        buf.write("\u05bf\3\2\2\2\u05b5\u05b6\7\5\2\2\u05b6\u05b7\5T+\2\u05b7")
        buf.write("\u05bc\7\6\2\2\u05b8\u05ba\7$\2\2\u05b9\u05b8\3\2\2\2")
        buf.write("\u05b9\u05ba\3\2\2\2\u05ba\u05bb\3\2\2\2\u05bb\u05bd\5")
        buf.write("\u00d2j\2\u05bc\u05b9\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd")
        buf.write("\u05bf\3\2\2\2\u05be\u0581\3\2\2\2\u05be\u0594\3\2\2\2")
        buf.write("\u05be\u05a7\3\2\2\2\u05be\u05b5\3\2\2\2\u05bfe\3\2\2")
        buf.write("\2\u05c0\u05cd\7\t\2\2\u05c1\u05c2\5\u00ba^\2\u05c2\u05c3")
        buf.write("\7\4\2\2\u05c3\u05c4\7\t\2\2\u05c4\u05cd\3\2\2\2\u05c5")
        buf.write("\u05ca\5D#\2\u05c6\u05c8\7$\2\2\u05c7\u05c6\3\2\2\2\u05c7")
        buf.write("\u05c8\3\2\2\2\u05c8\u05c9\3\2\2\2\u05c9\u05cb\5\u00b0")
        buf.write("Y\2\u05ca\u05c7\3\2\2\2\u05ca\u05cb\3\2\2\2\u05cb\u05cd")
        buf.write("\3\2\2\2\u05cc\u05c0\3\2\2\2\u05cc\u05c1\3\2\2\2\u05cc")
        buf.write("\u05c5\3\2\2\2\u05cdg\3\2\2\2\u05ce\u05dc\7\7\2\2\u05cf")
        buf.write("\u05d1\7g\2\2\u05d0\u05cf\3\2\2\2\u05d0\u05d1\3\2\2\2")
        buf.write("\u05d1\u05d8\3\2\2\2\u05d2\u05d4\7c\2\2\u05d3\u05d5\7")
        buf.write("q\2\2\u05d4\u05d3\3\2\2\2\u05d4\u05d5\3\2\2\2\u05d5\u05d9")
        buf.write("\3\2\2\2\u05d6\u05d9\7Z\2\2\u05d7\u05d9\7\66\2\2\u05d8")
        buf.write("\u05d2\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d8\u05d7\3\2\2\2")
        buf.write("\u05d8\u05d9\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05dc\7")
        buf.write("a\2\2\u05db\u05ce\3\2\2\2\u05db\u05d0\3\2\2\2\u05dci\3")
        buf.write("\2\2\2\u05dd\u05de\7n\2\2\u05de\u05ec\5D#\2\u05df\u05e0")
        buf.write("\7\u0090\2\2\u05e0\u05e1\7\5\2\2\u05e1\u05e6\5\u00c0a")
        buf.write("\2\u05e2\u05e3\7\7\2\2\u05e3\u05e5\5\u00c0a\2\u05e4\u05e2")
        buf.write("\3\2\2\2\u05e5\u05e8\3\2\2\2\u05e6\u05e4\3\2\2\2\u05e6")
        buf.write("\u05e7\3\2\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05e6\3\2\2\2")
        buf.write("\u05e9\u05ea\7\6\2\2\u05ea\u05ec\3\2\2\2\u05eb\u05dd\3")
        buf.write("\2\2\2\u05eb\u05df\3\2\2\2\u05eck\3\2\2\2\u05ed\u05ef")
        buf.write("\7\u008d\2\2\u05ee\u05f0\7 \2\2\u05ef\u05ee\3\2\2\2\u05ef")
        buf.write("\u05f0\3\2\2\2\u05f0\u05f4\3\2\2\2\u05f1\u05f4\7]\2\2")
        buf.write("\u05f2\u05f4\7G\2\2\u05f3\u05ed\3\2\2\2\u05f3\u05f1\3")
        buf.write("\2\2\2\u05f3\u05f2\3\2\2\2\u05f4m\3\2\2\2\u05f5\u05f7")
        buf.write("\5\64\33\2\u05f6\u05f5\3\2\2\2\u05f6\u05f7\3\2\2\2\u05f7")
        buf.write("\u05f8\3\2\2\2\u05f8\u05fb\7\u008f\2\2\u05f9\u05fa\7o")
        buf.write("\2\2\u05fa\u05fc\t\n\2\2\u05fb\u05f9\3\2\2\2\u05fb\u05fc")
        buf.write("\3\2\2\2\u05fc\u05fd\3\2\2\2\u05fd\u05fe\5t;\2\u05fe\u0601")
        buf.write("\7\u0085\2\2\u05ff\u0602\5\u00c0a\2\u0600\u0602\5p9\2")
        buf.write("\u0601\u05ff\3\2\2\2\u0601\u0600\3\2\2\2\u0602\u0603\3")
        buf.write("\2\2\2\u0603\u0604\7\b\2\2\u0604\u060f\5D#\2\u0605\u0608")
        buf.write("\7\7\2\2\u0606\u0609\5\u00c0a\2\u0607\u0609\5p9\2\u0608")
        buf.write("\u0606\3\2\2\2\u0608\u0607\3\2\2\2\u0609\u060a\3\2\2\2")
        buf.write("\u060a\u060b\7\b\2\2\u060b\u060c\5D#\2\u060c\u060e\3\2")
        buf.write("\2\2\u060d\u0605\3\2\2\2\u060e\u0611\3\2\2\2\u060f\u060d")
        buf.write("\3\2\2\2\u060f\u0610\3\2\2\2\u0610\u0614\3\2\2\2\u0611")
        buf.write("\u060f\3\2\2\2\u0612\u0613\7\u0096\2\2\u0613\u0615\5D")
        buf.write("#\2\u0614\u0612\3\2\2\2\u0614\u0615\3\2\2\2\u0615o\3\2")
        buf.write("\2\2\u0616\u0617\7\5\2\2\u0617\u061c\5\u00c0a\2\u0618")
        buf.write("\u0619\7\7\2\2\u0619\u061b\5\u00c0a\2\u061a\u0618\3\2")
        buf.write("\2\2\u061b\u061e\3\2\2\2\u061c\u061a\3\2\2\2\u061c\u061d")
        buf.write("\3\2\2\2\u061d\u061f\3\2\2\2\u061e\u061c\3\2\2\2\u061f")
        buf.write("\u0620\7\6\2\2\u0620q\3\2\2\2\u0621\u0623\5\64\33\2\u0622")
        buf.write("\u0621\3\2\2\2\u0622\u0623\3\2\2\2\u0623\u0624\3\2\2\2")
        buf.write("\u0624\u0627\7\u008f\2\2\u0625\u0626\7o\2\2\u0626\u0628")
        buf.write("\t\n\2\2\u0627\u0625\3\2\2\2\u0627\u0628\3\2\2\2\u0628")
        buf.write("\u0629\3\2\2\2\u0629\u062a\5t;\2\u062a\u062d\7\u0085\2")
        buf.write("\2\u062b\u062e\5\u00c0a\2\u062c\u062e\5p9\2\u062d\u062b")
        buf.write("\3\2\2\2\u062d\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062f")
        buf.write("\u0630\7\b\2\2\u0630\u063b\5D#\2\u0631\u0634\7\7\2\2\u0632")
        buf.write("\u0635\5\u00c0a\2\u0633\u0635\5p9\2\u0634\u0632\3\2\2")
        buf.write("\2\u0634\u0633\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637")
        buf.write("\7\b\2\2\u0637\u0638\5D#\2\u0638\u063a\3\2\2\2\u0639\u0631")
        buf.write("\3\2\2\2\u063a\u063d\3\2\2\2\u063b\u0639\3\2\2\2\u063b")
        buf.write("\u063c\3\2\2\2\u063c\u0640\3\2\2\2\u063d\u063b\3\2\2\2")
        buf.write("\u063e\u063f\7\u0096\2\2\u063f\u0641\5D#\2\u0640\u063e")
        buf.write("\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0646\3\2\2\2\u0642")
        buf.write("\u0644\5\u008aF\2\u0643\u0642\3\2\2\2\u0643\u0644\3\2")
        buf.write("\2\2\u0644\u0645\3\2\2\2\u0645\u0647\5\u008cG\2\u0646")
        buf.write("\u0643\3\2\2\2\u0646\u0647\3\2\2\2\u0647s\3\2\2\2\u0648")
        buf.write("\u0649\5\u00b8]\2\u0649\u064a\7\4\2\2\u064a\u064c\3\2")
        buf.write("\2\2\u064b\u0648\3\2\2\2\u064b\u064c\3\2\2\2\u064c\u064d")
        buf.write("\3\2\2\2\u064d\u0650\5\u00ba^\2\u064e\u064f\7$\2\2\u064f")
        buf.write("\u0651\5\u00d8m\2\u0650\u064e\3\2\2\2\u0650\u0651\3\2")
        buf.write("\2\2\u0651\u0657\3\2\2\2\u0652\u0653\7X\2\2\u0653\u0654")
        buf.write("\7+\2\2\u0654\u0658\5\u00c6d\2\u0655\u0656\7i\2\2\u0656")
        buf.write("\u0658\7X\2\2\u0657\u0652\3\2\2\2\u0657\u0655\3\2\2\2")
        buf.write("\u0657\u0658\3\2\2\2\u0658u\3\2\2\2\u0659\u065b\7\u0091")
        buf.write("\2\2\u065a\u065c\5\u00b8]\2\u065b\u065a\3\2\2\2\u065b")
        buf.write("\u065c\3\2\2\2\u065c\u065f\3\2\2\2\u065d\u065e\7^\2\2")
        buf.write("\u065e\u0660\5\u00dan\2\u065f\u065d\3\2\2\2\u065f\u0660")
        buf.write("\3\2\2\2\u0660w\3\2\2\2\u0661\u0662\7\u00b4\2\2\u0662")
        buf.write("\u0663\7\5\2\2\u0663\u0664\7\u0096\2\2\u0664\u0665\5D")
        buf.write("#\2\u0665\u0666\7\6\2\2\u0666y\3\2\2\2\u0667\u0669\7\5")
        buf.write("\2\2\u0668\u066a\5\u00dco\2\u0669\u0668\3\2\2\2\u0669")
        buf.write("\u066a\3\2\2\2\u066a\u0675\3\2\2\2\u066b\u066c\7\u009b")
        buf.write("\2\2\u066c\u066d\7+\2\2\u066d\u0672\5D#\2\u066e\u066f")
        buf.write("\7\7\2\2\u066f\u0671\5D#\2\u0670\u066e\3\2\2\2\u0671\u0674")
        buf.write("\3\2\2\2\u0672\u0670\3\2\2\2\u0672\u0673\3\2\2\2\u0673")
        buf.write("\u0676\3\2\2\2\u0674\u0672\3\2\2\2\u0675\u066b\3\2\2\2")
        buf.write("\u0675\u0676\3\2\2\2\u0676\u0677\3\2\2\2\u0677\u0678\7")
        buf.write("p\2\2\u0678\u0679\7+\2\2\u0679\u067e\5\u008eH\2\u067a")
        buf.write("\u067b\7\7\2\2\u067b\u067d\5\u008eH\2\u067c\u067a\3\2")
        buf.write("\2\2\u067d\u0680\3\2\2\2\u067e\u067c\3\2\2\2\u067e\u067f")
        buf.write("\3\2\2\2\u067f\u0682\3\2\2\2\u0680\u067e\3\2\2\2\u0681")
        buf.write("\u0683\5~@\2\u0682\u0681\3\2\2\2\u0682\u0683\3\2\2\2\u0683")
        buf.write("\u0684\3\2\2\2\u0684\u0685\7\6\2\2\u0685{\3\2\2\2\u0686")
        buf.write("\u06a8\7\u009a\2\2\u0687\u06a9\5\u00d6l\2\u0688\u068a")
        buf.write("\7\5\2\2\u0689\u068b\5\u00dco\2\u068a\u0689\3\2\2\2\u068a")
        buf.write("\u068b\3\2\2\2\u068b\u0696\3\2\2\2\u068c\u068d\7\u009b")
        buf.write("\2\2\u068d\u068e\7+\2\2\u068e\u0693\5D#\2\u068f\u0690")
        buf.write("\7\7\2\2\u0690\u0692\5D#\2\u0691\u068f\3\2\2\2\u0692\u0695")
        buf.write("\3\2\2\2\u0693\u0691\3\2\2\2\u0693\u0694\3\2\2\2\u0694")
        buf.write("\u0697\3\2\2\2\u0695\u0693\3\2\2\2\u0696\u068c\3\2\2\2")
        buf.write("\u0696\u0697\3\2\2\2\u0697\u06a2\3\2\2\2\u0698\u0699\7")
        buf.write("p\2\2\u0699\u069a\7+\2\2\u069a\u069f\5\u008eH\2\u069b")
        buf.write("\u069c\7\7\2\2\u069c\u069e\5\u008eH\2\u069d\u069b\3\2")
        buf.write("\2\2\u069e\u06a1\3\2\2\2\u069f\u069d\3\2\2\2\u069f\u06a0")
        buf.write("\3\2\2\2\u06a0\u06a3\3\2\2\2\u06a1\u069f\3\2\2\2\u06a2")
        buf.write("\u0698\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06a5\3\2\2\2")
        buf.write("\u06a4\u06a6\5~@\2\u06a5\u06a4\3\2\2\2\u06a5\u06a6\3\2")
        buf.write("\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a9\7\6\2\2\u06a8\u0687")
        buf.write("\3\2\2\2\u06a8\u0688\3\2\2\2\u06a9}\3\2\2\2\u06aa\u06b2")
        buf.write("\5\u0080A\2\u06ab\u06ac\7\u00b6\2\2\u06ac\u06ad\7h\2\2")
        buf.write("\u06ad\u06b3\7\u00b8\2\2\u06ae\u06af\7\u009f\2\2\u06af")
        buf.write("\u06b3\7\u0081\2\2\u06b0\u06b3\7Q\2\2\u06b1\u06b3\7\u00b7")
        buf.write("\2\2\u06b2\u06ab\3\2\2\2\u06b2\u06ae\3\2\2\2\u06b2\u06b0")
        buf.write("\3\2\2\2\u06b2\u06b1\3\2\2\2\u06b2\u06b3\3\2\2\2\u06b3")
        buf.write("\177\3\2\2\2\u06b4\u06bb\t\23\2\2\u06b5\u06bc\5\u0096")
        buf.write("L\2\u06b6\u06b7\7*\2\2\u06b7\u06b8\5\u0092J\2\u06b8\u06b9")
        buf.write("\7#\2\2\u06b9\u06ba\5\u0094K\2\u06ba\u06bc\3\2\2\2\u06bb")
        buf.write("\u06b5\3\2\2\2\u06bb\u06b6\3\2\2\2\u06bc\u0081\3\2\2\2")
        buf.write("\u06bd\u06be\5\u00dep\2\u06be\u06c8\7\5\2\2\u06bf\u06c4")
        buf.write("\5D#\2\u06c0\u06c1\7\7\2\2\u06c1\u06c3\5D#\2\u06c2\u06c0")
        buf.write("\3\2\2\2\u06c3\u06c6\3\2\2\2\u06c4\u06c2\3\2\2\2\u06c4")
        buf.write("\u06c5\3\2\2\2\u06c5\u06c9\3\2\2\2\u06c6\u06c4\3\2\2\2")
        buf.write("\u06c7\u06c9\7\t\2\2\u06c8\u06bf\3\2\2\2\u06c8\u06c7\3")
        buf.write("\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cb\7\6\2\2\u06cb\u0083")
        buf.write("\3\2\2\2\u06cc\u06cd\5\u00e0q\2\u06cd\u06da\7\5\2\2\u06ce")
        buf.write("\u06d0\7A\2\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2")
        buf.write("\u06d0\u06d1\3\2\2\2\u06d1\u06d6\5D#\2\u06d2\u06d3\7\7")
        buf.write("\2\2\u06d3\u06d5\5D#\2\u06d4\u06d2\3\2\2\2\u06d5\u06d8")
        buf.write("\3\2\2\2\u06d6\u06d4\3\2\2\2\u06d6\u06d7\3\2\2\2\u06d7")
        buf.write("\u06db\3\2\2\2\u06d8\u06d6\3\2\2\2\u06d9\u06db\7\t\2\2")
        buf.write("\u06da\u06cf\3\2\2\2\u06da\u06d9\3\2\2\2\u06da\u06db\3")
        buf.write("\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u06de\7\6\2\2\u06dd\u06df")
        buf.write("\5x=\2\u06de\u06dd\3\2\2\2\u06de\u06df\3\2\2\2\u06df\u0085")
        buf.write("\3\2\2\2\u06e0\u06e1\5\u0098M\2\u06e1\u06eb\7\5\2\2\u06e2")
        buf.write("\u06e7\5D#\2\u06e3\u06e4\7\7\2\2\u06e4\u06e6\5D#\2\u06e5")
        buf.write("\u06e3\3\2\2\2\u06e6\u06e9\3\2\2\2\u06e7\u06e5\3\2\2\2")
        buf.write("\u06e7\u06e8\3\2\2\2\u06e8\u06ec\3\2\2\2\u06e9\u06e7\3")
        buf.write("\2\2\2\u06ea\u06ec\7\t\2\2\u06eb\u06e2\3\2\2\2\u06eb\u06ea")
        buf.write("\3\2\2\2\u06eb\u06ec\3\2\2\2\u06ec\u06ed\3\2\2\2\u06ed")
        buf.write("\u06ef\7\6\2\2\u06ee\u06f0\5x=\2\u06ef\u06ee\3\2\2\2\u06ef")
        buf.write("\u06f0\3\2\2\2\u06f0\u06f1\3\2\2\2\u06f1\u06f4\7\u009a")
        buf.write("\2\2\u06f2\u06f5\5z>\2\u06f3\u06f5\5\u00d6l\2\u06f4\u06f2")
        buf.write("\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5\u0087\3\2\2\2\u06f6")
        buf.write("\u06f8\7\u0097\2\2\u06f7\u06f9\7w\2\2\u06f8\u06f7\3\2")
        buf.write("\2\2\u06f8\u06f9\3\2\2\2\u06f9\u06fa\3\2\2\2\u06fa\u06ff")
        buf.write("\5:\36\2\u06fb\u06fc\7\7\2\2\u06fc\u06fe\5:\36\2\u06fd")
        buf.write("\u06fb\3\2\2\2\u06fe\u0701\3\2\2\2\u06ff\u06fd\3\2\2\2")
        buf.write("\u06ff\u0700\3\2\2\2\u0700\u0089\3\2\2\2\u0701\u06ff\3")
        buf.write("\2\2\2\u0702\u0703\7p\2\2\u0703\u0704\7+\2\2\u0704\u0709")
        buf.write("\5\u008eH\2\u0705\u0706\7\7\2\2\u0706\u0708\5\u008eH\2")
        buf.write("\u0707\u0705\3\2\2\2\u0708\u070b\3\2\2\2\u0709\u0707\3")
        buf.write("\2\2\2\u0709\u070a\3\2\2\2\u070a\u008b\3\2\2\2\u070b\u0709")
        buf.write("\3\2\2\2\u070c\u070d\7e\2\2\u070d\u0710\5D#\2\u070e\u070f")
        buf.write("\t\24\2\2\u070f\u0711\5D#\2\u0710\u070e\3\2\2\2\u0710")
        buf.write("\u0711\3\2\2\2\u0711\u008d\3\2\2\2\u0712\u0715\5D#\2\u0713")
        buf.write("\u0714\7\60\2\2\u0714\u0716\5\u00c2b\2\u0715\u0713\3\2")
        buf.write("\2\2\u0715\u0716\3\2\2\2\u0716\u0718\3\2\2\2\u0717\u0719")
        buf.write("\5\u0090I\2\u0718\u0717\3\2\2\2\u0718\u0719\3\2\2\2\u0719")
        buf.write("\u071c\3\2\2\2\u071a\u071b\7\u00b1\2\2\u071b\u071d\t\25")
        buf.write("\2\2\u071c\u071a\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u008f")
        buf.write("\3\2\2\2\u071e\u071f\t\26\2\2\u071f\u0091\3\2\2\2\u0720")
        buf.write("\u0721\5D#\2\u0721\u0722\7\u009d\2\2\u0722\u072b\3\2\2")
        buf.write("\2\u0723\u0724\5D#\2\u0724\u0725\7\u00a0\2\2\u0725\u072b")
        buf.write("\3\2\2\2\u0726\u0727\7\u009f\2\2\u0727\u072b\7\u0081\2")
        buf.write("\2\u0728\u0729\7\u009e\2\2\u0729\u072b\7\u009d\2\2\u072a")
        buf.write("\u0720\3\2\2\2\u072a\u0723\3\2\2\2\u072a\u0726\3\2\2\2")
        buf.write("\u072a\u0728\3\2\2\2\u072b\u0093\3\2\2\2\u072c\u072d\5")
        buf.write("D#\2\u072d\u072e\7\u009d\2\2\u072e\u0737\3\2\2\2\u072f")
        buf.write("\u0730\5D#\2\u0730\u0731\7\u00a0\2\2\u0731\u0737\3\2\2")
        buf.write("\2\u0732\u0733\7\u009f\2\2\u0733\u0737\7\u0081\2\2\u0734")
        buf.write("\u0735\7\u009e\2\2\u0735\u0737\7\u00a0\2\2\u0736\u072c")
        buf.write("\3\2\2\2\u0736\u072f\3\2\2\2\u0736\u0732\3\2\2\2\u0736")
        buf.write("\u0734\3\2\2\2\u0737\u0095\3\2\2\2\u0738\u0739\5D#\2\u0739")
        buf.write("\u073a\7\u009d\2\2\u073a\u0740\3\2\2\2\u073b\u073c\7\u009e")
        buf.write("\2\2\u073c\u0740\7\u009d\2\2\u073d\u073e\7\u009f\2\2\u073e")
        buf.write("\u0740\7\u0081\2\2\u073f\u0738\3\2\2\2\u073f\u073b\3\2")
        buf.write("\2\2\u073f\u073d\3\2\2\2\u0740\u0097\3\2\2\2\u0741\u0742")
        buf.write("\t\27\2\2\u0742\u0743\7\5\2\2\u0743\u0744\5D#\2\u0744")
        buf.write("\u0745\7\6\2\2\u0745\u0746\7\u009a\2\2\u0746\u0748\7\5")
        buf.write("\2\2\u0747\u0749\5\u009eP\2\u0748\u0747\3\2\2\2\u0748")
        buf.write("\u0749\3\2\2\2\u0749\u074a\3\2\2\2\u074a\u074c\5\u00a2")
        buf.write("R\2\u074b\u074d\5\u0080A\2\u074c\u074b\3\2\2\2\u074c\u074d")
        buf.write("\3\2\2\2\u074d\u074e\3\2\2\2\u074e\u074f\7\6\2\2\u074f")
        buf.write("\u0797\3\2\2\2\u0750\u0751\t\30\2\2\u0751\u0752\7\5\2")
        buf.write("\2\u0752\u0753\7\6\2\2\u0753\u0754\7\u009a\2\2\u0754\u0756")
        buf.write("\7\5\2\2\u0755\u0757\5\u009eP\2\u0756\u0755\3\2\2\2\u0756")
        buf.write("\u0757\3\2\2\2\u0757\u0759\3\2\2\2\u0758\u075a\5\u00a0")
        buf.write("Q\2\u0759\u0758\3\2\2\2\u0759\u075a\3\2\2\2\u075a\u075b")
        buf.write("\3\2\2\2\u075b\u0797\7\6\2\2\u075c\u075d\t\31\2\2\u075d")
        buf.write("\u075e\7\5\2\2\u075e\u075f\7\6\2\2\u075f\u0760\7\u009a")
        buf.write("\2\2\u0760\u0762\7\5\2\2\u0761\u0763\5\u009eP\2\u0762")
        buf.write("\u0761\3\2\2\2\u0762\u0763\3\2\2\2\u0763\u0764\3\2\2\2")
        buf.write("\u0764\u0765\5\u00a2R\2\u0765\u0766\7\6\2\2\u0766\u0797")
        buf.write("\3\2\2\2\u0767\u0768\t\32\2\2\u0768\u0769\7\5\2\2\u0769")
        buf.write("\u076b\5D#\2\u076a\u076c\5\u009aN\2\u076b\u076a\3\2\2")
        buf.write("\2\u076b\u076c\3\2\2\2\u076c\u076e\3\2\2\2\u076d\u076f")
        buf.write("\5\u009cO\2\u076e\u076d\3\2\2\2\u076e\u076f\3\2\2\2\u076f")
        buf.write("\u0770\3\2\2\2\u0770\u0771\7\6\2\2\u0771\u0772\7\u009a")
        buf.write("\2\2\u0772\u0774\7\5\2\2\u0773\u0775\5\u009eP\2\u0774")
        buf.write("\u0773\3\2\2\2\u0774\u0775\3\2\2\2\u0775\u0776\3\2\2\2")
        buf.write("\u0776\u0777\5\u00a2R\2\u0777\u0778\7\6\2\2\u0778\u0797")
        buf.write("\3\2\2\2\u0779\u077a\7\u00a6\2\2\u077a\u077b\7\5\2\2\u077b")
        buf.write("\u077c\5D#\2\u077c\u077d\7\7\2\2\u077d\u077e\5&\24\2\u077e")
        buf.write("\u077f\7\6\2\2\u077f\u0780\7\u009a\2\2\u0780\u0782\7\5")
        buf.write("\2\2\u0781\u0783\5\u009eP\2\u0782\u0781\3\2\2\2\u0782")
        buf.write("\u0783\3\2\2\2\u0783\u0784\3\2\2\2\u0784\u0786\5\u00a2")
        buf.write("R\2\u0785\u0787\5\u0080A\2\u0786\u0785\3\2\2\2\u0786\u0787")
        buf.write("\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u0789\7\6\2\2\u0789")
        buf.write("\u0797\3\2\2\2\u078a\u078b\7\u00a7\2\2\u078b\u078c\7\5")
        buf.write("\2\2\u078c\u078d\5D#\2\u078d\u078e\7\6\2\2\u078e\u078f")
        buf.write("\7\u009a\2\2\u078f\u0791\7\5\2\2\u0790\u0792\5\u009eP")
        buf.write("\2\u0791\u0790\3\2\2\2\u0791\u0792\3\2\2\2\u0792\u0793")
        buf.write("\3\2\2\2\u0793\u0794\5\u00a2R\2\u0794\u0795\7\6\2\2\u0795")
        buf.write("\u0797\3\2\2\2\u0796\u0741\3\2\2\2\u0796\u0750\3\2\2\2")
        buf.write("\u0796\u075c\3\2\2\2\u0796\u0767\3\2\2\2\u0796\u0779\3")
        buf.write("\2\2\2\u0796\u078a\3\2\2\2\u0797\u0099\3\2\2\2\u0798\u0799")
        buf.write("\7\7\2\2\u0799\u079a\5&\24\2\u079a\u009b\3\2\2\2\u079b")
        buf.write("\u079c\7\7\2\2\u079c\u079d\5&\24\2\u079d\u009d\3\2\2\2")
        buf.write("\u079e\u079f\7\u009b\2\2\u079f\u07a1\7+\2\2\u07a0\u07a2")
        buf.write("\5D#\2\u07a1\u07a0\3\2\2\2\u07a2\u07a3\3\2\2\2\u07a3\u07a1")
        buf.write("\3\2\2\2\u07a3\u07a4\3\2\2\2\u07a4\u009f\3\2\2\2\u07a5")
        buf.write("\u07a6\7p\2\2\u07a6\u07a8\7+\2\2\u07a7\u07a9\5D#\2\u07a8")
        buf.write("\u07a7\3\2\2\2\u07a9\u07aa\3\2\2\2\u07aa\u07a8\3\2\2\2")
        buf.write("\u07aa\u07ab\3\2\2\2\u07ab\u00a1\3\2\2\2\u07ac\u07ad\7")
        buf.write("p\2\2\u07ad\u07ae\7+\2\2\u07ae\u07af\5\u00a2R\2\u07af")
        buf.write("\u00a3\3\2\2\2\u07b0\u07b2\5D#\2\u07b1\u07b3\5\u0090I")
        buf.write("\2\u07b2\u07b1\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07bb")
        buf.write("\3\2\2\2\u07b4\u07b5\7\7\2\2\u07b5\u07b7\5D#\2\u07b6\u07b8")
        buf.write("\5\u0090I\2\u07b7\u07b6\3\2\2\2\u07b7\u07b8\3\2\2\2\u07b8")
        buf.write("\u07ba\3\2\2\2\u07b9\u07b4\3\2\2\2\u07ba\u07bd\3\2\2\2")
        buf.write("\u07bb\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc\u00a5\3")
        buf.write("\2\2\2\u07bd\u07bb\3\2\2\2\u07be\u07bf\5T+\2\u07bf\u00a7")
        buf.write("\3\2\2\2\u07c0\u07c1\5T+\2\u07c1\u00a9\3\2\2\2\u07c2\u07c3")
        buf.write("\t\33\2\2\u07c3\u00ab\3\2\2\2\u07c4\u07c5\7\u00bf\2\2")
        buf.write("\u07c5\u00ad\3\2\2\2\u07c6\u07c9\5D#\2\u07c7\u07c9\5 ")
        buf.write("\21\2\u07c8\u07c6\3\2\2\2\u07c8\u07c7\3\2\2\2\u07c9\u00af")
        buf.write("\3\2\2\2\u07ca\u07cb\t\34\2\2\u07cb\u00b1\3\2\2\2\u07cc")
        buf.write("\u07cd\t\35\2\2\u07cd\u00b3\3\2\2\2\u07ce\u07cf\5\u00e4")
        buf.write("s\2\u07cf\u00b5\3\2\2\2\u07d0\u07d1\5\u00e4s\2\u07d1\u00b7")
        buf.write("\3\2\2\2\u07d2\u07d3\5\u00e4s\2\u07d3\u00b9\3\2\2\2\u07d4")
        buf.write("\u07d5\5\u00e4s\2\u07d5\u00bb\3\2\2\2\u07d6\u07d7\5\u00e4")
        buf.write("s\2\u07d7\u00bd\3\2\2\2\u07d8\u07d9\5\u00e4s\2\u07d9\u00bf")
        buf.write("\3\2\2\2\u07da\u07db\5\u00e4s\2\u07db\u00c1\3\2\2\2\u07dc")
        buf.write("\u07dd\5\u00e4s\2\u07dd\u00c3\3\2\2\2\u07de\u07df\5\u00e4")
        buf.write("s\2\u07df\u00c5\3\2\2\2\u07e0\u07e1\5\u00e4s\2\u07e1\u00c7")
        buf.write("\3\2\2\2\u07e2\u07e3\5\u00e4s\2\u07e3\u00c9\3\2\2\2\u07e4")
        buf.write("\u07e5\5\u00e4s\2\u07e5\u00cb\3\2\2\2\u07e6\u07e7\5\u00e4")
        buf.write("s\2\u07e7\u00cd\3\2\2\2\u07e8\u07e9\5\u00e4s\2\u07e9\u00cf")
        buf.write("\3\2\2\2\u07ea\u07eb\5\u00e4s\2\u07eb\u00d1\3\2\2\2\u07ec")
        buf.write("\u07ed\5\u00e4s\2\u07ed\u00d3\3\2\2\2\u07ee\u07ef\5\u00e4")
        buf.write("s\2\u07ef\u00d5\3\2\2\2\u07f0\u07f1\5\u00e4s\2\u07f1\u00d7")
        buf.write("\3\2\2\2\u07f2\u07f3\5\u00e4s\2\u07f3\u00d9\3\2\2\2\u07f4")
        buf.write("\u07f5\5\u00e4s\2\u07f5\u00db\3\2\2\2\u07f6\u07f7\5\u00e4")
        buf.write("s\2\u07f7\u00dd\3\2\2\2\u07f8\u07f9\5\u00e4s\2\u07f9\u00df")
        buf.write("\3\2\2\2\u07fa\u07fb\5\u00e4s\2\u07fb\u00e1\3\2\2\2\u07fc")
        buf.write("\u07fd\5\u00e4s\2\u07fd\u00e3\3\2\2\2\u07fe\u0807\7\u00bb")
        buf.write("\2\2\u07ff\u0807\5\u00b2Z\2\u0800\u0807\7\u00bf\2\2\u0801")
        buf.write("\u0807\7\u00bd\2\2\u0802\u0803\7\5\2\2\u0803\u0804\5\u00e4")
        buf.write("s\2\u0804\u0805\7\6\2\2\u0805\u0807\3\2\2\2\u0806\u07fe")
        buf.write("\3\2\2\2\u0806\u07ff\3\2\2\2\u0806\u0800\3\2\2\2\u0806")
        buf.write("\u0801\3\2\2\2\u0806\u0802\3\2\2\2\u0807\u00e5\3\2\2\2")
        buf.write("\u0123\u00e8\u00ea\u00f5\u00fc\u0101\u0107\u010d\u010f")
        buf.write("\u0129\u0130\u0137\u013d\u0141\u0144\u014b\u014e\u0152")
        buf.write("\u015a\u015e\u0160\u0164\u0168\u016c\u016f\u0176\u017c")
        buf.write("\u0182\u0187\u0192\u0198\u019c\u01a0\u01a3\u01a7\u01ad")
        buf.write("\u01b2\u01bb\u01c2\u01c8\u01cc\u01d0\u01d5\u01db\u01e7")
        buf.write("\u01eb\u01f0\u01f3\u01f6\u01fb\u01fe\u020c\u0213\u021a")
        buf.write("\u021c\u021f\u0225\u022a\u0232\u0237\u0246\u024c\u0256")
        buf.write("\u025b\u0265\u0269\u026b\u026f\u0274\u0276\u027e\u0284")
        buf.write("\u0289\u0290\u029b\u029e\u02a0\u02a7\u02ab\u02b2\u02b8")
        buf.write("\u02be\u02c4\u02c9\u02d2\u02d7\u02e2\u02e7\u02f2\u02f7")
        buf.write("\u02fb\u030b\u0315\u031a\u0322\u032e\u0333\u033b\u0342")
        buf.write("\u0345\u034c\u034f\u0352\u0356\u035e\u0363\u036d\u0372")
        buf.write("\u037b\u0382\u0386\u038a\u038d\u0395\u03a2\u03a5\u03ad")
        buf.write("\u03b6\u03ba\u03bf\u03dd\u03e9\u03ee\u03fa\u0400\u0407")
        buf.write("\u040b\u0415\u0418\u041e\u0424\u042d\u0430\u0434\u0436")
        buf.write("\u0438\u0441\u0448\u044f\u0455\u045a\u0462\u0467\u0470")
        buf.write("\u047b\u0482\u0486\u0489\u048d\u0497\u049d\u049f\u04a7")
        buf.write("\u04ae\u04b5\u04ba\u04bc\u04c2\u04cb\u04d0\u04d7\u04db")
        buf.write("\u04dd\u04e0\u04e8\u04ec\u04ef\u04f5\u04f9\u04fe\u0505")
        buf.write("\u050e\u0512\u0514\u0518\u051b\u0528\u052b\u0534\u053f")
        buf.write("\u0546\u0549\u0552\u0556\u055e\u0562\u0565\u0568\u056d")
        buf.write("\u0571\u0576\u0579\u057c\u0581\u0585\u0588\u058f\u0594")
        buf.write("\u059d\u05a2\u05a5\u05ad\u05b1\u05b9\u05bc\u05be\u05c7")
        buf.write("\u05ca\u05cc\u05d0\u05d4\u05d8\u05db\u05e6\u05eb\u05ef")
        buf.write("\u05f3\u05f6\u05fb\u0601\u0608\u060f\u0614\u061c\u0622")
        buf.write("\u0627\u062d\u0634\u063b\u0640\u0643\u0646\u064b\u0650")
        buf.write("\u0657\u065b\u065f\u0669\u0672\u0675\u067e\u0682\u068a")
        buf.write("\u0693\u0696\u069f\u06a2\u06a5\u06a8\u06b2\u06bb\u06c4")
        buf.write("\u06c8\u06cf\u06d6\u06da\u06de\u06e7\u06eb\u06ef\u06f4")
        buf.write("\u06f8\u06ff\u0709\u0710\u0715\u0718\u071c\u072a\u0736")
        buf.write("\u073f\u0748\u074c\u0756\u0759\u0762\u076b\u076e\u0774")
        buf.write("\u0782\u0786\u0791\u0796\u07a3\u07aa\u07b2\u07b7\u07bb")
        buf.write("\u07c8\u0806")
        return buf.getvalue()


class SQLiteParser ( Parser ):

    grammarFileName = "SQLiteParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "';'", "'.'", "'('", "')'", "','", "'='", 
                     "'*'", "'#'", "'+'", "'-'", "'~'", "'||'", "'/'", "'%'", 
                     "'<<'", "'>>'", "'&'", "'|'", "'<'", "'<='", "'>'", 
                     "'>='", "'=='", "'!='", "'<>'" ]

    symbolicNames = [ "<INVALID>", "SCOL", "DOT", "OPEN_PAR", "CLOSE_PAR", 
                      "COMMA", "ASSIGN", "STAR", "HASH", "PLUS", "MINUS", 
                      "TILDE", "PIPE2", "DIV", "MOD", "LT2", "GT2", "AMP", 
                      "PIPE", "LT", "LT_EQ", "GT", "GT_EQ", "EQ", "NOT_EQ1", 
                      "NOT_EQ2", "ABORT", "ACTION", "ADD", "AFTER", "ALL", 
                      "ALTER", "ANALYZE", "AND", "AS", "ASC", "ATTACH", 
                      "AUTOINCREMENT", "BEFORE", "BEGIN", "BETWEEN", "BY", 
                      "CASCADE", "CASE", "CAST", "CHECK", "COLLATE", "COLUMN", 
                      "COMMIT", "CONFLICT", "CONSTRAINT", "CREATE", "CROSS", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "DATABASE", "DEFAULT", "DEFERRABLE", "DEFERRED", "DELETE", 
                      "DESC", "DETACH", "DISTINCT", "DROP", "EACH", "ELSE", 
                      "END", "ESCAPE", "EXCEPT", "EXCLUSIVE", "EXISTS", 
                      "EXPLAIN", "FAIL", "FOR", "FOREIGN", "FROM", "FULL", 
                      "GLOB", "GROUP", "HAVING", "IF", "IGNORE", "IMMEDIATE", 
                      "IN", "INDEX", "INDEXED", "INITIALLY", "INNER", "INSERT", 
                      "INSTEAD", "INTERSECT", "INTO", "IS", "ISNULL", "JOIN", 
                      "KEY", "LEFT", "LIKE", "LIMIT", "MATCH", "NATURAL", 
                      "NO", "NOT", "NOTNULL", "NULL_", "OF", "OFFSET", "ON", 
                      "OR", "ORDER", "OUTER", "PLAN", "PRAGMA", "PRIMARY", 
                      "QUERY", "RAISE", "RECURSIVE", "REFERENCES", "REGEXP", 
                      "REINDEX", "RELEASE", "RENAME", "REPLACE", "RESTRICT", 
                      "RIGHT", "ROLLBACK", "ROW", "ROWS", "SAVEPOINT", "SELECT", 
                      "SET", "TABLE", "TEMP", "TEMPORARY", "THEN", "TO", 
                      "TRANSACTION", "TRIGGER", "UNION", "UNIQUE", "UPDATE", 
                      "USING", "VACUUM", "VALUES", "VIEW", "VIRTUAL", "WHEN", 
                      "WHERE", "WITH", "WITHOUT", "FIRST_VALUE", "OVER", 
                      "PARTITION", "RANGE", "PRECEDING", "UNBOUNDED", "CURRENT", 
                      "FOLLOWING", "CUME_DIST", "DENSE_RANK", "LAG", "LAST_VALUE", 
                      "LEAD", "NTH_VALUE", "NTILE", "PERCENT_RANK", "RANK", 
                      "ROW_NUMBER", "GENERATED", "ALWAYS", "STORED", "TRUE_", 
                      "FALSE_", "WINDOW", "NULLS", "FIRST", "LAST", "FILTER", 
                      "GROUPS", "EXCLUDE", "TIES", "OTHERS", "DO", "NOTHING", 
                      "IDENTIFIER", "NUMERIC_LITERAL", "REF_FIELD", "BIND_PARAMETER", 
                      "STRING_LITERAL", "BLOB_LITERAL", "SINGLE_LINE_COMMENT", 
                      "MULTILINE_COMMENT", "SPACES", "UNEXPECTED_CHAR" ]

    RULE_parse = 0
    RULE_error = 1
    RULE_sql_stmt_list = 2
    RULE_sql_stmt = 3
    RULE_alter_table_stmt = 4
    RULE_analyze_stmt = 5
    RULE_attach_stmt = 6
    RULE_begin_stmt = 7
    RULE_commit_stmt = 8
    RULE_rollback_stmt = 9
    RULE_savepoint_stmt = 10
    RULE_release_stmt = 11
    RULE_create_index_stmt = 12
    RULE_indexed_column = 13
    RULE_create_table_stmt = 14
    RULE_column_def = 15
    RULE_type_name = 16
    RULE_column_constraint = 17
    RULE_signed_number = 18
    RULE_table_constraint = 19
    RULE_foreign_key_clause = 20
    RULE_conflict_clause = 21
    RULE_create_trigger_stmt = 22
    RULE_create_view_stmt = 23
    RULE_create_virtual_table_stmt = 24
    RULE_with_clause = 25
    RULE_cte_table_name = 26
    RULE_recursive_cte = 27
    RULE_common_table_expression = 28
    RULE_delete_stmt = 29
    RULE_delete_stmt_limited = 30
    RULE_detach_stmt = 31
    RULE_drop_stmt = 32
    RULE_expr = 33
    RULE_raise_function = 34
    RULE_literal_value = 35
    RULE_insert_stmt = 36
    RULE_upsert_clause = 37
    RULE_pragma_stmt = 38
    RULE_pragma_value = 39
    RULE_reindex_stmt = 40
    RULE_select_stmt = 41
    RULE_join_clause = 42
    RULE_select_core = 43
    RULE_group_by_clause = 44
    RULE_having_clause = 45
    RULE_factored_select_stmt = 46
    RULE_simple_select_stmt = 47
    RULE_compound_select_stmt = 48
    RULE_table_or_subquery = 49
    RULE_result_column = 50
    RULE_join_operator = 51
    RULE_join_constraint = 52
    RULE_compound_operator = 53
    RULE_update_stmt = 54
    RULE_column_name_list = 55
    RULE_update_stmt_limited = 56
    RULE_qualified_table_name = 57
    RULE_vacuum_stmt = 58
    RULE_filter_clause = 59
    RULE_window_defn = 60
    RULE_over_clause = 61
    RULE_frame_spec = 62
    RULE_frame_clause = 63
    RULE_simple_function_invocation = 64
    RULE_aggregate_function_invocation = 65
    RULE_window_function_invocation = 66
    RULE_common_table_stmt = 67
    RULE_order_by_stmt = 68
    RULE_limit_stmt = 69
    RULE_ordering_term = 70
    RULE_asc_desc = 71
    RULE_frame_left = 72
    RULE_frame_right = 73
    RULE_frame_single = 74
    RULE_window_function = 75
    RULE_offset = 76
    RULE_default_value = 77
    RULE_partition_by = 78
    RULE_order_by_expr = 79
    RULE_order_by_expr_asc_desc = 80
    RULE_expr_asc_desc = 81
    RULE_initial_select = 82
    RULE_recursive_select = 83
    RULE_unary_operator = 84
    RULE_error_message = 85
    RULE_module_argument = 86
    RULE_column_alias = 87
    RULE_keyword = 88
    RULE_name = 89
    RULE_function_name = 90
    RULE_schema_name = 91
    RULE_table_name = 92
    RULE_table_or_index_name = 93
    RULE_new_table_name = 94
    RULE_column_name = 95
    RULE_collation_name = 96
    RULE_foreign_table = 97
    RULE_index_name = 98
    RULE_trigger_name = 99
    RULE_view_name = 100
    RULE_module_name = 101
    RULE_pragma_name = 102
    RULE_savepoint_name = 103
    RULE_table_alias = 104
    RULE_transaction_name = 105
    RULE_window_name = 106
    RULE_alias = 107
    RULE_filename = 108
    RULE_base_window_name = 109
    RULE_simple_func = 110
    RULE_aggregate_func = 111
    RULE_table_function_name = 112
    RULE_any_name = 113

    ruleNames =  [ "parse", "error", "sql_stmt_list", "sql_stmt", "alter_table_stmt", 
                   "analyze_stmt", "attach_stmt", "begin_stmt", "commit_stmt", 
                   "rollback_stmt", "savepoint_stmt", "release_stmt", "create_index_stmt", 
                   "indexed_column", "create_table_stmt", "column_def", 
                   "type_name", "column_constraint", "signed_number", "table_constraint", 
                   "foreign_key_clause", "conflict_clause", "create_trigger_stmt", 
                   "create_view_stmt", "create_virtual_table_stmt", "with_clause", 
                   "cte_table_name", "recursive_cte", "common_table_expression", 
                   "delete_stmt", "delete_stmt_limited", "detach_stmt", 
                   "drop_stmt", "expr", "raise_function", "literal_value", 
                   "insert_stmt", "upsert_clause", "pragma_stmt", "pragma_value", 
                   "reindex_stmt", "select_stmt", "join_clause", "select_core", 
                   "group_by_clause", "having_clause", "factored_select_stmt", 
                   "simple_select_stmt", "compound_select_stmt", "table_or_subquery", 
                   "result_column", "join_operator", "join_constraint", 
                   "compound_operator", "update_stmt", "column_name_list", 
                   "update_stmt_limited", "qualified_table_name", "vacuum_stmt", 
                   "filter_clause", "window_defn", "over_clause", "frame_spec", 
                   "frame_clause", "simple_function_invocation", "aggregate_function_invocation", 
                   "window_function_invocation", "common_table_stmt", "order_by_stmt", 
                   "limit_stmt", "ordering_term", "asc_desc", "frame_left", 
                   "frame_right", "frame_single", "window_function", "offset", 
                   "default_value", "partition_by", "order_by_expr", "order_by_expr_asc_desc", 
                   "expr_asc_desc", "initial_select", "recursive_select", 
                   "unary_operator", "error_message", "module_argument", 
                   "column_alias", "keyword", "name", "function_name", "schema_name", 
                   "table_name", "table_or_index_name", "new_table_name", 
                   "column_name", "collation_name", "foreign_table", "index_name", 
                   "trigger_name", "view_name", "module_name", "pragma_name", 
                   "savepoint_name", "table_alias", "transaction_name", 
                   "window_name", "alias", "filename", "base_window_name", 
                   "simple_func", "aggregate_func", "table_function_name", 
                   "any_name" ]

    EOF = Token.EOF
    SCOL=1
    DOT=2
    OPEN_PAR=3
    CLOSE_PAR=4
    COMMA=5
    ASSIGN=6
    STAR=7
    HASH=8
    PLUS=9
    MINUS=10
    TILDE=11
    PIPE2=12
    DIV=13
    MOD=14
    LT2=15
    GT2=16
    AMP=17
    PIPE=18
    LT=19
    LT_EQ=20
    GT=21
    GT_EQ=22
    EQ=23
    NOT_EQ1=24
    NOT_EQ2=25
    ABORT=26
    ACTION=27
    ADD=28
    AFTER=29
    ALL=30
    ALTER=31
    ANALYZE=32
    AND=33
    AS=34
    ASC=35
    ATTACH=36
    AUTOINCREMENT=37
    BEFORE=38
    BEGIN=39
    BETWEEN=40
    BY=41
    CASCADE=42
    CASE=43
    CAST=44
    CHECK=45
    COLLATE=46
    COLUMN=47
    COMMIT=48
    CONFLICT=49
    CONSTRAINT=50
    CREATE=51
    CROSS=52
    CURRENT_DATE=53
    CURRENT_TIME=54
    CURRENT_TIMESTAMP=55
    DATABASE=56
    DEFAULT=57
    DEFERRABLE=58
    DEFERRED=59
    DELETE=60
    DESC=61
    DETACH=62
    DISTINCT=63
    DROP=64
    EACH=65
    ELSE=66
    END=67
    ESCAPE=68
    EXCEPT=69
    EXCLUSIVE=70
    EXISTS=71
    EXPLAIN=72
    FAIL=73
    FOR=74
    FOREIGN=75
    FROM=76
    FULL=77
    GLOB=78
    GROUP=79
    HAVING=80
    IF=81
    IGNORE=82
    IMMEDIATE=83
    IN=84
    INDEX=85
    INDEXED=86
    INITIALLY=87
    INNER=88
    INSERT=89
    INSTEAD=90
    INTERSECT=91
    INTO=92
    IS=93
    ISNULL=94
    JOIN=95
    KEY=96
    LEFT=97
    LIKE=98
    LIMIT=99
    MATCH=100
    NATURAL=101
    NO=102
    NOT=103
    NOTNULL=104
    NULL_=105
    OF=106
    OFFSET=107
    ON=108
    OR=109
    ORDER=110
    OUTER=111
    PLAN=112
    PRAGMA=113
    PRIMARY=114
    QUERY=115
    RAISE=116
    RECURSIVE=117
    REFERENCES=118
    REGEXP=119
    REINDEX=120
    RELEASE=121
    RENAME=122
    REPLACE=123
    RESTRICT=124
    RIGHT=125
    ROLLBACK=126
    ROW=127
    ROWS=128
    SAVEPOINT=129
    SELECT=130
    SET=131
    TABLE=132
    TEMP=133
    TEMPORARY=134
    THEN=135
    TO=136
    TRANSACTION=137
    TRIGGER=138
    UNION=139
    UNIQUE=140
    UPDATE=141
    USING=142
    VACUUM=143
    VALUES=144
    VIEW=145
    VIRTUAL=146
    WHEN=147
    WHERE=148
    WITH=149
    WITHOUT=150
    FIRST_VALUE=151
    OVER=152
    PARTITION=153
    RANGE=154
    PRECEDING=155
    UNBOUNDED=156
    CURRENT=157
    FOLLOWING=158
    CUME_DIST=159
    DENSE_RANK=160
    LAG=161
    LAST_VALUE=162
    LEAD=163
    NTH_VALUE=164
    NTILE=165
    PERCENT_RANK=166
    RANK=167
    ROW_NUMBER=168
    GENERATED=169
    ALWAYS=170
    STORED=171
    TRUE_=172
    FALSE_=173
    WINDOW=174
    NULLS=175
    FIRST=176
    LAST=177
    FILTER=178
    GROUPS=179
    EXCLUDE=180
    TIES=181
    OTHERS=182
    DO=183
    NOTHING=184
    IDENTIFIER=185
    NUMERIC_LITERAL=186
    REF_FIELD=187
    BIND_PARAMETER=188
    STRING_LITERAL=189
    BLOB_LITERAL=190
    SINGLE_LINE_COMMENT=191
    MULTILINE_COMMENT=192
    SPACES=193
    UNEXPECTED_CHAR=194

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ParseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(SQLiteParser.EOF, 0)

        def sql_stmt_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmt_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmt_listContext,i)


        def error(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ErrorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ErrorContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_parse

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParse" ):
                listener.enterParse(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParse" ):
                listener.exitParse(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParse" ):
                return visitor.visitParse(self)
            else:
                return visitor.visitChildren(self)




    def parse(self):

        localctx = SQLiteParser.ParseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_parse)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 1)) & ~0x3f) == 0 and ((1 << (_la - 1)) & ((1 << (SQLiteParser.SCOL - 1)) | (1 << (SQLiteParser.ALTER - 1)) | (1 << (SQLiteParser.ANALYZE - 1)) | (1 << (SQLiteParser.ATTACH - 1)) | (1 << (SQLiteParser.BEGIN - 1)) | (1 << (SQLiteParser.COMMIT - 1)) | (1 << (SQLiteParser.CREATE - 1)) | (1 << (SQLiteParser.DEFAULT - 1)) | (1 << (SQLiteParser.DELETE - 1)) | (1 << (SQLiteParser.DETACH - 1)) | (1 << (SQLiteParser.DROP - 1)))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (SQLiteParser.END - 67)) | (1 << (SQLiteParser.EXPLAIN - 67)) | (1 << (SQLiteParser.INSERT - 67)) | (1 << (SQLiteParser.PRAGMA - 67)) | (1 << (SQLiteParser.REINDEX - 67)) | (1 << (SQLiteParser.RELEASE - 67)) | (1 << (SQLiteParser.REPLACE - 67)) | (1 << (SQLiteParser.ROLLBACK - 67)) | (1 << (SQLiteParser.SAVEPOINT - 67)) | (1 << (SQLiteParser.SELECT - 67)))) != 0) or ((((_la - 141)) & ~0x3f) == 0 and ((1 << (_la - 141)) & ((1 << (SQLiteParser.UPDATE - 141)) | (1 << (SQLiteParser.VACUUM - 141)) | (1 << (SQLiteParser.VALUES - 141)) | (1 << (SQLiteParser.WITH - 141)) | (1 << (SQLiteParser.UNEXPECTED_CHAR - 141)))) != 0):
                self.state = 230
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WITH]:
                    self.state = 228
                    self.sql_stmt_list()
                    pass
                elif token in [SQLiteParser.UNEXPECTED_CHAR]:
                    self.state = 229
                    self.error()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 235
            self.match(SQLiteParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNEXPECTED_CHAR(self):
            return self.getToken(SQLiteParser.UNEXPECTED_CHAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError" ):
                listener.enterError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError" ):
                listener.exitError(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError" ):
                return visitor.visitError(self)
            else:
                return visitor.visitChildren(self)




    def error(self):

        localctx = SQLiteParser.ErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_error)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(SQLiteParser.UNEXPECTED_CHAR)
             
               
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmt_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sql_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Sql_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Sql_stmtContext,i)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt_list" ):
                listener.enterSql_stmt_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt_list" ):
                listener.exitSql_stmt_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_stmt_list" ):
                return visitor.visitSql_stmt_list(self)
            else:
                return visitor.visitChildren(self)




    def sql_stmt_list(self):

        localctx = SQLiteParser.Sql_stmt_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sql_stmt_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.SCOL:
                self.state = 240
                self.match(SQLiteParser.SCOL)
                self.state = 245
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 246
            self.sql_stmt()
            self.state = 255
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 248 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 247
                        self.match(SQLiteParser.SCOL)
                        self.state = 250 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==SQLiteParser.SCOL):
                            break

                    self.state = 252
                    self.sql_stmt() 
                self.state = 257
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 261
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 258
                    self.match(SQLiteParser.SCOL) 
                self.state = 263
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sql_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alter_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Alter_table_stmtContext,0)


        def analyze_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Analyze_stmtContext,0)


        def attach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Attach_stmtContext,0)


        def begin_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Begin_stmtContext,0)


        def commit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Commit_stmtContext,0)


        def create_index_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_index_stmtContext,0)


        def create_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_table_stmtContext,0)


        def create_trigger_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_trigger_stmtContext,0)


        def create_view_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_view_stmtContext,0)


        def create_virtual_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Create_virtual_table_stmtContext,0)


        def delete_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,0)


        def delete_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Delete_stmt_limitedContext,0)


        def detach_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Detach_stmtContext,0)


        def drop_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Drop_stmtContext,0)


        def insert_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,0)


        def pragma_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_stmtContext,0)


        def reindex_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Reindex_stmtContext,0)


        def release_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Release_stmtContext,0)


        def rollback_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Rollback_stmtContext,0)


        def savepoint_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_stmtContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def update_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,0)


        def update_stmt_limited(self):
            return self.getTypedRuleContext(SQLiteParser.Update_stmt_limitedContext,0)


        def vacuum_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Vacuum_stmtContext,0)


        def EXPLAIN(self):
            return self.getToken(SQLiteParser.EXPLAIN, 0)

        def QUERY(self):
            return self.getToken(SQLiteParser.QUERY, 0)

        def PLAN(self):
            return self.getToken(SQLiteParser.PLAN, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_sql_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSql_stmt" ):
                listener.enterSql_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSql_stmt" ):
                listener.exitSql_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql_stmt" ):
                return visitor.visitSql_stmt(self)
            else:
                return visitor.visitChildren(self)




    def sql_stmt(self):

        localctx = SQLiteParser.Sql_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_sql_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.EXPLAIN:
                self.state = 264
                self.match(SQLiteParser.EXPLAIN)
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.QUERY:
                    self.state = 265
                    self.match(SQLiteParser.QUERY)
                    self.state = 266
                    self.match(SQLiteParser.PLAN)




            self.state = 295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 271
                self.alter_table_stmt()
                pass

            elif la_ == 2:
                self.state = 272
                self.analyze_stmt()
                pass

            elif la_ == 3:
                self.state = 273
                self.attach_stmt()
                pass

            elif la_ == 4:
                self.state = 274
                self.begin_stmt()
                pass

            elif la_ == 5:
                self.state = 275
                self.commit_stmt()
                pass

            elif la_ == 6:
                self.state = 276
                self.create_index_stmt()
                pass

            elif la_ == 7:
                self.state = 277
                self.create_table_stmt()
                pass

            elif la_ == 8:
                self.state = 278
                self.create_trigger_stmt()
                pass

            elif la_ == 9:
                self.state = 279
                self.create_view_stmt()
                pass

            elif la_ == 10:
                self.state = 280
                self.create_virtual_table_stmt()
                pass

            elif la_ == 11:
                self.state = 281
                self.delete_stmt()
                pass

            elif la_ == 12:
                self.state = 282
                self.delete_stmt_limited()
                pass

            elif la_ == 13:
                self.state = 283
                self.detach_stmt()
                pass

            elif la_ == 14:
                self.state = 284
                self.drop_stmt()
                pass

            elif la_ == 15:
                self.state = 285
                self.insert_stmt()
                pass

            elif la_ == 16:
                self.state = 286
                self.pragma_stmt()
                pass

            elif la_ == 17:
                self.state = 287
                self.reindex_stmt()
                pass

            elif la_ == 18:
                self.state = 288
                self.release_stmt()
                pass

            elif la_ == 19:
                self.state = 289
                self.rollback_stmt()
                pass

            elif la_ == 20:
                self.state = 290
                self.savepoint_stmt()
                pass

            elif la_ == 21:
                self.state = 291
                self.select_stmt()
                pass

            elif la_ == 22:
                self.state = 292
                self.update_stmt()
                pass

            elif la_ == 23:
                self.state = 293
                self.update_stmt_limited()
                pass

            elif la_ == 24:
                self.state = 294
                self.vacuum_stmt()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Alter_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.old_column_name = None # Column_nameContext
            self.new_column_name = None # Column_nameContext

        def ALTER(self):
            return self.getToken(SQLiteParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def RENAME(self):
            return self.getToken(SQLiteParser.RENAME, 0)

        def ADD(self):
            return self.getToken(SQLiteParser.ADD, 0)

        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COLUMN(self):
            return self.getToken(SQLiteParser.COLUMN, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def new_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.New_table_nameContext,0)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alter_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlter_table_stmt" ):
                listener.enterAlter_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlter_table_stmt" ):
                listener.exitAlter_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlter_table_stmt" ):
                return visitor.visitAlter_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def alter_table_stmt(self):

        localctx = SQLiteParser.Alter_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_alter_table_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(SQLiteParser.ALTER)
            self.state = 298
            self.match(SQLiteParser.TABLE)
            self.state = 302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 299
                self.schema_name()
                self.state = 300
                self.match(SQLiteParser.DOT)


            self.state = 304
            self.table_name()
            self.state = 322
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.RENAME]:
                self.state = 305
                self.match(SQLiteParser.RENAME)
                self.state = 315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 306
                    self.match(SQLiteParser.TO)
                    self.state = 307
                    self.new_table_name()
                    pass

                elif la_ == 2:
                    self.state = 309
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
                    if la_ == 1:
                        self.state = 308
                        self.match(SQLiteParser.COLUMN)


                    self.state = 311
                    localctx.old_column_name = self.column_name()
                    self.state = 312
                    self.match(SQLiteParser.TO)
                    self.state = 313
                    localctx.new_column_name = self.column_name()
                    pass


                pass
            elif token in [SQLiteParser.ADD]:
                self.state = 317
                self.match(SQLiteParser.ADD)
                self.state = 319
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
                if la_ == 1:
                    self.state = 318
                    self.match(SQLiteParser.COLUMN)


                self.state = 321
                self.column_def()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Analyze_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANALYZE(self):
            return self.getToken(SQLiteParser.ANALYZE, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def table_or_index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_or_index_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_analyze_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyze_stmt" ):
                listener.enterAnalyze_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyze_stmt" ):
                listener.exitAnalyze_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnalyze_stmt" ):
                return visitor.visitAnalyze_stmt(self)
            else:
                return visitor.visitChildren(self)




    def analyze_stmt(self):

        localctx = SQLiteParser.Analyze_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_analyze_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 324
            self.match(SQLiteParser.ANALYZE)
            self.state = 332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.state = 325
                self.schema_name()

            elif la_ == 2:
                self.state = 329
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                if la_ == 1:
                    self.state = 326
                    self.schema_name()
                    self.state = 327
                    self.match(SQLiteParser.DOT)


                self.state = 331
                self.table_or_index_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Attach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ATTACH(self):
            return self.getToken(SQLiteParser.ATTACH, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_attach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttach_stmt" ):
                listener.enterAttach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttach_stmt" ):
                listener.exitAttach_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttach_stmt" ):
                return visitor.visitAttach_stmt(self)
            else:
                return visitor.visitChildren(self)




    def attach_stmt(self):

        localctx = SQLiteParser.Attach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_attach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.match(SQLiteParser.ATTACH)
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.state = 335
                self.match(SQLiteParser.DATABASE)


            self.state = 338
            self.expr(0)
            self.state = 339
            self.match(SQLiteParser.AS)
            self.state = 340
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Begin_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def EXCLUSIVE(self):
            return self.getToken(SQLiteParser.EXCLUSIVE, 0)

        def transaction_name(self):
            return self.getTypedRuleContext(SQLiteParser.Transaction_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_begin_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBegin_stmt" ):
                listener.enterBegin_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBegin_stmt" ):
                listener.exitBegin_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBegin_stmt" ):
                return visitor.visitBegin_stmt(self)
            else:
                return visitor.visitChildren(self)




    def begin_stmt(self):

        localctx = SQLiteParser.Begin_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_begin_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 342
            self.match(SQLiteParser.BEGIN)
            self.state = 344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (SQLiteParser.DEFERRED - 59)) | (1 << (SQLiteParser.EXCLUSIVE - 59)) | (1 << (SQLiteParser.IMMEDIATE - 59)))) != 0):
                self.state = 343
                _la = self._input.LA(1)
                if not(((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (SQLiteParser.DEFERRED - 59)) | (1 << (SQLiteParser.EXCLUSIVE - 59)) | (1 << (SQLiteParser.IMMEDIATE - 59)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 346
                self.match(SQLiteParser.TRANSACTION)
                self.state = 348
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
                if la_ == 1:
                    self.state = 347
                    self.transaction_name()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Commit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMIT(self):
            return self.getToken(SQLiteParser.COMMIT, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_commit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommit_stmt" ):
                listener.enterCommit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommit_stmt" ):
                listener.exitCommit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommit_stmt" ):
                return visitor.visitCommit_stmt(self)
            else:
                return visitor.visitChildren(self)




    def commit_stmt(self):

        localctx = SQLiteParser.Commit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_commit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 352
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.COMMIT or _la==SQLiteParser.END):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 353
                self.match(SQLiteParser.TRANSACTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rollback_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_rollback_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollback_stmt" ):
                listener.enterRollback_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollback_stmt" ):
                listener.exitRollback_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRollback_stmt" ):
                return visitor.visitRollback_stmt(self)
            else:
                return visitor.visitChildren(self)




    def rollback_stmt(self):

        localctx = SQLiteParser.Rollback_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_rollback_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 356
            self.match(SQLiteParser.ROLLBACK)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TRANSACTION:
                self.state = 357
                self.match(SQLiteParser.TRANSACTION)


            self.state = 365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TO:
                self.state = 360
                self.match(SQLiteParser.TO)
                self.state = 362
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
                if la_ == 1:
                    self.state = 361
                    self.match(SQLiteParser.SAVEPOINT)


                self.state = 364
                self.savepoint_name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_stmt" ):
                listener.enterSavepoint_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_stmt" ):
                listener.exitSavepoint_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_stmt" ):
                return visitor.visitSavepoint_stmt(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_stmt(self):

        localctx = SQLiteParser.Savepoint_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_savepoint_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(SQLiteParser.SAVEPOINT)
            self.state = 368
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Release_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(SQLiteParser.RELEASE, 0)

        def savepoint_name(self):
            return self.getTypedRuleContext(SQLiteParser.Savepoint_nameContext,0)


        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_release_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelease_stmt" ):
                listener.enterRelease_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelease_stmt" ):
                listener.exitRelease_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelease_stmt" ):
                return visitor.visitRelease_stmt(self)
            else:
                return visitor.visitChildren(self)




    def release_stmt(self):

        localctx = SQLiteParser.Release_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_release_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(SQLiteParser.RELEASE)
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.state = 371
                self.match(SQLiteParser.SAVEPOINT)


            self.state = 374
            self.savepoint_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_index_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_create_index_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_index_stmt" ):
                listener.enterCreate_index_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_index_stmt" ):
                listener.exitCreate_index_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_index_stmt" ):
                return visitor.visitCreate_index_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_index_stmt(self):

        localctx = SQLiteParser.Create_index_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_create_index_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 376
            self.match(SQLiteParser.CREATE)
            self.state = 378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.UNIQUE:
                self.state = 377
                self.match(SQLiteParser.UNIQUE)


            self.state = 380
            self.match(SQLiteParser.INDEX)
            self.state = 384
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.state = 381
                self.match(SQLiteParser.IF)
                self.state = 382
                self.match(SQLiteParser.NOT)
                self.state = 383
                self.match(SQLiteParser.EXISTS)


            self.state = 389
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.state = 386
                self.schema_name()
                self.state = 387
                self.match(SQLiteParser.DOT)


            self.state = 391
            self.index_name()
            self.state = 392
            self.match(SQLiteParser.ON)
            self.state = 393
            self.table_name()
            self.state = 394
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 395
            self.indexed_column()
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 396
                self.match(SQLiteParser.COMMA)
                self.state = 397
                self.indexed_column()
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 403
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 404
                self.match(SQLiteParser.WHERE)
                self.state = 405
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Indexed_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_indexed_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexed_column" ):
                listener.enterIndexed_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexed_column" ):
                listener.exitIndexed_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndexed_column" ):
                return visitor.visitIndexed_column(self)
            else:
                return visitor.visitChildren(self)




    def indexed_column(self):

        localctx = SQLiteParser.Indexed_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_indexed_column)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 408
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 409
                self.expr(0)
                pass


            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE:
                self.state = 412
                self.match(SQLiteParser.COLLATE)
                self.state = 413
                self.collation_name()


            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 416
                self.asc_desc()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.rowID = None # Token

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_def(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_defContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_defContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_constraintContext,i)


        def WITHOUT(self):
            return self.getToken(SQLiteParser.WITHOUT, 0)

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_table_stmt" ):
                listener.enterCreate_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_table_stmt" ):
                listener.exitCreate_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_table_stmt" ):
                return visitor.visitCreate_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_table_stmt(self):

        localctx = SQLiteParser.Create_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_create_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 419
            self.match(SQLiteParser.CREATE)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 420
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 423
            self.match(SQLiteParser.TABLE)
            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.state = 424
                self.match(SQLiteParser.IF)
                self.state = 425
                self.match(SQLiteParser.NOT)
                self.state = 426
                self.match(SQLiteParser.EXISTS)


            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 429
                self.schema_name()
                self.state = 430
                self.match(SQLiteParser.DOT)


            self.state = 434
            self.table_name()
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR]:
                self.state = 435
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 436
                self.column_def()
                self.state = 441
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 437
                        self.match(SQLiteParser.COMMA)
                        self.state = 438
                        self.column_def() 
                    self.state = 443
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 444
                    self.match(SQLiteParser.COMMA)
                    self.state = 445
                    self.table_constraint()
                    self.state = 450
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 451
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITHOUT:
                    self.state = 452
                    self.match(SQLiteParser.WITHOUT)
                    self.state = 453
                    localctx.rowID = self.match(SQLiteParser.IDENTIFIER)


                pass
            elif token in [SQLiteParser.AS]:
                self.state = 456
                self.match(SQLiteParser.AS)
                self.state = 457
                self.select_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_defContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def column_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_def

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_def" ):
                listener.enterColumn_def(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_def" ):
                listener.exitColumn_def(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_def" ):
                return visitor.visitColumn_def(self)
            else:
                return visitor.visitChildren(self)




    def column_def(self):

        localctx = SQLiteParser.Column_defContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_column_def)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.column_name()
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 461
                self.type_name()


            self.state = 467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,41,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 464
                    self.column_constraint() 
                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,41,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Type_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def signed_number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Signed_numberContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_type_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType_name" ):
                listener.enterType_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType_name" ):
                listener.exitType_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType_name" ):
                return visitor.visitType_name(self)
            else:
                return visitor.visitChildren(self)




    def type_name(self):

        localctx = SQLiteParser.Type_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_type_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471 
            self._errHandler.sync(self)
            _alt = 1+1
            while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1+1:
                    self.state = 470
                    self.name()

                else:
                    raise NoViableAltException(self)
                self.state = 473 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,42,self._ctx)

            self.state = 485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.state = 475
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 476
                self.signed_number()
                self.state = 477
                self.match(SQLiteParser.CLOSE_PAR)

            elif la_ == 2:
                self.state = 479
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 480
                self.signed_number()
                self.state = 481
                self.match(SQLiteParser.COMMA)
                self.state = 482
                self.signed_number()
                self.state = 483
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def GENERATED(self):
            return self.getToken(SQLiteParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SQLiteParser.ALWAYS, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def STORED(self):
            return self.getToken(SQLiteParser.STORED, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_constraint" ):
                listener.enterColumn_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_constraint" ):
                listener.exitColumn_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_constraint" ):
                return visitor.visitColumn_constraint(self)
            else:
                return visitor.visitChildren(self)




    def column_constraint(self):

        localctx = SQLiteParser.Column_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_column_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT:
                self.state = 487
                self.match(SQLiteParser.CONSTRAINT)
                self.state = 488
                self.name()


            self.state = 538
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY]:
                self.state = 491
                self.match(SQLiteParser.PRIMARY)
                self.state = 492
                self.match(SQLiteParser.KEY)
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                    self.state = 493
                    self.asc_desc()


                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 496
                    self.conflict_clause()


                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AUTOINCREMENT:
                    self.state = 499
                    self.match(SQLiteParser.AUTOINCREMENT)


                pass
            elif token in [SQLiteParser.NOT, SQLiteParser.UNIQUE]:
                self.state = 505
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.NOT]:
                    self.state = 502
                    self.match(SQLiteParser.NOT)
                    self.state = 503
                    self.match(SQLiteParser.NULL_)
                    pass
                elif token in [SQLiteParser.UNIQUE]:
                    self.state = 504
                    self.match(SQLiteParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 507
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK]:
                self.state = 510
                self.match(SQLiteParser.CHECK)
                self.state = 511
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 512
                self.expr(0)
                self.state = 513
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DEFAULT]:
                self.state = 515
                self.match(SQLiteParser.DEFAULT)
                self.state = 522
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 516
                    self.signed_number()
                    pass

                elif la_ == 2:
                    self.state = 517
                    self.literal_value()
                    pass

                elif la_ == 3:
                    self.state = 518
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 519
                    self.expr(0)
                    self.state = 520
                    self.match(SQLiteParser.CLOSE_PAR)
                    pass


                pass
            elif token in [SQLiteParser.COLLATE]:
                self.state = 524
                self.match(SQLiteParser.COLLATE)
                self.state = 525
                self.collation_name()
                pass
            elif token in [SQLiteParser.REFERENCES]:
                self.state = 526
                self.foreign_key_clause()
                pass
            elif token in [SQLiteParser.AS, SQLiteParser.GENERATED]:
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GENERATED:
                    self.state = 527
                    self.match(SQLiteParser.GENERATED)
                    self.state = 528
                    self.match(SQLiteParser.ALWAYS)


                self.state = 531
                self.match(SQLiteParser.AS)
                self.state = 532
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 533
                self.expr(0)
                self.state = 534
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.VIRTUAL or _la==SQLiteParser.STORED:
                    self.state = 535
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.VIRTUAL or _la==SQLiteParser.STORED):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Signed_numberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_signed_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSigned_number" ):
                listener.enterSigned_number(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSigned_number" ):
                listener.exitSigned_number(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSigned_number" ):
                return visitor.visitSigned_number(self)
            else:
                return visitor.visitChildren(self)




    def signed_number(self):

        localctx = SQLiteParser.Signed_numberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_signed_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS:
                self.state = 540
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 543
            self.match(SQLiteParser.NUMERIC_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def FOREIGN(self):
            return self.getToken(SQLiteParser.FOREIGN, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def foreign_key_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_key_clauseContext,0)


        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def conflict_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Conflict_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_constraint" ):
                listener.enterTable_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_constraint" ):
                listener.exitTable_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_constraint" ):
                return visitor.visitTable_constraint(self)
            else:
                return visitor.visitChildren(self)




    def table_constraint(self):

        localctx = SQLiteParser.Table_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_table_constraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.CONSTRAINT:
                self.state = 545
                self.match(SQLiteParser.CONSTRAINT)
                self.state = 546
                self.name()


            self.state = 586
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.PRIMARY, SQLiteParser.UNIQUE]:
                self.state = 552
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.PRIMARY]:
                    self.state = 549
                    self.match(SQLiteParser.PRIMARY)
                    self.state = 550
                    self.match(SQLiteParser.KEY)
                    pass
                elif token in [SQLiteParser.UNIQUE]:
                    self.state = 551
                    self.match(SQLiteParser.UNIQUE)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 554
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 555
                self.indexed_column()
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 556
                    self.match(SQLiteParser.COMMA)
                    self.state = 557
                    self.indexed_column()
                    self.state = 562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 563
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 564
                    self.conflict_clause()


                pass
            elif token in [SQLiteParser.CHECK]:
                self.state = 567
                self.match(SQLiteParser.CHECK)
                self.state = 568
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 569
                self.expr(0)
                self.state = 570
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.FOREIGN]:
                self.state = 572
                self.match(SQLiteParser.FOREIGN)
                self.state = 573
                self.match(SQLiteParser.KEY)
                self.state = 574
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 575
                self.column_name()
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 576
                    self.match(SQLiteParser.COMMA)
                    self.state = 577
                    self.column_name()
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 583
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 584
                self.foreign_key_clause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_key_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REFERENCES(self):
            return self.getToken(SQLiteParser.REFERENCES, 0)

        def foreign_table(self):
            return self.getTypedRuleContext(SQLiteParser.Foreign_tableContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def DEFERRABLE(self):
            return self.getToken(SQLiteParser.DEFERRABLE, 0)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ON)
            else:
                return self.getToken(SQLiteParser.ON, i)

        def MATCH(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.MATCH)
            else:
                return self.getToken(SQLiteParser.MATCH, i)

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.NameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.NameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def DELETE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DELETE)
            else:
                return self.getToken(SQLiteParser.DELETE, i)

        def UPDATE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UPDATE)
            else:
                return self.getToken(SQLiteParser.UPDATE, i)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def INITIALLY(self):
            return self.getToken(SQLiteParser.INITIALLY, 0)

        def CASCADE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CASCADE)
            else:
                return self.getToken(SQLiteParser.CASCADE, i)

        def RESTRICT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.RESTRICT)
            else:
                return self.getToken(SQLiteParser.RESTRICT, i)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SET)
            else:
                return self.getToken(SQLiteParser.SET, i)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NO)
            else:
                return self.getToken(SQLiteParser.NO, i)

        def ACTION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ACTION)
            else:
                return self.getToken(SQLiteParser.ACTION, i)

        def NULL_(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.NULL_)
            else:
                return self.getToken(SQLiteParser.NULL_, i)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DEFAULT)
            else:
                return self.getToken(SQLiteParser.DEFAULT, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_key_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_key_clause" ):
                listener.enterForeign_key_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_key_clause" ):
                listener.exitForeign_key_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_key_clause" ):
                return visitor.visitForeign_key_clause(self)
            else:
                return visitor.visitChildren(self)




    def foreign_key_clause(self):

        localctx = SQLiteParser.Foreign_key_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_foreign_key_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 588
            self.match(SQLiteParser.REFERENCES)
            self.state = 589
            self.foreign_table()
            self.state = 601
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 590
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 591
                self.column_name()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 592
                    self.match(SQLiteParser.COMMA)
                    self.state = 593
                    self.column_name()
                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 599
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.MATCH or _la==SQLiteParser.ON:
                self.state = 615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.ON]:
                    self.state = 603
                    self.match(SQLiteParser.ON)
                    self.state = 604
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DELETE or _la==SQLiteParser.UPDATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 611
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [SQLiteParser.SET]:
                        self.state = 605
                        self.match(SQLiteParser.SET)
                        self.state = 606
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.DEFAULT or _la==SQLiteParser.NULL_):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [SQLiteParser.CASCADE]:
                        self.state = 607
                        self.match(SQLiteParser.CASCADE)
                        pass
                    elif token in [SQLiteParser.RESTRICT]:
                        self.state = 608
                        self.match(SQLiteParser.RESTRICT)
                        pass
                    elif token in [SQLiteParser.NO]:
                        self.state = 609
                        self.match(SQLiteParser.NO)
                        self.state = 610
                        self.match(SQLiteParser.ACTION)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                elif token in [SQLiteParser.MATCH]:
                    self.state = 613
                    self.match(SQLiteParser.MATCH)
                    self.state = 614
                    self.name()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 628
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NOT:
                    self.state = 620
                    self.match(SQLiteParser.NOT)


                self.state = 623
                self.match(SQLiteParser.DEFERRABLE)
                self.state = 626
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.INITIALLY:
                    self.state = 624
                    self.match(SQLiteParser.INITIALLY)
                    self.state = 625
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.DEFERRED or _la==SQLiteParser.IMMEDIATE):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conflict_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_conflict_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConflict_clause" ):
                listener.enterConflict_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConflict_clause" ):
                listener.exitConflict_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConflict_clause" ):
                return visitor.visitConflict_clause(self)
            else:
                return visitor.visitChildren(self)




    def conflict_clause(self):

        localctx = SQLiteParser.Conflict_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_conflict_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(SQLiteParser.ON)
            self.state = 631
            self.match(SQLiteParser.CONFLICT)
            self.state = 632
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ABORT or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (SQLiteParser.FAIL - 73)) | (1 << (SQLiteParser.IGNORE - 73)) | (1 << (SQLiteParser.REPLACE - 73)) | (1 << (SQLiteParser.ROLLBACK - 73)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_trigger_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def trigger_name(self):
            return self.getTypedRuleContext(SQLiteParser.Trigger_nameContext,0)


        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def BEFORE(self):
            return self.getToken(SQLiteParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(SQLiteParser.AFTER, 0)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def EACH(self):
            return self.getToken(SQLiteParser.EACH, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def WHEN(self):
            return self.getToken(SQLiteParser.WHEN, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def SCOL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.SCOL)
            else:
                return self.getToken(SQLiteParser.SCOL, i)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def INSTEAD(self):
            return self.getToken(SQLiteParser.INSTEAD, 0)

        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OF)
            else:
                return self.getToken(SQLiteParser.OF, i)

        def update_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Update_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Update_stmtContext,i)


        def insert_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Insert_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Insert_stmtContext,i)


        def delete_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Delete_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Delete_stmtContext,i)


        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_trigger_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_trigger_stmt" ):
                listener.enterCreate_trigger_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_trigger_stmt" ):
                listener.exitCreate_trigger_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_trigger_stmt" ):
                return visitor.visitCreate_trigger_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_trigger_stmt(self):

        localctx = SQLiteParser.Create_trigger_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_create_trigger_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(SQLiteParser.CREATE)
            self.state = 636
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 635
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 638
            self.match(SQLiteParser.TRIGGER)
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.state = 639
                self.match(SQLiteParser.IF)
                self.state = 640
                self.match(SQLiteParser.NOT)
                self.state = 641
                self.match(SQLiteParser.EXISTS)


            self.state = 647
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 644
                self.schema_name()
                self.state = 645
                self.match(SQLiteParser.DOT)


            self.state = 649
            self.trigger_name()
            self.state = 654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.BEFORE]:
                self.state = 650
                self.match(SQLiteParser.BEFORE)
                pass
            elif token in [SQLiteParser.AFTER]:
                self.state = 651
                self.match(SQLiteParser.AFTER)
                pass
            elif token in [SQLiteParser.INSTEAD]:
                self.state = 652
                self.match(SQLiteParser.INSTEAD)
                self.state = 653
                self.match(SQLiteParser.OF)
                pass
            elif token in [SQLiteParser.DELETE, SQLiteParser.INSERT, SQLiteParser.UPDATE]:
                pass
            else:
                pass
            self.state = 670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.DELETE]:
                self.state = 656
                self.match(SQLiteParser.DELETE)
                pass
            elif token in [SQLiteParser.INSERT]:
                self.state = 657
                self.match(SQLiteParser.INSERT)
                pass
            elif token in [SQLiteParser.UPDATE]:
                self.state = 658
                self.match(SQLiteParser.UPDATE)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OF:
                    self.state = 659
                    self.match(SQLiteParser.OF)
                    self.state = 660
                    self.column_name()
                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 661
                        self.match(SQLiteParser.COMMA)
                        self.state = 662
                        self.column_name()
                        self.state = 667
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

            self.state = 672
            self.match(SQLiteParser.ON)
            self.state = 673
            self.table_name()
            self.state = 677
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FOR:
                self.state = 674
                self.match(SQLiteParser.FOR)
                self.state = 675
                self.match(SQLiteParser.EACH)
                self.state = 676
                self.match(SQLiteParser.ROW)


            self.state = 681
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHEN:
                self.state = 679
                self.match(SQLiteParser.WHEN)
                self.state = 680
                self.expr(0)


            self.state = 683
            self.match(SQLiteParser.BEGIN)
            self.state = 692 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 688
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 684
                    self.update_stmt()
                    pass

                elif la_ == 2:
                    self.state = 685
                    self.insert_stmt()
                    pass

                elif la_ == 3:
                    self.state = 686
                    self.delete_stmt()
                    pass

                elif la_ == 4:
                    self.state = 687
                    self.select_stmt()
                    pass


                self.state = 690
                self.match(SQLiteParser.SCOL)
                self.state = 694 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.DEFAULT or _la==SQLiteParser.DELETE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (SQLiteParser.INSERT - 89)) | (1 << (SQLiteParser.REPLACE - 89)) | (1 << (SQLiteParser.SELECT - 89)) | (1 << (SQLiteParser.UPDATE - 89)) | (1 << (SQLiteParser.VALUES - 89)) | (1 << (SQLiteParser.WITH - 89)))) != 0)):
                    break

            self.state = 696
            self.match(SQLiteParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_view_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def view_name(self):
            return self.getTypedRuleContext(SQLiteParser.View_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_view_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_view_stmt" ):
                listener.enterCreate_view_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_view_stmt" ):
                listener.exitCreate_view_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_view_stmt" ):
                return visitor.visitCreate_view_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_view_stmt(self):

        localctx = SQLiteParser.Create_view_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_create_view_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 698
            self.match(SQLiteParser.CREATE)
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY:
                self.state = 699
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.TEMP or _la==SQLiteParser.TEMPORARY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 702
            self.match(SQLiteParser.VIEW)
            self.state = 706
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.state = 703
                self.match(SQLiteParser.IF)
                self.state = 704
                self.match(SQLiteParser.NOT)
                self.state = 705
                self.match(SQLiteParser.EXISTS)


            self.state = 711
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 708
                self.schema_name()
                self.state = 709
                self.match(SQLiteParser.DOT)


            self.state = 713
            self.view_name()
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 714
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 715
                self.column_name()
                self.state = 720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 716
                    self.match(SQLiteParser.COMMA)
                    self.state = 717
                    self.column_name()
                    self.state = 722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 723
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 727
            self.match(SQLiteParser.AS)
            self.state = 728
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Create_virtual_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def module_name(self):
            return self.getTypedRuleContext(SQLiteParser.Module_nameContext,0)


        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def module_argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Module_argumentContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Module_argumentContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_create_virtual_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreate_virtual_table_stmt" ):
                listener.enterCreate_virtual_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreate_virtual_table_stmt" ):
                listener.exitCreate_virtual_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCreate_virtual_table_stmt" ):
                return visitor.visitCreate_virtual_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def create_virtual_table_stmt(self):

        localctx = SQLiteParser.Create_virtual_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_create_virtual_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 730
            self.match(SQLiteParser.CREATE)
            self.state = 731
            self.match(SQLiteParser.VIRTUAL)
            self.state = 732
            self.match(SQLiteParser.TABLE)
            self.state = 736
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.state = 733
                self.match(SQLiteParser.IF)
                self.state = 734
                self.match(SQLiteParser.NOT)
                self.state = 735
                self.match(SQLiteParser.EXISTS)


            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
            if la_ == 1:
                self.state = 738
                self.schema_name()
                self.state = 739
                self.match(SQLiteParser.DOT)


            self.state = 743
            self.table_name()
            self.state = 744
            self.match(SQLiteParser.USING)
            self.state = 745
            self.module_name()
            self.state = 757
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 746
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 747
                self.module_argument()
                self.state = 752
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 748
                    self.match(SQLiteParser.COMMA)
                    self.state = 749
                    self.module_argument()
                    self.state = 754
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 755
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def cte_table_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Cte_table_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS)
            else:
                return self.getToken(SQLiteParser.AS, i)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_stmtContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_with_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_clause" ):
                listener.enterWith_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_clause" ):
                listener.exitWith_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_clause" ):
                return visitor.visitWith_clause(self)
            else:
                return visitor.visitChildren(self)




    def with_clause(self):

        localctx = SQLiteParser.With_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_with_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(SQLiteParser.WITH)
            self.state = 761
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.state = 760
                self.match(SQLiteParser.RECURSIVE)


            self.state = 763
            self.cte_table_name()
            self.state = 764
            self.match(SQLiteParser.AS)
            self.state = 765
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 766
            self.select_stmt()
            self.state = 767
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 768
                self.match(SQLiteParser.COMMA)
                self.state = 769
                self.cte_table_name()
                self.state = 770
                self.match(SQLiteParser.AS)
                self.state = 771
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 772
                self.select_stmt()
                self.state = 773
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Cte_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_cte_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCte_table_name" ):
                listener.enterCte_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCte_table_name" ):
                listener.exitCte_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCte_table_name" ):
                return visitor.visitCte_table_name(self)
            else:
                return visitor.visitChildren(self)




    def cte_table_name(self):

        localctx = SQLiteParser.Cte_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cte_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 780
            self.table_name()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 781
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 782
                self.column_name()
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 783
                    self.match(SQLiteParser.COMMA)
                    self.state = 784
                    self.column_name()
                    self.state = 789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 790
                self.match(SQLiteParser.CLOSE_PAR)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_cteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cte_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Cte_table_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def initial_select(self):
            return self.getTypedRuleContext(SQLiteParser.Initial_selectContext,0)


        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def recursive_select(self):
            return self.getTypedRuleContext(SQLiteParser.Recursive_selectContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_cte

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_cte" ):
                listener.enterRecursive_cte(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_cte" ):
                listener.exitRecursive_cte(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecursive_cte" ):
                return visitor.visitRecursive_cte(self)
            else:
                return visitor.visitChildren(self)




    def recursive_cte(self):

        localctx = SQLiteParser.Recursive_cteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_recursive_cte)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 794
            self.cte_table_name()
            self.state = 795
            self.match(SQLiteParser.AS)
            self.state = 796
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 797
            self.initial_select()
            self.state = 798
            self.match(SQLiteParser.UNION)
            self.state = 800
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ALL:
                self.state = 799
                self.match(SQLiteParser.ALL)


            self.state = 802
            self.recursive_select()
            self.state = 803
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_expression" ):
                listener.enterCommon_table_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_expression" ):
                listener.exitCommon_table_expression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_expression" ):
                return visitor.visitCommon_table_expression(self)
            else:
                return visitor.visitChildren(self)




    def common_table_expression(self):

        localctx = SQLiteParser.Common_table_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_common_table_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.table_name()
            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 806
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 807
                self.column_name()
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 808
                    self.match(SQLiteParser.COMMA)
                    self.state = 809
                    self.column_name()
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 815
                self.match(SQLiteParser.CLOSE_PAR)


            self.state = 819
            self.match(SQLiteParser.AS)
            self.state = 820
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 821
            self.select_stmt()
            self.state = 822
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt" ):
                listener.enterDelete_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt" ):
                listener.exitDelete_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt" ):
                return visitor.visitDelete_stmt(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt(self):

        localctx = SQLiteParser.Delete_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_delete_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 824
                self.with_clause()


            self.state = 827
            self.match(SQLiteParser.DELETE)
            self.state = 828
            self.match(SQLiteParser.FROM)
            self.state = 829
            self.qualified_table_name()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 830
                self.match(SQLiteParser.WHERE)
                self.state = 831
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Delete_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_delete_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelete_stmt_limited" ):
                listener.enterDelete_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelete_stmt_limited" ):
                listener.exitDelete_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelete_stmt_limited" ):
                return visitor.visitDelete_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def delete_stmt_limited(self):

        localctx = SQLiteParser.Delete_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_delete_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 834
                self.with_clause()


            self.state = 837
            self.match(SQLiteParser.DELETE)
            self.state = 838
            self.match(SQLiteParser.FROM)
            self.state = 839
            self.qualified_table_name()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 840
                self.match(SQLiteParser.WHERE)
                self.state = 841
                self.expr(0)


            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT or _la==SQLiteParser.ORDER:
                self.state = 845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 844
                    self.order_by_stmt()


                self.state = 847
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Detach_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DETACH(self):
            return self.getToken(SQLiteParser.DETACH, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_detach_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetach_stmt" ):
                listener.enterDetach_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetach_stmt" ):
                listener.exitDetach_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDetach_stmt" ):
                return visitor.visitDetach_stmt(self)
            else:
                return visitor.visitChildren(self)




    def detach_stmt(self):

        localctx = SQLiteParser.Detach_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_detach_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(SQLiteParser.DETACH)
            self.state = 852
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 851
                self.match(SQLiteParser.DATABASE)


            self.state = 854
            self.schema_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Drop_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.object = None # Token

        def DROP(self):
            return self.getToken(SQLiteParser.DROP, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_drop_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDrop_stmt" ):
                listener.enterDrop_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDrop_stmt" ):
                listener.exitDrop_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDrop_stmt" ):
                return visitor.visitDrop_stmt(self)
            else:
                return visitor.visitChildren(self)




    def drop_stmt(self):

        localctx = SQLiteParser.Drop_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_drop_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(SQLiteParser.DROP)
            self.state = 857
            localctx.object = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (SQLiteParser.INDEX - 85)) | (1 << (SQLiteParser.TABLE - 85)) | (1 << (SQLiteParser.TRIGGER - 85)) | (1 << (SQLiteParser.VIEW - 85)))) != 0)):
                localctx.object = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 860
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 858
                self.match(SQLiteParser.IF)
                self.state = 859
                self.match(SQLiteParser.EXISTS)


            self.state = 865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 862
                self.schema_name()
                self.state = 863
                self.match(SQLiteParser.DOT)


            self.state = 867
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal_value(self):
            return self.getTypedRuleContext(SQLiteParser.Literal_valueContext,0)


        def BIND_PARAMETER(self):
            return self.getToken(SQLiteParser.BIND_PARAMETER, 0)

        def column_name(self):
            return self.getTypedRuleContext(SQLiteParser.Column_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.DOT)
            else:
                return self.getToken(SQLiteParser.DOT, i)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def unary_operator(self):
            return self.getTypedRuleContext(SQLiteParser.Unary_operatorContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def over_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Over_clauseContext,0)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def CAST(self):
            return self.getToken(SQLiteParser.CAST, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def type_name(self):
            return self.getTypedRuleContext(SQLiteParser.Type_nameContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def CASE(self):
            return self.getToken(SQLiteParser.CASE, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def WHEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHEN)
            else:
                return self.getToken(SQLiteParser.WHEN, i)

        def THEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.THEN)
            else:
                return self.getToken(SQLiteParser.THEN, i)

        def ELSE(self):
            return self.getToken(SQLiteParser.ELSE, 0)

        def raise_function(self):
            return self.getTypedRuleContext(SQLiteParser.Raise_functionContext,0)


        def PIPE2(self):
            return self.getToken(SQLiteParser.PIPE2, 0)

        def DIV(self):
            return self.getToken(SQLiteParser.DIV, 0)

        def MOD(self):
            return self.getToken(SQLiteParser.MOD, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def LT2(self):
            return self.getToken(SQLiteParser.LT2, 0)

        def GT2(self):
            return self.getToken(SQLiteParser.GT2, 0)

        def AMP(self):
            return self.getToken(SQLiteParser.AMP, 0)

        def PIPE(self):
            return self.getToken(SQLiteParser.PIPE, 0)

        def LT(self):
            return self.getToken(SQLiteParser.LT, 0)

        def LT_EQ(self):
            return self.getToken(SQLiteParser.LT_EQ, 0)

        def GT(self):
            return self.getToken(SQLiteParser.GT, 0)

        def GT_EQ(self):
            return self.getToken(SQLiteParser.GT_EQ, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def EQ(self):
            return self.getToken(SQLiteParser.EQ, 0)

        def NOT_EQ1(self):
            return self.getToken(SQLiteParser.NOT_EQ1, 0)

        def NOT_EQ2(self):
            return self.getToken(SQLiteParser.NOT_EQ2, 0)

        def IS(self):
            return self.getToken(SQLiteParser.IS, 0)

        def IN(self):
            return self.getToken(SQLiteParser.IN, 0)

        def LIKE(self):
            return self.getToken(SQLiteParser.LIKE, 0)

        def GLOB(self):
            return self.getToken(SQLiteParser.GLOB, 0)

        def MATCH(self):
            return self.getToken(SQLiteParser.MATCH, 0)

        def REGEXP(self):
            return self.getToken(SQLiteParser.REGEXP, 0)

        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def ESCAPE(self):
            return self.getToken(SQLiteParser.ESCAPE, 0)

        def ISNULL(self):
            return self.getToken(SQLiteParser.ISNULL, 0)

        def NOTNULL(self):
            return self.getToken(SQLiteParser.NOTNULL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = SQLiteParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 870
                self.literal_value()
                pass

            elif la_ == 2:
                self.state = 871
                self.match(SQLiteParser.BIND_PARAMETER)
                pass

            elif la_ == 3:
                self.state = 880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 875
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 872
                        self.schema_name()
                        self.state = 873
                        self.match(SQLiteParser.DOT)


                    self.state = 877
                    self.table_name()
                    self.state = 878
                    self.match(SQLiteParser.DOT)


                self.state = 882
                self.column_name()
                pass

            elif la_ == 4:
                self.state = 883
                self.unary_operator()
                self.state = 884
                self.expr(21)
                pass

            elif la_ == 5:
                self.state = 886
                self.function_name()
                self.state = 887
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 900
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.REF_FIELD, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                    self.state = 889
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        self.state = 888
                        self.match(SQLiteParser.DISTINCT)


                    self.state = 891
                    self.expr(0)
                    self.state = 896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 892
                        self.match(SQLiteParser.COMMA)
                        self.state = 893
                        self.expr(0)
                        self.state = 898
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [SQLiteParser.STAR]:
                    self.state = 899
                    self.match(SQLiteParser.STAR)
                    pass
                elif token in [SQLiteParser.CLOSE_PAR]:
                    pass
                else:
                    pass
                self.state = 902
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 904
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 903
                    self.filter_clause()


                self.state = 907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 906
                    self.over_clause()


                pass

            elif la_ == 6:
                self.state = 909
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 910
                self.expr(0)
                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 911
                    self.match(SQLiteParser.COMMA)
                    self.state = 912
                    self.expr(0)
                    self.state = 917
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 918
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 7:
                self.state = 920
                self.match(SQLiteParser.CAST)
                self.state = 921
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 922
                self.expr(0)
                self.state = 923
                self.match(SQLiteParser.AS)
                self.state = 924
                self.type_name()
                self.state = 925
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 8:
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.EXISTS or _la==SQLiteParser.NOT:
                    self.state = 928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.NOT:
                        self.state = 927
                        self.match(SQLiteParser.NOT)


                    self.state = 930
                    self.match(SQLiteParser.EXISTS)


                self.state = 933
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 934
                self.select_stmt()
                self.state = 935
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 9:
                self.state = 937
                self.match(SQLiteParser.CASE)
                self.state = 939
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.expr(0)


                self.state = 946 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 941
                    self.match(SQLiteParser.WHEN)
                    self.state = 942
                    self.expr(0)
                    self.state = 943
                    self.match(SQLiteParser.THEN)
                    self.state = 944
                    self.expr(0)
                    self.state = 948 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==SQLiteParser.WHEN):
                        break

                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ELSE:
                    self.state = 950
                    self.match(SQLiteParser.ELSE)
                    self.state = 951
                    self.expr(0)


                self.state = 954
                self.match(SQLiteParser.END)
                pass

            elif la_ == 10:
                self.state = 956
                self.raise_function()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1078
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,134,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1076
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 959
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 960
                        self.match(SQLiteParser.PIPE2)
                        self.state = 961
                        self.expr(21)
                        pass

                    elif la_ == 2:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 962
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 963
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.STAR) | (1 << SQLiteParser.DIV) | (1 << SQLiteParser.MOD))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 964
                        self.expr(20)
                        pass

                    elif la_ == 3:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 965
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 966
                        _la = self._input.LA(1)
                        if not(_la==SQLiteParser.PLUS or _la==SQLiteParser.MINUS):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 967
                        self.expr(19)
                        pass

                    elif la_ == 4:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 968
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 969
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT2) | (1 << SQLiteParser.GT2) | (1 << SQLiteParser.AMP) | (1 << SQLiteParser.PIPE))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 970
                        self.expr(18)
                        pass

                    elif la_ == 5:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 971
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 972
                        _la = self._input.LA(1)
                        if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.LT) | (1 << SQLiteParser.LT_EQ) | (1 << SQLiteParser.GT) | (1 << SQLiteParser.GT_EQ))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 973
                        self.expr(17)
                        pass

                    elif la_ == 6:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 974
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 987
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                        if la_ == 1:
                            self.state = 975
                            self.match(SQLiteParser.ASSIGN)
                            pass

                        elif la_ == 2:
                            self.state = 976
                            self.match(SQLiteParser.EQ)
                            pass

                        elif la_ == 3:
                            self.state = 977
                            self.match(SQLiteParser.NOT_EQ1)
                            pass

                        elif la_ == 4:
                            self.state = 978
                            self.match(SQLiteParser.NOT_EQ2)
                            pass

                        elif la_ == 5:
                            self.state = 979
                            self.match(SQLiteParser.IS)
                            pass

                        elif la_ == 6:
                            self.state = 980
                            self.match(SQLiteParser.IS)
                            self.state = 981
                            self.match(SQLiteParser.NOT)
                            pass

                        elif la_ == 7:
                            self.state = 982
                            self.match(SQLiteParser.IN)
                            pass

                        elif la_ == 8:
                            self.state = 983
                            self.match(SQLiteParser.LIKE)
                            pass

                        elif la_ == 9:
                            self.state = 984
                            self.match(SQLiteParser.GLOB)
                            pass

                        elif la_ == 10:
                            self.state = 985
                            self.match(SQLiteParser.MATCH)
                            pass

                        elif la_ == 11:
                            self.state = 986
                            self.match(SQLiteParser.REGEXP)
                            pass


                        self.state = 989
                        self.expr(16)
                        pass

                    elif la_ == 7:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 990
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 991
                        self.match(SQLiteParser.AND)
                        self.state = 992
                        self.expr(15)
                        pass

                    elif la_ == 8:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 993
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 994
                        self.match(SQLiteParser.OR)
                        self.state = 995
                        self.expr(14)
                        pass

                    elif la_ == 9:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 996
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 997
                        self.match(SQLiteParser.IS)
                        self.state = 999
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                        if la_ == 1:
                            self.state = 998
                            self.match(SQLiteParser.NOT)


                        self.state = 1001
                        self.expr(7)
                        pass

                    elif la_ == 10:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1002
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1004
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1003
                            self.match(SQLiteParser.NOT)


                        self.state = 1006
                        self.match(SQLiteParser.BETWEEN)
                        self.state = 1007
                        self.expr(0)
                        self.state = 1008
                        self.match(SQLiteParser.AND)
                        self.state = 1009
                        self.expr(6)
                        pass

                    elif la_ == 11:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1011
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 1012
                        self.match(SQLiteParser.COLLATE)
                        self.state = 1013
                        self.collation_name()
                        pass

                    elif la_ == 12:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1014
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 1016
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1015
                            self.match(SQLiteParser.NOT)


                        self.state = 1018
                        _la = self._input.LA(1)
                        if not(((((_la - 78)) & ~0x3f) == 0 and ((1 << (_la - 78)) & ((1 << (SQLiteParser.GLOB - 78)) | (1 << (SQLiteParser.LIKE - 78)) | (1 << (SQLiteParser.MATCH - 78)) | (1 << (SQLiteParser.REGEXP - 78)))) != 0)):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 1019
                        self.expr(0)
                        self.state = 1022
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                        if la_ == 1:
                            self.state = 1020
                            self.match(SQLiteParser.ESCAPE)
                            self.state = 1021
                            self.expr(0)


                        pass

                    elif la_ == 13:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1024
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 1029
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [SQLiteParser.ISNULL]:
                            self.state = 1025
                            self.match(SQLiteParser.ISNULL)
                            pass
                        elif token in [SQLiteParser.NOTNULL]:
                            self.state = 1026
                            self.match(SQLiteParser.NOTNULL)
                            pass
                        elif token in [SQLiteParser.NOT]:
                            self.state = 1027
                            self.match(SQLiteParser.NOT)
                            self.state = 1028
                            self.match(SQLiteParser.NULL_)
                            pass
                        else:
                            raise NoViableAltException(self)

                        pass

                    elif la_ == 14:
                        localctx = SQLiteParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 1031
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 1033
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==SQLiteParser.NOT:
                            self.state = 1032
                            self.match(SQLiteParser.NOT)


                        self.state = 1035
                        self.match(SQLiteParser.IN)
                        self.state = 1074
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
                        if la_ == 1:
                            self.state = 1036
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1046
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                            if la_ == 1:
                                self.state = 1037
                                self.select_stmt()

                            elif la_ == 2:
                                self.state = 1038
                                self.expr(0)
                                self.state = 1043
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1039
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1040
                                    self.expr(0)
                                    self.state = 1045
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1048
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass

                        elif la_ == 2:
                            self.state = 1052
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
                            if la_ == 1:
                                self.state = 1049
                                self.schema_name()
                                self.state = 1050
                                self.match(SQLiteParser.DOT)


                            self.state = 1054
                            self.table_name()
                            pass

                        elif la_ == 3:
                            self.state = 1058
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,129,self._ctx)
                            if la_ == 1:
                                self.state = 1055
                                self.schema_name()
                                self.state = 1056
                                self.match(SQLiteParser.DOT)


                            self.state = 1060
                            self.table_function_name()
                            self.state = 1061
                            self.match(SQLiteParser.OPEN_PAR)
                            self.state = 1070
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH) | (1 << SQLiteParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.DROP - 64)) | (1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)) | (1 << (SQLiteParser.ROW - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.REF_FIELD - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0):
                                self.state = 1062
                                self.expr(0)
                                self.state = 1067
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                while _la==SQLiteParser.COMMA:
                                    self.state = 1063
                                    self.match(SQLiteParser.COMMA)
                                    self.state = 1064
                                    self.expr(0)
                                    self.state = 1069
                                    self._errHandler.sync(self)
                                    _la = self._input.LA(1)



                            self.state = 1072
                            self.match(SQLiteParser.CLOSE_PAR)
                            pass


                        pass

             
                self.state = 1080
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,134,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class Raise_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RAISE(self):
            return self.getToken(SQLiteParser.RAISE, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def error_message(self):
            return self.getTypedRuleContext(SQLiteParser.Error_messageContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_raise_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_function" ):
                listener.enterRaise_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_function" ):
                listener.exitRaise_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_function" ):
                return visitor.visitRaise_function(self)
            else:
                return visitor.visitChildren(self)




    def raise_function(self):

        localctx = SQLiteParser.Raise_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_raise_function)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(SQLiteParser.RAISE)
            self.state = 1082
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1087
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IGNORE]:
                self.state = 1083
                self.match(SQLiteParser.IGNORE)
                pass
            elif token in [SQLiteParser.ABORT, SQLiteParser.FAIL, SQLiteParser.ROLLBACK]:
                self.state = 1084
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or _la==SQLiteParser.FAIL or _la==SQLiteParser.ROLLBACK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1085
                self.match(SQLiteParser.COMMA)
                self.state = 1086
                self.error_message()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1089
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Literal_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NUMERIC_LITERAL(self):
            return self.getToken(SQLiteParser.NUMERIC_LITERAL, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def BLOB_LITERAL(self):
            return self.getToken(SQLiteParser.BLOB_LITERAL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def CURRENT_TIME(self):
            return self.getToken(SQLiteParser.CURRENT_TIME, 0)

        def CURRENT_DATE(self):
            return self.getToken(SQLiteParser.CURRENT_DATE, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_literal_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral_value" ):
                listener.enterLiteral_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral_value" ):
                listener.exitLiteral_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral_value" ):
                return visitor.visitLiteral_value(self)
            else:
                return visitor.visitChildren(self)




    def literal_value(self):

        localctx = SQLiteParser.Literal_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_literal_value)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1091
            _la = self._input.LA(1)
            if not(((((_la - 53)) & ~0x3f) == 0 and ((1 << (_la - 53)) & ((1 << (SQLiteParser.CURRENT_DATE - 53)) | (1 << (SQLiteParser.CURRENT_TIME - 53)) | (1 << (SQLiteParser.CURRENT_TIMESTAMP - 53)) | (1 << (SQLiteParser.NULL_ - 53)))) != 0) or ((((_la - 172)) & ~0x3f) == 0 and ((1 << (_la - 172)) & ((1 << (SQLiteParser.TRUE_ - 172)) | (1 << (SQLiteParser.FALSE_ - 172)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 172)) | (1 << (SQLiteParser.STRING_LITERAL - 172)) | (1 << (SQLiteParser.BLOB_LITERAL - 172)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Insert_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def upsert_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Upsert_clauseContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_insert_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsert_stmt" ):
                listener.enterInsert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsert_stmt" ):
                listener.exitInsert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInsert_stmt" ):
                return visitor.visitInsert_stmt(self)
            else:
                return visitor.visitChildren(self)




    def insert_stmt(self):

        localctx = SQLiteParser.Insert_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_insert_stmt)
        self._la = 0 # Token type
        try:
            self.state = 1163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INSERT, SQLiteParser.REPLACE, SQLiteParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WITH:
                    self.state = 1093
                    self.with_clause()


                self.state = 1101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1096
                    self.match(SQLiteParser.INSERT)
                    pass

                elif la_ == 2:
                    self.state = 1097
                    self.match(SQLiteParser.REPLACE)
                    pass

                elif la_ == 3:
                    self.state = 1098
                    self.match(SQLiteParser.INSERT)
                    self.state = 1099
                    self.match(SQLiteParser.OR)
                    self.state = 1100
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ABORT or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (SQLiteParser.FAIL - 73)) | (1 << (SQLiteParser.IGNORE - 73)) | (1 << (SQLiteParser.REPLACE - 73)) | (1 << (SQLiteParser.ROLLBACK - 73)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    pass


                self.state = 1103
                self.match(SQLiteParser.INTO)
                self.state = 1107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
                if la_ == 1:
                    self.state = 1104
                    self.schema_name()
                    self.state = 1105
                    self.match(SQLiteParser.DOT)


                self.state = 1109
                self.table_name()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS:
                    self.state = 1110
                    self.match(SQLiteParser.AS)
                    self.state = 1111
                    self.table_alias()


                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.OPEN_PAR:
                    self.state = 1114
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1115
                    self.column_name()
                    self.state = 1120
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1116
                        self.match(SQLiteParser.COMMA)
                        self.state = 1117
                        self.column_name()
                        self.state = 1122
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1123
                    self.match(SQLiteParser.CLOSE_PAR)


                self.state = 1156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1127
                    self.match(SQLiteParser.VALUES)
                    self.state = 1128
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1129
                    self.expr(0)
                    self.state = 1134
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1130
                        self.match(SQLiteParser.COMMA)
                        self.state = 1131
                        self.expr(0)
                        self.state = 1136
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1137
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1152
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1138
                        self.match(SQLiteParser.COMMA)
                        self.state = 1139
                        self.match(SQLiteParser.OPEN_PAR)
                        self.state = 1140
                        self.expr(0)
                        self.state = 1145
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1141
                            self.match(SQLiteParser.COMMA)
                            self.state = 1142
                            self.expr(0)
                            self.state = 1147
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 1148
                        self.match(SQLiteParser.CLOSE_PAR)
                        self.state = 1154
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1155
                    self.select_stmt()
                    pass


                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ON:
                    self.state = 1158
                    self.upsert_clause()


                pass
            elif token in [SQLiteParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1161
                self.match(SQLiteParser.DEFAULT)
                self.state = 1162
                self.match(SQLiteParser.VALUES)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Upsert_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def DO(self):
            return self.getToken(SQLiteParser.DO, 0)

        def NOTHING(self):
            return self.getToken(SQLiteParser.NOTHING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def indexed_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Indexed_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Indexed_columnContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.WHERE)
            else:
                return self.getToken(SQLiteParser.WHERE, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def EQ(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EQ)
            else:
                return self.getToken(SQLiteParser.EQ, i)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_upsert_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpsert_clause" ):
                listener.enterUpsert_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpsert_clause" ):
                listener.exitUpsert_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpsert_clause" ):
                return visitor.visitUpsert_clause(self)
            else:
                return visitor.visitChildren(self)




    def upsert_clause(self):

        localctx = SQLiteParser.Upsert_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_upsert_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1165
            self.match(SQLiteParser.ON)
            self.state = 1166
            self.match(SQLiteParser.CONFLICT)
            self.state = 1181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.OPEN_PAR:
                self.state = 1167
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1168
                self.indexed_column()
                self.state = 1173
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1169
                    self.match(SQLiteParser.COMMA)
                    self.state = 1170
                    self.indexed_column()
                    self.state = 1175
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1176
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1177
                    self.match(SQLiteParser.WHERE)
                    self.state = 1178
                    self.expr(0)




            self.state = 1183
            self.match(SQLiteParser.DO)
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.NOTHING]:
                self.state = 1184
                self.match(SQLiteParser.NOTHING)
                pass
            elif token in [SQLiteParser.UPDATE]:
                self.state = 1185
                self.match(SQLiteParser.UPDATE)
                self.state = 1186
                self.match(SQLiteParser.SET)

                self.state = 1189
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                if la_ == 1:
                    self.state = 1187
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1188
                    self.column_name_list()
                    pass


                self.state = 1191
                self.match(SQLiteParser.EQ)
                self.state = 1192
                self.expr(0)
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1193
                    self.match(SQLiteParser.COMMA)
                    self.state = 1196
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1194
                        self.column_name()
                        pass

                    elif la_ == 2:
                        self.state = 1195
                        self.column_name_list()
                        pass


                    self.state = 1198
                    self.match(SQLiteParser.EQ)
                    self.state = 1199
                    self.expr(0)
                    self.state = 1205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1206
                    self.match(SQLiteParser.WHERE)
                    self.state = 1207
                    self.expr(0)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PRAGMA(self):
            return self.getToken(SQLiteParser.PRAGMA, 0)

        def pragma_name(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def ASSIGN(self):
            return self.getToken(SQLiteParser.ASSIGN, 0)

        def pragma_value(self):
            return self.getTypedRuleContext(SQLiteParser.Pragma_valueContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_stmt" ):
                listener.enterPragma_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_stmt" ):
                listener.exitPragma_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_stmt" ):
                return visitor.visitPragma_stmt(self)
            else:
                return visitor.visitChildren(self)




    def pragma_stmt(self):

        localctx = SQLiteParser.Pragma_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pragma_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(SQLiteParser.PRAGMA)
            self.state = 1216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.schema_name()
                self.state = 1214
                self.match(SQLiteParser.DOT)


            self.state = 1218
            self.pragma_name()
            self.state = 1225
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ASSIGN]:
                self.state = 1219
                self.match(SQLiteParser.ASSIGN)
                self.state = 1220
                self.pragma_value()
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.state = 1221
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1222
                self.pragma_value()
                self.state = 1223
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def name(self):
            return self.getTypedRuleContext(SQLiteParser.NameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_value" ):
                listener.enterPragma_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_value" ):
                listener.exitPragma_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_value" ):
                return visitor.visitPragma_value(self)
            else:
                return visitor.visitChildren(self)




    def pragma_value(self):

        localctx = SQLiteParser.Pragma_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pragma_value)
        try:
            self.state = 1230
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1227
                self.signed_number()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1228
                self.name()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1229
                self.match(SQLiteParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Reindex_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REINDEX(self):
            return self.getToken(SQLiteParser.REINDEX, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_reindex_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReindex_stmt" ):
                listener.enterReindex_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReindex_stmt" ):
                listener.exitReindex_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReindex_stmt" ):
                return visitor.visitReindex_stmt(self)
            else:
                return visitor.visitChildren(self)




    def reindex_stmt(self):

        localctx = SQLiteParser.Reindex_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_reindex_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.match(SQLiteParser.REINDEX)
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1233
                self.collation_name()

            elif la_ == 2:
                self.state = 1237
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1234
                    self.schema_name()
                    self.state = 1235
                    self.match(SQLiteParser.DOT)


                self.state = 1241
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                if la_ == 1:
                    self.state = 1239
                    self.table_name()
                    pass

                elif la_ == 2:
                    self.state = 1240
                    self.index_name()
                    pass




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def compound_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Compound_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Compound_operatorContext,i)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_stmt" ):
                listener.enterSelect_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_stmt" ):
                listener.exitSelect_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_stmt" ):
                return visitor.visitSelect_stmt(self)
            else:
                return visitor.visitChildren(self)




    def select_stmt(self):

        localctx = SQLiteParser.Select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1245
                self.common_table_stmt()


            self.state = 1248
            self.select_core()
            self.state = 1254
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1249
                    self.compound_operator()
                    self.state = 1250
                    self.select_core() 
                self.state = 1256
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

            self.state = 1258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1257
                self.order_by_stmt()


            self.state = 1261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1260
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_operator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_operatorContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_operatorContext,i)


        def join_constraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Join_constraintContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Join_constraintContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_join_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_clause" ):
                listener.enterJoin_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_clause" ):
                listener.exitJoin_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_clause" ):
                return visitor.visitJoin_clause(self)
            else:
                return visitor.visitChildren(self)




    def join_clause(self):

        localctx = SQLiteParser.Join_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_join_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.table_or_subquery()
            self.state = 1271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA or _la==SQLiteParser.CROSS or ((((_la - 88)) & ~0x3f) == 0 and ((1 << (_la - 88)) & ((1 << (SQLiteParser.INNER - 88)) | (1 << (SQLiteParser.JOIN - 88)) | (1 << (SQLiteParser.LEFT - 88)) | (1 << (SQLiteParser.NATURAL - 88)))) != 0):
                self.state = 1264
                self.join_operator()
                self.state = 1265
                self.table_or_subquery()
                self.state = 1267
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
                if la_ == 1:
                    self.state = 1266
                    self.join_constraint()


                self.state = 1273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Select_coreContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(SQLiteParser.SELECT, 0)

        def result_column(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Result_columnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Result_columnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def group_by_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Group_by_clauseContext,0)


        def WINDOW(self):
            return self.getToken(SQLiteParser.WINDOW, 0)

        def window_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_nameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.AS)
            else:
                return self.getToken(SQLiteParser.AS, i)

        def window_defn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Window_defnContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Window_defnContext,i)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_select_core

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelect_core" ):
                listener.enterSelect_core(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelect_core" ):
                listener.exitSelect_core(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelect_core" ):
                return visitor.visitSelect_core(self)
            else:
                return visitor.visitChildren(self)




    def select_core(self):

        localctx = SQLiteParser.Select_coreContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_select_core)
        self._la = 0 # Token type
        try:
            self.state = 1351
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.SELECT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1274
                self.match(SQLiteParser.SELECT)
                self.state = 1276
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                if la_ == 1:
                    self.state = 1275
                    _la = self._input.LA(1)
                    if not(_la==SQLiteParser.ALL or _la==SQLiteParser.DISTINCT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1278
                self.result_column()
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1279
                    self.match(SQLiteParser.COMMA)
                    self.state = 1280
                    self.result_column()
                    self.state = 1285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.FROM:
                    self.state = 1286
                    self.match(SQLiteParser.FROM)
                    self.state = 1296
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1287
                        self.table_or_subquery()
                        self.state = 1292
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==SQLiteParser.COMMA:
                            self.state = 1288
                            self.match(SQLiteParser.COMMA)
                            self.state = 1289
                            self.table_or_subquery()
                            self.state = 1294
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass

                    elif la_ == 2:
                        self.state = 1295
                        self.join_clause()
                        pass




                self.state = 1302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WHERE:
                    self.state = 1300
                    self.match(SQLiteParser.WHERE)
                    self.state = 1301
                    self.expr(0)


                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.GROUP:
                    self.state = 1304
                    self.group_by_clause()


                self.state = 1321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.WINDOW:
                    self.state = 1307
                    self.match(SQLiteParser.WINDOW)
                    self.state = 1308
                    self.window_name()
                    self.state = 1309
                    self.match(SQLiteParser.AS)
                    self.state = 1310
                    self.window_defn()
                    self.state = 1318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1311
                        self.match(SQLiteParser.COMMA)
                        self.state = 1312
                        self.window_name()
                        self.state = 1313
                        self.match(SQLiteParser.AS)
                        self.state = 1314
                        self.window_defn()
                        self.state = 1320
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            elif token in [SQLiteParser.VALUES]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1323
                self.match(SQLiteParser.VALUES)
                self.state = 1324
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1325
                self.expr(0)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1326
                    self.match(SQLiteParser.COMMA)
                    self.state = 1327
                    self.expr(0)
                    self.state = 1332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1333
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1334
                    self.match(SQLiteParser.COMMA)
                    self.state = 1335
                    self.match(SQLiteParser.OPEN_PAR)
                    self.state = 1336
                    self.expr(0)
                    self.state = 1341
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1337
                        self.match(SQLiteParser.COMMA)
                        self.state = 1338
                        self.expr(0)
                        self.state = 1343
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1344
                    self.match(SQLiteParser.CLOSE_PAR)
                    self.state = 1350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_by_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def having_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Having_clauseContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_group_by_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_by_clause" ):
                listener.enterGroup_by_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_by_clause" ):
                listener.exitGroup_by_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGroup_by_clause" ):
                return visitor.visitGroup_by_clause(self)
            else:
                return visitor.visitChildren(self)




    def group_by_clause(self):

        localctx = SQLiteParser.Group_by_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_group_by_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.match(SQLiteParser.GROUP)
            self.state = 1354
            self.match(SQLiteParser.BY)
            self.state = 1355
            self.expr(0)
            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1356
                self.match(SQLiteParser.COMMA)
                self.state = 1357
                self.expr(0)
                self.state = 1362
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1364
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.HAVING:
                self.state = 1363
                self.having_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Having_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HAVING(self):
            return self.getToken(SQLiteParser.HAVING, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_having_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHaving_clause" ):
                listener.enterHaving_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHaving_clause" ):
                listener.exitHaving_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHaving_clause" ):
                return visitor.visitHaving_clause(self)
            else:
                return visitor.visitChildren(self)




    def having_clause(self):

        localctx = SQLiteParser.Having_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_having_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self.match(SQLiteParser.HAVING)
            self.state = 1367
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Factored_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_factored_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactored_select_stmt" ):
                listener.enterFactored_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactored_select_stmt" ):
                listener.exitFactored_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFactored_select_stmt" ):
                return visitor.visitFactored_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def factored_select_stmt(self):

        localctx = SQLiteParser.Factored_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_factored_select_stmt)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1369
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self):
            return self.getTypedRuleContext(SQLiteParser.Select_coreContext,0)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_select_stmt" ):
                listener.enterSimple_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_select_stmt" ):
                listener.exitSimple_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_select_stmt" ):
                return visitor.visitSimple_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_select_stmt(self):

        localctx = SQLiteParser.Simple_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_simple_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1371
                self.common_table_stmt()


            self.state = 1374
            self.select_core()
            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1375
                self.order_by_stmt()


            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1378
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_select_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_core(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Select_coreContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Select_coreContext,i)


        def common_table_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Common_table_stmtContext,0)


        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def INTERSECT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.INTERSECT)
            else:
                return self.getToken(SQLiteParser.INTERSECT, i)

        def EXCEPT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.EXCEPT)
            else:
                return self.getToken(SQLiteParser.EXCEPT, i)

        def UNION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.UNION)
            else:
                return self.getToken(SQLiteParser.UNION, i)

        def ALL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ALL)
            else:
                return self.getToken(SQLiteParser.ALL, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_select_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_select_stmt" ):
                listener.enterCompound_select_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_select_stmt" ):
                listener.exitCompound_select_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_select_stmt" ):
                return visitor.visitCompound_select_stmt(self)
            else:
                return visitor.visitChildren(self)




    def compound_select_stmt(self):

        localctx = SQLiteParser.Compound_select_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_compound_select_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1381
                self.common_table_stmt()


            self.state = 1384
            self.select_core()
            self.state = 1394 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1391
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.UNION]:
                    self.state = 1385
                    self.match(SQLiteParser.UNION)
                    self.state = 1387
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.ALL:
                        self.state = 1386
                        self.match(SQLiteParser.ALL)


                    pass
                elif token in [SQLiteParser.INTERSECT]:
                    self.state = 1389
                    self.match(SQLiteParser.INTERSECT)
                    pass
                elif token in [SQLiteParser.EXCEPT]:
                    self.state = 1390
                    self.match(SQLiteParser.EXCEPT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1393
                self.select_core()
                self.state = 1396 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==SQLiteParser.EXCEPT or _la==SQLiteParser.INTERSECT or _la==SQLiteParser.UNION):
                    break

            self.state = 1399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ORDER:
                self.state = 1398
                self.order_by_stmt()


            self.state = 1402
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT:
                self.state = 1401
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_subqueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def table_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Table_aliasContext,0)


        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def table_function_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_function_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def table_or_subquery(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Table_or_subqueryContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Table_or_subqueryContext,i)


        def join_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Join_clauseContext,0)


        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_subquery

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_subquery" ):
                listener.enterTable_or_subquery(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_subquery" ):
                listener.exitTable_or_subquery(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_or_subquery" ):
                return visitor.visitTable_or_subquery(self)
            else:
                return visitor.visitChildren(self)




    def table_or_subquery(self):

        localctx = SQLiteParser.Table_or_subqueryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_table_or_subquery)
        self._la = 0 # Token type
        try:
            self.state = 1468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1407
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
                if la_ == 1:
                    self.state = 1404
                    self.schema_name()
                    self.state = 1405
                    self.match(SQLiteParser.DOT)


                self.state = 1409
                self.table_name()
                self.state = 1414
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,194,self._ctx)
                if la_ == 1:
                    self.state = 1411
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
                    if la_ == 1:
                        self.state = 1410
                        self.match(SQLiteParser.AS)


                    self.state = 1413
                    self.table_alias()


                self.state = 1421
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.INDEXED]:
                    self.state = 1416
                    self.match(SQLiteParser.INDEXED)
                    self.state = 1417
                    self.match(SQLiteParser.BY)
                    self.state = 1418
                    self.index_name()
                    pass
                elif token in [SQLiteParser.NOT]:
                    self.state = 1419
                    self.match(SQLiteParser.NOT)
                    self.state = 1420
                    self.match(SQLiteParser.INDEXED)
                    pass
                elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.CLOSE_PAR, SQLiteParser.COMMA, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXCEPT, SQLiteParser.EXPLAIN, SQLiteParser.GROUP, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INTERSECT, SQLiteParser.JOIN, SQLiteParser.LEFT, SQLiteParser.LIMIT, SQLiteParser.NATURAL, SQLiteParser.ON, SQLiteParser.ORDER, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.UNION, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WINDOW, SQLiteParser.UNEXPECTED_CHAR]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1426
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1423
                    self.schema_name()
                    self.state = 1424
                    self.match(SQLiteParser.DOT)


                self.state = 1428
                self.table_function_name()
                self.state = 1429
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1430
                self.expr(0)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1431
                    self.match(SQLiteParser.COMMA)
                    self.state = 1432
                    self.expr(0)
                    self.state = 1437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1438
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1443
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1440
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                    if la_ == 1:
                        self.state = 1439
                        self.match(SQLiteParser.AS)


                    self.state = 1442
                    self.table_alias()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1445
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1455
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1446
                    self.table_or_subquery()
                    self.state = 1451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1447
                        self.match(SQLiteParser.COMMA)
                        self.state = 1448
                        self.table_or_subquery()
                        self.state = 1453
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass

                elif la_ == 2:
                    self.state = 1454
                    self.join_clause()
                    pass


                self.state = 1457
                self.match(SQLiteParser.CLOSE_PAR)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1459
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1460
                self.select_stmt()
                self.state = 1461
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1466
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
                if la_ == 1:
                    self.state = 1463
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
                    if la_ == 1:
                        self.state = 1462
                        self.match(SQLiteParser.AS)


                    self.state = 1465
                    self.table_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Result_columnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_alias(self):
            return self.getTypedRuleContext(SQLiteParser.Column_aliasContext,0)


        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_result_column

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResult_column" ):
                listener.enterResult_column(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResult_column" ):
                listener.exitResult_column(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitResult_column" ):
                return visitor.visitResult_column(self)
            else:
                return visitor.visitChildren(self)




    def result_column(self):

        localctx = SQLiteParser.Result_columnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_result_column)
        self._la = 0 # Token type
        try:
            self.state = 1482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,207,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1470
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1471
                self.table_name()
                self.state = 1472
                self.match(SQLiteParser.DOT)
                self.state = 1473
                self.match(SQLiteParser.STAR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1475
                self.expr(0)
                self.state = 1480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.AS or _la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL:
                    self.state = 1477
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.AS:
                        self.state = 1476
                        self.match(SQLiteParser.AS)


                    self.state = 1479
                    self.column_alias()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def JOIN(self):
            return self.getToken(SQLiteParser.JOIN, 0)

        def NATURAL(self):
            return self.getToken(SQLiteParser.NATURAL, 0)

        def INNER(self):
            return self.getToken(SQLiteParser.INNER, 0)

        def CROSS(self):
            return self.getToken(SQLiteParser.CROSS, 0)

        def LEFT(self):
            return self.getToken(SQLiteParser.LEFT, 0)

        def OUTER(self):
            return self.getToken(SQLiteParser.OUTER, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_operator" ):
                listener.enterJoin_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_operator" ):
                listener.exitJoin_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_operator" ):
                return visitor.visitJoin_operator(self)
            else:
                return visitor.visitChildren(self)




    def join_operator(self):

        localctx = SQLiteParser.Join_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_join_operator)
        self._la = 0 # Token type
        try:
            self.state = 1497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.COMMA]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1484
                self.match(SQLiteParser.COMMA)
                pass
            elif token in [SQLiteParser.CROSS, SQLiteParser.INNER, SQLiteParser.JOIN, SQLiteParser.LEFT, SQLiteParser.NATURAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.NATURAL:
                    self.state = 1485
                    self.match(SQLiteParser.NATURAL)


                self.state = 1494
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [SQLiteParser.LEFT]:
                    self.state = 1488
                    self.match(SQLiteParser.LEFT)
                    self.state = 1490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==SQLiteParser.OUTER:
                        self.state = 1489
                        self.match(SQLiteParser.OUTER)


                    pass
                elif token in [SQLiteParser.INNER]:
                    self.state = 1492
                    self.match(SQLiteParser.INNER)
                    pass
                elif token in [SQLiteParser.CROSS]:
                    self.state = 1493
                    self.match(SQLiteParser.CROSS)
                    pass
                elif token in [SQLiteParser.JOIN]:
                    pass
                else:
                    pass
                self.state = 1496
                self.match(SQLiteParser.JOIN)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Join_constraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_join_constraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJoin_constraint" ):
                listener.enterJoin_constraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJoin_constraint" ):
                listener.exitJoin_constraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJoin_constraint" ):
                return visitor.visitJoin_constraint(self)
            else:
                return visitor.visitChildren(self)




    def join_constraint(self):

        localctx = SQLiteParser.Join_constraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_join_constraint)
        self._la = 0 # Token type
        try:
            self.state = 1513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.ON]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1499
                self.match(SQLiteParser.ON)
                self.state = 1500
                self.expr(0)
                pass
            elif token in [SQLiteParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1501
                self.match(SQLiteParser.USING)
                self.state = 1502
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1503
                self.column_name()
                self.state = 1508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1504
                    self.match(SQLiteParser.COMMA)
                    self.state = 1505
                    self.column_name()
                    self.state = 1510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1511
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def INTERSECT(self):
            return self.getToken(SQLiteParser.INTERSECT, 0)

        def EXCEPT(self):
            return self.getToken(SQLiteParser.EXCEPT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_compound_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompound_operator" ):
                listener.enterCompound_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompound_operator" ):
                listener.exitCompound_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompound_operator" ):
                return visitor.visitCompound_operator(self)
            else:
                return visitor.visitChildren(self)




    def compound_operator(self):

        localctx = SQLiteParser.Compound_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_compound_operator)
        self._la = 0 # Token type
        try:
            self.state = 1521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.UNION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1515
                self.match(SQLiteParser.UNION)
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ALL:
                    self.state = 1516
                    self.match(SQLiteParser.ALL)


                pass
            elif token in [SQLiteParser.INTERSECT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1519
                self.match(SQLiteParser.INTERSECT)
                pass
            elif token in [SQLiteParser.EXCEPT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1520
                self.match(SQLiteParser.EXCEPT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt" ):
                listener.enterUpdate_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt" ):
                listener.exitUpdate_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt" ):
                return visitor.visitUpdate_stmt(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt(self):

        localctx = SQLiteParser.Update_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_update_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1523
                self.with_clause()


            self.state = 1526
            self.match(SQLiteParser.UPDATE)
            self.state = 1529
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1527
                self.match(SQLiteParser.OR)
                self.state = 1528
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (SQLiteParser.FAIL - 73)) | (1 << (SQLiteParser.IGNORE - 73)) | (1 << (SQLiteParser.REPLACE - 73)) | (1 << (SQLiteParser.ROLLBACK - 73)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1531
            self.qualified_table_name()
            self.state = 1532
            self.match(SQLiteParser.SET)
            self.state = 1535
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.state = 1533
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1534
                self.column_name_list()
                pass


            self.state = 1537
            self.match(SQLiteParser.ASSIGN)
            self.state = 1538
            self.expr(0)
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1539
                self.match(SQLiteParser.COMMA)
                self.state = 1542
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1540
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1541
                    self.column_name_list()
                    pass


                self.state = 1544
                self.match(SQLiteParser.ASSIGN)
                self.state = 1545
                self.expr(0)
                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 1552
                self.match(SQLiteParser.WHERE)
                self.state = 1553
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_name_listContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name_list

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name_list" ):
                listener.enterColumn_name_list(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name_list" ):
                listener.exitColumn_name_list(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name_list" ):
                return visitor.visitColumn_name_list(self)
            else:
                return visitor.visitChildren(self)




    def column_name_list(self):

        localctx = SQLiteParser.Column_name_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_column_name_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1556
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1557
            self.column_name()
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1558
                self.match(SQLiteParser.COMMA)
                self.state = 1559
                self.column_name()
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1565
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Update_stmt_limitedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def qualified_table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Qualified_table_nameContext,0)


        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.ASSIGN)
            else:
                return self.getToken(SQLiteParser.ASSIGN, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def column_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_nameContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_nameContext,i)


        def column_name_list(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Column_name_listContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Column_name_listContext,i)


        def with_clause(self):
            return self.getTypedRuleContext(SQLiteParser.With_clauseContext,0)


        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def limit_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Limit_stmtContext,0)


        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def order_by_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_update_stmt_limited

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdate_stmt_limited" ):
                listener.enterUpdate_stmt_limited(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdate_stmt_limited" ):
                listener.exitUpdate_stmt_limited(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUpdate_stmt_limited" ):
                return visitor.visitUpdate_stmt_limited(self)
            else:
                return visitor.visitChildren(self)




    def update_stmt_limited(self):

        localctx = SQLiteParser.Update_stmt_limitedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_update_stmt_limited)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WITH:
                self.state = 1567
                self.with_clause()


            self.state = 1570
            self.match(SQLiteParser.UPDATE)
            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1571
                self.match(SQLiteParser.OR)
                self.state = 1572
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.ABORT or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (SQLiteParser.FAIL - 73)) | (1 << (SQLiteParser.IGNORE - 73)) | (1 << (SQLiteParser.REPLACE - 73)) | (1 << (SQLiteParser.ROLLBACK - 73)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1575
            self.qualified_table_name()
            self.state = 1576
            self.match(SQLiteParser.SET)
            self.state = 1579
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,225,self._ctx)
            if la_ == 1:
                self.state = 1577
                self.column_name()
                pass

            elif la_ == 2:
                self.state = 1578
                self.column_name_list()
                pass


            self.state = 1581
            self.match(SQLiteParser.ASSIGN)
            self.state = 1582
            self.expr(0)
            self.state = 1593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1583
                self.match(SQLiteParser.COMMA)
                self.state = 1586
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,226,self._ctx)
                if la_ == 1:
                    self.state = 1584
                    self.column_name()
                    pass

                elif la_ == 2:
                    self.state = 1585
                    self.column_name_list()
                    pass


                self.state = 1588
                self.match(SQLiteParser.ASSIGN)
                self.state = 1589
                self.expr(0)
                self.state = 1595
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1598
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.WHERE:
                self.state = 1596
                self.match(SQLiteParser.WHERE)
                self.state = 1597
                self.expr(0)


            self.state = 1604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.LIMIT or _la==SQLiteParser.ORDER:
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1600
                    self.order_by_stmt()


                self.state = 1603
                self.limit_stmt()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Qualified_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def table_name(self):
            return self.getTypedRuleContext(SQLiteParser.Table_nameContext,0)


        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def DOT(self):
            return self.getToken(SQLiteParser.DOT, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def alias(self):
            return self.getTypedRuleContext(SQLiteParser.AliasContext,0)


        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def index_name(self):
            return self.getTypedRuleContext(SQLiteParser.Index_nameContext,0)


        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_qualified_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualified_table_name" ):
                listener.enterQualified_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualified_table_name" ):
                listener.exitQualified_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualified_table_name" ):
                return visitor.visitQualified_table_name(self)
            else:
                return visitor.visitChildren(self)




    def qualified_table_name(self):

        localctx = SQLiteParser.Qualified_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_qualified_table_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1609
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1606
                self.schema_name()
                self.state = 1607
                self.match(SQLiteParser.DOT)


            self.state = 1611
            self.table_name()
            self.state = 1614
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.AS:
                self.state = 1612
                self.match(SQLiteParser.AS)
                self.state = 1613
                self.alias()


            self.state = 1621
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.INDEXED]:
                self.state = 1616
                self.match(SQLiteParser.INDEXED)
                self.state = 1617
                self.match(SQLiteParser.BY)
                self.state = 1618
                self.index_name()
                pass
            elif token in [SQLiteParser.NOT]:
                self.state = 1619
                self.match(SQLiteParser.NOT)
                self.state = 1620
                self.match(SQLiteParser.INDEXED)
                pass
            elif token in [SQLiteParser.EOF, SQLiteParser.SCOL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.ATTACH, SQLiteParser.BEGIN, SQLiteParser.COMMIT, SQLiteParser.CREATE, SQLiteParser.DEFAULT, SQLiteParser.DELETE, SQLiteParser.DETACH, SQLiteParser.DROP, SQLiteParser.END, SQLiteParser.EXPLAIN, SQLiteParser.INSERT, SQLiteParser.LIMIT, SQLiteParser.ORDER, SQLiteParser.PRAGMA, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.REPLACE, SQLiteParser.ROLLBACK, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.UPDATE, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.UNEXPECTED_CHAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vacuum_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VACUUM(self):
            return self.getToken(SQLiteParser.VACUUM, 0)

        def schema_name(self):
            return self.getTypedRuleContext(SQLiteParser.Schema_nameContext,0)


        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def filename(self):
            return self.getTypedRuleContext(SQLiteParser.FilenameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_vacuum_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVacuum_stmt" ):
                listener.enterVacuum_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVacuum_stmt" ):
                listener.exitVacuum_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVacuum_stmt" ):
                return visitor.visitVacuum_stmt(self)
            else:
                return visitor.visitChildren(self)




    def vacuum_stmt(self):

        localctx = SQLiteParser.Vacuum_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vacuum_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1623
            self.match(SQLiteParser.VACUUM)
            self.state = 1625
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                self.state = 1624
                self.schema_name()


            self.state = 1629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.INTO:
                self.state = 1627
                self.match(SQLiteParser.INTO)
                self.state = 1628
                self.filename()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Filter_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILTER(self):
            return self.getToken(SQLiteParser.FILTER, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_filter_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilter_clause" ):
                listener.enterFilter_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilter_clause" ):
                listener.exitFilter_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilter_clause" ):
                return visitor.visitFilter_clause(self)
            else:
                return visitor.visitChildren(self)




    def filter_clause(self):

        localctx = SQLiteParser.Filter_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_filter_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(SQLiteParser.FILTER)
            self.state = 1632
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1633
            self.match(SQLiteParser.WHERE)
            self.state = 1634
            self.expr(0)
            self.state = 1635
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_defnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY)
            else:
                return self.getToken(SQLiteParser.BY, i)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_defn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_defn" ):
                listener.enterWindow_defn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_defn" ):
                listener.exitWindow_defn(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_defn" ):
                return visitor.visitWindow_defn(self)
            else:
                return visitor.visitChildren(self)




    def window_defn(self):

        localctx = SQLiteParser.Window_defnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_window_defn)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1637
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.state = 1638
                self.base_window_name()


            self.state = 1651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.PARTITION:
                self.state = 1641
                self.match(SQLiteParser.PARTITION)
                self.state = 1642
                self.match(SQLiteParser.BY)
                self.state = 1643
                self.expr(0)
                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1644
                    self.match(SQLiteParser.COMMA)
                    self.state = 1645
                    self.expr(0)
                    self.state = 1650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1653
            self.match(SQLiteParser.ORDER)
            self.state = 1654
            self.match(SQLiteParser.BY)
            self.state = 1655
            self.ordering_term()
            self.state = 1660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1656
                self.match(SQLiteParser.COMMA)
                self.state = 1657
                self.ordering_term()
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1664
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.GROUPS - 128)))) != 0):
                self.state = 1663
                self.frame_spec()


            self.state = 1666
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Over_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def base_window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Base_window_nameContext,0)


        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.BY)
            else:
                return self.getToken(SQLiteParser.BY, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def frame_spec(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_specContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_over_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOver_clause" ):
                listener.enterOver_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOver_clause" ):
                listener.exitOver_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOver_clause" ):
                return visitor.visitOver_clause(self)
            else:
                return visitor.visitChildren(self)




    def over_clause(self):

        localctx = SQLiteParser.Over_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_over_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1668
            self.match(SQLiteParser.OVER)
            self.state = 1702
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1669
                self.window_name()
                pass

            elif la_ == 2:
                self.state = 1670
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1672
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,241,self._ctx)
                if la_ == 1:
                    self.state = 1671
                    self.base_window_name()


                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1674
                    self.match(SQLiteParser.PARTITION)
                    self.state = 1675
                    self.match(SQLiteParser.BY)
                    self.state = 1676
                    self.expr(0)
                    self.state = 1681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1677
                        self.match(SQLiteParser.COMMA)
                        self.state = 1678
                        self.expr(0)
                        self.state = 1683
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1686
                    self.match(SQLiteParser.ORDER)
                    self.state = 1687
                    self.match(SQLiteParser.BY)
                    self.state = 1688
                    self.ordering_term()
                    self.state = 1693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==SQLiteParser.COMMA:
                        self.state = 1689
                        self.match(SQLiteParser.COMMA)
                        self.state = 1690
                        self.ordering_term()
                        self.state = 1695
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.GROUPS - 128)))) != 0):
                    self.state = 1698
                    self.frame_spec()


                self.state = 1701
                self.match(SQLiteParser.CLOSE_PAR)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_specContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def EXCLUDE(self):
            return self.getToken(SQLiteParser.EXCLUDE, 0)

        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def TIES(self):
            return self.getToken(SQLiteParser.TIES, 0)

        def NO(self):
            return self.getToken(SQLiteParser.NO, 0)

        def OTHERS(self):
            return self.getToken(SQLiteParser.OTHERS, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_spec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_spec" ):
                listener.enterFrame_spec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_spec" ):
                listener.exitFrame_spec(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrame_spec" ):
                return visitor.visitFrame_spec(self)
            else:
                return visitor.visitChildren(self)




    def frame_spec(self):

        localctx = SQLiteParser.Frame_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_frame_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1704
            self.frame_clause()
            self.state = 1712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.EXCLUDE]:
                self.state = 1705
                self.match(SQLiteParser.EXCLUDE)

                self.state = 1706
                self.match(SQLiteParser.NO)
                self.state = 1707
                self.match(SQLiteParser.OTHERS)
                pass
            elif token in [SQLiteParser.CURRENT]:
                self.state = 1708
                self.match(SQLiteParser.CURRENT)
                self.state = 1709
                self.match(SQLiteParser.ROW)
                pass
            elif token in [SQLiteParser.GROUP]:
                self.state = 1710
                self.match(SQLiteParser.GROUP)
                pass
            elif token in [SQLiteParser.TIES]:
                self.state = 1711
                self.match(SQLiteParser.TIES)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RANGE(self):
            return self.getToken(SQLiteParser.RANGE, 0)

        def ROWS(self):
            return self.getToken(SQLiteParser.ROWS, 0)

        def GROUPS(self):
            return self.getToken(SQLiteParser.GROUPS, 0)

        def frame_single(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_singleContext,0)


        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def frame_left(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_leftContext,0)


        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def frame_right(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_rightContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_clause" ):
                listener.enterFrame_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_clause" ):
                listener.exitFrame_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrame_clause" ):
                return visitor.visitFrame_clause(self)
            else:
                return visitor.visitChildren(self)




    def frame_clause(self):

        localctx = SQLiteParser.Frame_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_frame_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1714
            _la = self._input.LA(1)
            if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.GROUPS - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
            if la_ == 1:
                self.state = 1715
                self.frame_single()
                pass

            elif la_ == 2:
                self.state = 1716
                self.match(SQLiteParser.BETWEEN)
                self.state = 1717
                self.frame_left()
                self.state = 1718
                self.match(SQLiteParser.AND)
                self.state = 1719
                self.frame_right()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_func(self):
            return self.getTypedRuleContext(SQLiteParser.Simple_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_function_invocation" ):
                listener.enterSimple_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_function_invocation" ):
                listener.exitSimple_function_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_function_invocation" ):
                return visitor.visitSimple_function_invocation(self)
            else:
                return visitor.visitChildren(self)




    def simple_function_invocation(self):

        localctx = SQLiteParser.Simple_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_simple_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.simple_func()
            self.state = 1724
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1734
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.REF_FIELD, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1725
                self.expr(0)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1726
                    self.match(SQLiteParser.COMMA)
                    self.state = 1727
                    self.expr(0)
                    self.state = 1732
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1733
                self.match(SQLiteParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1736
            self.match(SQLiteParser.CLOSE_PAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def aggregate_func(self):
            return self.getTypedRuleContext(SQLiteParser.Aggregate_funcContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_function_invocation" ):
                listener.enterAggregate_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_function_invocation" ):
                listener.exitAggregate_function_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_function_invocation" ):
                return visitor.visitAggregate_function_invocation(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_function_invocation(self):

        localctx = SQLiteParser.Aggregate_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_aggregate_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1738
            self.aggregate_func()
            self.state = 1739
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.REF_FIELD, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,252,self._ctx)
                if la_ == 1:
                    self.state = 1740
                    self.match(SQLiteParser.DISTINCT)


                self.state = 1743
                self.expr(0)
                self.state = 1748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1744
                    self.match(SQLiteParser.COMMA)
                    self.state = 1745
                    self.expr(0)
                    self.state = 1750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1751
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1754
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER:
                self.state = 1755
                self.filter_clause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_function_invocationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def window_function(self):
            return self.getTypedRuleContext(SQLiteParser.Window_functionContext,0)


        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def window_defn(self):
            return self.getTypedRuleContext(SQLiteParser.Window_defnContext,0)


        def window_name(self):
            return self.getTypedRuleContext(SQLiteParser.Window_nameContext,0)


        def STAR(self):
            return self.getToken(SQLiteParser.STAR, 0)

        def filter_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Filter_clauseContext,0)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function_invocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function_invocation" ):
                listener.enterWindow_function_invocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function_invocation" ):
                listener.exitWindow_function_invocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_function_invocation" ):
                return visitor.visitWindow_function_invocation(self)
            else:
                return visitor.visitChildren(self)




    def window_function_invocation(self):

        localctx = SQLiteParser.Window_function_invocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_window_function_invocation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.window_function()
            self.state = 1759
            self.match(SQLiteParser.OPEN_PAR)
            self.state = 1769
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.OPEN_PAR, SQLiteParser.PLUS, SQLiteParser.MINUS, SQLiteParser.TILDE, SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE, SQLiteParser.IDENTIFIER, SQLiteParser.NUMERIC_LITERAL, SQLiteParser.REF_FIELD, SQLiteParser.BIND_PARAMETER, SQLiteParser.STRING_LITERAL, SQLiteParser.BLOB_LITERAL]:
                self.state = 1760
                self.expr(0)
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==SQLiteParser.COMMA:
                    self.state = 1761
                    self.match(SQLiteParser.COMMA)
                    self.state = 1762
                    self.expr(0)
                    self.state = 1767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [SQLiteParser.STAR]:
                self.state = 1768
                self.match(SQLiteParser.STAR)
                pass
            elif token in [SQLiteParser.CLOSE_PAR]:
                pass
            else:
                pass
            self.state = 1771
            self.match(SQLiteParser.CLOSE_PAR)
            self.state = 1773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.FILTER:
                self.state = 1772
                self.filter_clause()


            self.state = 1775
            self.match(SQLiteParser.OVER)
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,259,self._ctx)
            if la_ == 1:
                self.state = 1776
                self.window_defn()
                pass

            elif la_ == 2:
                self.state = 1777
                self.window_name()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Common_table_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def common_table_expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Common_table_expressionContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Common_table_expressionContext,i)


        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_common_table_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommon_table_stmt" ):
                listener.enterCommon_table_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommon_table_stmt" ):
                listener.exitCommon_table_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommon_table_stmt" ):
                return visitor.visitCommon_table_stmt(self)
            else:
                return visitor.visitChildren(self)




    def common_table_stmt(self):

        localctx = SQLiteParser.Common_table_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_common_table_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1780
            self.match(SQLiteParser.WITH)
            self.state = 1782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 1781
                self.match(SQLiteParser.RECURSIVE)


            self.state = 1784
            self.common_table_expression()
            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1785
                self.match(SQLiteParser.COMMA)
                self.state = 1786
                self.common_table_expression()
                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def ordering_term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Ordering_termContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Ordering_termContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_stmt" ):
                listener.enterOrder_by_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_stmt" ):
                listener.exitOrder_by_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_stmt" ):
                return visitor.visitOrder_by_stmt(self)
            else:
                return visitor.visitChildren(self)




    def order_by_stmt(self):

        localctx = SQLiteParser.Order_by_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_order_by_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1792
            self.match(SQLiteParser.ORDER)
            self.state = 1793
            self.match(SQLiteParser.BY)
            self.state = 1794
            self.ordering_term()
            self.state = 1799
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1795
                self.match(SQLiteParser.COMMA)
                self.state = 1796
                self.ordering_term()
                self.state = 1801
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Limit_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIMIT(self):
            return self.getToken(SQLiteParser.LIMIT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def OFFSET(self):
            return self.getToken(SQLiteParser.OFFSET, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_limit_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimit_stmt" ):
                listener.enterLimit_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimit_stmt" ):
                listener.exitLimit_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLimit_stmt" ):
                return visitor.visitLimit_stmt(self)
            else:
                return visitor.visitChildren(self)




    def limit_stmt(self):

        localctx = SQLiteParser.Limit_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_limit_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1802
            self.match(SQLiteParser.LIMIT)
            self.state = 1803
            self.expr(0)
            self.state = 1806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET:
                self.state = 1804
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.COMMA or _la==SQLiteParser.OFFSET):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1805
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ordering_termContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def collation_name(self):
            return self.getTypedRuleContext(SQLiteParser.Collation_nameContext,0)


        def asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Asc_descContext,0)


        def NULLS(self):
            return self.getToken(SQLiteParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(SQLiteParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SQLiteParser.LAST, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_ordering_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrdering_term" ):
                listener.enterOrdering_term(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrdering_term" ):
                listener.exitOrdering_term(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrdering_term" ):
                return visitor.visitOrdering_term(self)
            else:
                return visitor.visitChildren(self)




    def ordering_term(self):

        localctx = SQLiteParser.Ordering_termContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_ordering_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1808
            self.expr(0)
            self.state = 1811
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.COLLATE:
                self.state = 1809
                self.match(SQLiteParser.COLLATE)
                self.state = 1810
                self.collation_name()


            self.state = 1814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 1813
                self.asc_desc()


            self.state = 1818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.NULLS:
                self.state = 1816
                self.match(SQLiteParser.NULLS)
                self.state = 1817
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST or _la==SQLiteParser.LAST):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASC(self):
            return self.getToken(SQLiteParser.ASC, 0)

        def DESC(self):
            return self.getToken(SQLiteParser.DESC, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsc_desc" ):
                listener.enterAsc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsc_desc" ):
                listener.exitAsc_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsc_desc" ):
                return visitor.visitAsc_desc(self)
            else:
                return visitor.visitChildren(self)




    def asc_desc(self):

        localctx = SQLiteParser.Asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1820
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.ASC or _la==SQLiteParser.DESC):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_leftContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_left

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_left" ):
                listener.enterFrame_left(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_left" ):
                listener.exitFrame_left(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrame_left" ):
                return visitor.visitFrame_left(self)
            else:
                return visitor.visitChildren(self)




    def frame_left(self):

        localctx = SQLiteParser.Frame_leftContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_frame_left)
        try:
            self.state = 1832
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,267,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1822
                self.expr(0)
                self.state = 1823
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1825
                self.expr(0)
                self.state = 1826
                self.match(SQLiteParser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1828
                self.match(SQLiteParser.CURRENT)
                self.state = 1829
                self.match(SQLiteParser.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1830
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1831
                self.match(SQLiteParser.PRECEDING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_rightContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_right

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_right" ):
                listener.enterFrame_right(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_right" ):
                listener.exitFrame_right(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrame_right" ):
                return visitor.visitFrame_right(self)
            else:
                return visitor.visitChildren(self)




    def frame_right(self):

        localctx = SQLiteParser.Frame_rightContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_frame_right)
        try:
            self.state = 1844
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1834
                self.expr(0)
                self.state = 1835
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1837
                self.expr(0)
                self.state = 1838
                self.match(SQLiteParser.FOLLOWING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1840
                self.match(SQLiteParser.CURRENT)
                self.state = 1841
                self.match(SQLiteParser.ROW)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1842
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1843
                self.match(SQLiteParser.FOLLOWING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Frame_singleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_frame_single

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrame_single" ):
                listener.enterFrame_single(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrame_single" ):
                listener.exitFrame_single(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrame_single" ):
                return visitor.visitFrame_single(self)
            else:
                return visitor.visitChildren(self)




    def frame_single(self):

        localctx = SQLiteParser.Frame_singleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_frame_single)
        try:
            self.state = 1853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1846
                self.expr(0)
                self.state = 1847
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1849
                self.match(SQLiteParser.UNBOUNDED)
                self.state = 1850
                self.match(SQLiteParser.PRECEDING)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1851
                self.match(SQLiteParser.CURRENT)
                self.state = 1852
                self.match(SQLiteParser.ROW)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_functionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.OPEN_PAR)
            else:
                return self.getToken(SQLiteParser.OPEN_PAR, i)

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def CLOSE_PAR(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.CLOSE_PAR)
            else:
                return self.getToken(SQLiteParser.CLOSE_PAR, i)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def FIRST_VALUE(self):
            return self.getToken(SQLiteParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(SQLiteParser.LAST_VALUE, 0)

        def partition_by(self):
            return self.getTypedRuleContext(SQLiteParser.Partition_byContext,0)


        def frame_clause(self):
            return self.getTypedRuleContext(SQLiteParser.Frame_clauseContext,0)


        def CUME_DIST(self):
            return self.getToken(SQLiteParser.CUME_DIST, 0)

        def PERCENT_RANK(self):
            return self.getToken(SQLiteParser.PERCENT_RANK, 0)

        def order_by_expr(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_exprContext,0)


        def DENSE_RANK(self):
            return self.getToken(SQLiteParser.DENSE_RANK, 0)

        def RANK(self):
            return self.getToken(SQLiteParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SQLiteParser.ROW_NUMBER, 0)

        def LAG(self):
            return self.getToken(SQLiteParser.LAG, 0)

        def LEAD(self):
            return self.getToken(SQLiteParser.LEAD, 0)

        def offset(self):
            return self.getTypedRuleContext(SQLiteParser.OffsetContext,0)


        def default_value(self):
            return self.getTypedRuleContext(SQLiteParser.Default_valueContext,0)


        def NTH_VALUE(self):
            return self.getToken(SQLiteParser.NTH_VALUE, 0)

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def NTILE(self):
            return self.getToken(SQLiteParser.NTILE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_window_function

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_function" ):
                listener.enterWindow_function(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_function" ):
                listener.exitWindow_function(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_function" ):
                return visitor.visitWindow_function(self)
            else:
                return visitor.visitChildren(self)




    def window_function(self):

        localctx = SQLiteParser.Window_functionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_window_function)
        self._la = 0 # Token type
        try:
            self.state = 1940
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.FIRST_VALUE, SQLiteParser.LAST_VALUE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1855
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.FIRST_VALUE or _la==SQLiteParser.LAST_VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1856
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1857
                self.expr(0)
                self.state = 1858
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1859
                self.match(SQLiteParser.OVER)
                self.state = 1860
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1861
                    self.partition_by()


                self.state = 1864
                self.order_by_expr_asc_desc()
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.GROUPS - 128)))) != 0):
                    self.state = 1865
                    self.frame_clause()


                self.state = 1868
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.CUME_DIST, SQLiteParser.PERCENT_RANK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1870
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.CUME_DIST or _la==SQLiteParser.PERCENT_RANK):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1871
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1872
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1873
                self.match(SQLiteParser.OVER)
                self.state = 1874
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1875
                    self.partition_by()


                self.state = 1879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ORDER:
                    self.state = 1878
                    self.order_by_expr()


                self.state = 1881
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.DENSE_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1882
                _la = self._input.LA(1)
                if not(((((_la - 160)) & ~0x3f) == 0 and ((1 << (_la - 160)) & ((1 << (SQLiteParser.DENSE_RANK - 160)) | (1 << (SQLiteParser.RANK - 160)) | (1 << (SQLiteParser.ROW_NUMBER - 160)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1883
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1884
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1885
                self.match(SQLiteParser.OVER)
                self.state = 1886
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1887
                    self.partition_by()


                self.state = 1890
                self.order_by_expr_asc_desc()
                self.state = 1891
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.LAG, SQLiteParser.LEAD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1893
                _la = self._input.LA(1)
                if not(_la==SQLiteParser.LAG or _la==SQLiteParser.LEAD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1894
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1895
                self.expr(0)
                self.state = 1897
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
                if la_ == 1:
                    self.state = 1896
                    self.offset()


                self.state = 1900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.COMMA:
                    self.state = 1899
                    self.default_value()


                self.state = 1902
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1903
                self.match(SQLiteParser.OVER)
                self.state = 1904
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1905
                    self.partition_by()


                self.state = 1908
                self.order_by_expr_asc_desc()
                self.state = 1909
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTH_VALUE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1911
                self.match(SQLiteParser.NTH_VALUE)
                self.state = 1912
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1913
                self.expr(0)
                self.state = 1914
                self.match(SQLiteParser.COMMA)
                self.state = 1915
                self.signed_number()
                self.state = 1916
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1917
                self.match(SQLiteParser.OVER)
                self.state = 1918
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1919
                    self.partition_by()


                self.state = 1922
                self.order_by_expr_asc_desc()
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.GROUPS - 128)))) != 0):
                    self.state = 1923
                    self.frame_clause()


                self.state = 1926
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            elif token in [SQLiteParser.NTILE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1928
                self.match(SQLiteParser.NTILE)
                self.state = 1929
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1930
                self.expr(0)
                self.state = 1931
                self.match(SQLiteParser.CLOSE_PAR)
                self.state = 1932
                self.match(SQLiteParser.OVER)
                self.state = 1933
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 1935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.PARTITION:
                    self.state = 1934
                    self.partition_by()


                self.state = 1937
                self.order_by_expr_asc_desc()
                self.state = 1938
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OffsetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_offset

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOffset" ):
                listener.enterOffset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOffset" ):
                listener.exitOffset(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOffset" ):
                return visitor.visitOffset(self)
            else:
                return visitor.visitChildren(self)




    def offset(self):

        localctx = SQLiteParser.OffsetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_offset)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.match(SQLiteParser.COMMA)
            self.state = 1943
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Default_valueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self):
            return self.getToken(SQLiteParser.COMMA, 0)

        def signed_number(self):
            return self.getTypedRuleContext(SQLiteParser.Signed_numberContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_default_value

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefault_value" ):
                listener.enterDefault_value(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefault_value" ):
                listener.exitDefault_value(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDefault_value" ):
                return visitor.visitDefault_value(self)
            else:
                return visitor.visitChildren(self)




    def default_value(self):

        localctx = SQLiteParser.Default_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_default_value)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1945
            self.match(SQLiteParser.COMMA)
            self.state = 1946
            self.signed_number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Partition_byContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_partition_by

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartition_by" ):
                listener.enterPartition_by(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartition_by" ):
                listener.exitPartition_by(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPartition_by" ):
                return visitor.visitPartition_by(self)
            else:
                return visitor.visitChildren(self)




    def partition_by(self):

        localctx = SQLiteParser.Partition_byContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_partition_by)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.match(SQLiteParser.PARTITION)
            self.state = 1949
            self.match(SQLiteParser.BY)
            self.state = 1951 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1950
                    self.expr(0)

                else:
                    raise NoViableAltException(self)
                self.state = 1953 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,282,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr" ):
                listener.enterOrder_by_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr" ):
                listener.exitOrder_by_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_expr" ):
                return visitor.visitOrder_by_expr(self)
            else:
                return visitor.visitChildren(self)




    def order_by_expr(self):

        localctx = SQLiteParser.Order_by_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_order_by_expr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1955
            self.match(SQLiteParser.ORDER)
            self.state = 1956
            self.match(SQLiteParser.BY)
            self.state = 1958 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1957
                self.expr(0)
                self.state = 1960 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.OPEN_PAR) | (1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE) | (1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH) | (1 << SQLiteParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.DROP - 64)) | (1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)) | (1 << (SQLiteParser.ROW - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)) | (1 << (SQLiteParser.IDENTIFIER - 128)) | (1 << (SQLiteParser.NUMERIC_LITERAL - 128)) | (1 << (SQLiteParser.REF_FIELD - 128)) | (1 << (SQLiteParser.BIND_PARAMETER - 128)) | (1 << (SQLiteParser.STRING_LITERAL - 128)) | (1 << (SQLiteParser.BLOB_LITERAL - 128)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Order_by_expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def order_by_expr_asc_desc(self):
            return self.getTypedRuleContext(SQLiteParser.Order_by_expr_asc_descContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_order_by_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrder_by_expr_asc_desc" ):
                listener.enterOrder_by_expr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrder_by_expr_asc_desc" ):
                listener.exitOrder_by_expr_asc_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOrder_by_expr_asc_desc" ):
                return visitor.visitOrder_by_expr_asc_desc(self)
            else:
                return visitor.visitChildren(self)




    def order_by_expr_asc_desc(self):

        localctx = SQLiteParser.Order_by_expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_order_by_expr_asc_desc)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1962
            self.match(SQLiteParser.ORDER)
            self.state = 1963
            self.match(SQLiteParser.BY)
            self.state = 1964
            self.order_by_expr_asc_desc()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Expr_asc_descContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.ExprContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.ExprContext,i)


        def asc_desc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLiteParser.Asc_descContext)
            else:
                return self.getTypedRuleContext(SQLiteParser.Asc_descContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(SQLiteParser.COMMA)
            else:
                return self.getToken(SQLiteParser.COMMA, i)

        def getRuleIndex(self):
            return SQLiteParser.RULE_expr_asc_desc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_asc_desc" ):
                listener.enterExpr_asc_desc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_asc_desc" ):
                listener.exitExpr_asc_desc(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_asc_desc" ):
                return visitor.visitExpr_asc_desc(self)
            else:
                return visitor.visitChildren(self)




    def expr_asc_desc(self):

        localctx = SQLiteParser.Expr_asc_descContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_expr_asc_desc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.expr(0)
            self.state = 1968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                self.state = 1967
                self.asc_desc()


            self.state = 1977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==SQLiteParser.COMMA:
                self.state = 1970
                self.match(SQLiteParser.COMMA)
                self.state = 1971
                self.expr(0)
                self.state = 1973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==SQLiteParser.ASC or _la==SQLiteParser.DESC:
                    self.state = 1972
                    self.asc_desc()


                self.state = 1979
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Initial_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_initial_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitial_select" ):
                listener.enterInitial_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitial_select" ):
                listener.exitInitial_select(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitial_select" ):
                return visitor.visitInitial_select(self)
            else:
                return visitor.visitChildren(self)




    def initial_select(self):

        localctx = SQLiteParser.Initial_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_initial_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1980
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Recursive_selectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def select_stmt(self):
            return self.getTypedRuleContext(SQLiteParser.Select_stmtContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_recursive_select

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecursive_select" ):
                listener.enterRecursive_select(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecursive_select" ):
                listener.exitRecursive_select(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecursive_select" ):
                return visitor.visitRecursive_select(self)
            else:
                return visitor.visitChildren(self)




    def recursive_select(self):

        localctx = SQLiteParser.Recursive_selectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_recursive_select)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1982
            self.select_stmt()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Unary_operatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(SQLiteParser.MINUS, 0)

        def PLUS(self):
            return self.getToken(SQLiteParser.PLUS, 0)

        def TILDE(self):
            return self.getToken(SQLiteParser.TILDE, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_unary_operator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnary_operator" ):
                listener.enterUnary_operator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnary_operator" ):
                listener.exitUnary_operator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnary_operator" ):
                return visitor.visitUnary_operator(self)
            else:
                return visitor.visitChildren(self)




    def unary_operator(self):

        localctx = SQLiteParser.Unary_operatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_unary_operator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1984
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.PLUS) | (1 << SQLiteParser.MINUS) | (1 << SQLiteParser.TILDE))) != 0) or _la==SQLiteParser.NOT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Error_messageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_error_message

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterError_message" ):
                listener.enterError_message(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitError_message" ):
                listener.exitError_message(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitError_message" ):
                return visitor.visitError_message(self)
            else:
                return visitor.visitChildren(self)




    def error_message(self):

        localctx = SQLiteParser.Error_messageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_error_message)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1986
            self.match(SQLiteParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_argumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self):
            return self.getTypedRuleContext(SQLiteParser.ExprContext,0)


        def column_def(self):
            return self.getTypedRuleContext(SQLiteParser.Column_defContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_argument" ):
                listener.enterModule_argument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_argument" ):
                listener.exitModule_argument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule_argument" ):
                return visitor.visitModule_argument(self)
            else:
                return visitor.visitChildren(self)




    def module_argument(self):

        localctx = SQLiteParser.Module_argumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_module_argument)
        try:
            self.state = 1990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1988
                self.expr(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1989
                self.column_def()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_column_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_alias" ):
                listener.enterColumn_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_alias" ):
                listener.exitColumn_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_alias" ):
                return visitor.visitColumn_alias(self)
            else:
                return visitor.visitChildren(self)




    def column_alias(self):

        localctx = SQLiteParser.Column_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_column_alias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1992
            _la = self._input.LA(1)
            if not(_la==SQLiteParser.IDENTIFIER or _la==SQLiteParser.STRING_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABORT(self):
            return self.getToken(SQLiteParser.ABORT, 0)

        def ACTION(self):
            return self.getToken(SQLiteParser.ACTION, 0)

        def ADD(self):
            return self.getToken(SQLiteParser.ADD, 0)

        def AFTER(self):
            return self.getToken(SQLiteParser.AFTER, 0)

        def ALL(self):
            return self.getToken(SQLiteParser.ALL, 0)

        def ALTER(self):
            return self.getToken(SQLiteParser.ALTER, 0)

        def ANALYZE(self):
            return self.getToken(SQLiteParser.ANALYZE, 0)

        def AND(self):
            return self.getToken(SQLiteParser.AND, 0)

        def AS(self):
            return self.getToken(SQLiteParser.AS, 0)

        def ASC(self):
            return self.getToken(SQLiteParser.ASC, 0)

        def ATTACH(self):
            return self.getToken(SQLiteParser.ATTACH, 0)

        def AUTOINCREMENT(self):
            return self.getToken(SQLiteParser.AUTOINCREMENT, 0)

        def BEFORE(self):
            return self.getToken(SQLiteParser.BEFORE, 0)

        def BEGIN(self):
            return self.getToken(SQLiteParser.BEGIN, 0)

        def BETWEEN(self):
            return self.getToken(SQLiteParser.BETWEEN, 0)

        def BY(self):
            return self.getToken(SQLiteParser.BY, 0)

        def CASCADE(self):
            return self.getToken(SQLiteParser.CASCADE, 0)

        def CASE(self):
            return self.getToken(SQLiteParser.CASE, 0)

        def CAST(self):
            return self.getToken(SQLiteParser.CAST, 0)

        def CHECK(self):
            return self.getToken(SQLiteParser.CHECK, 0)

        def COLLATE(self):
            return self.getToken(SQLiteParser.COLLATE, 0)

        def COLUMN(self):
            return self.getToken(SQLiteParser.COLUMN, 0)

        def COMMIT(self):
            return self.getToken(SQLiteParser.COMMIT, 0)

        def CONFLICT(self):
            return self.getToken(SQLiteParser.CONFLICT, 0)

        def CONSTRAINT(self):
            return self.getToken(SQLiteParser.CONSTRAINT, 0)

        def CREATE(self):
            return self.getToken(SQLiteParser.CREATE, 0)

        def CROSS(self):
            return self.getToken(SQLiteParser.CROSS, 0)

        def CURRENT_DATE(self):
            return self.getToken(SQLiteParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(SQLiteParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(SQLiteParser.CURRENT_TIMESTAMP, 0)

        def DATABASE(self):
            return self.getToken(SQLiteParser.DATABASE, 0)

        def DEFAULT(self):
            return self.getToken(SQLiteParser.DEFAULT, 0)

        def DEFERRABLE(self):
            return self.getToken(SQLiteParser.DEFERRABLE, 0)

        def DEFERRED(self):
            return self.getToken(SQLiteParser.DEFERRED, 0)

        def DELETE(self):
            return self.getToken(SQLiteParser.DELETE, 0)

        def DESC(self):
            return self.getToken(SQLiteParser.DESC, 0)

        def DETACH(self):
            return self.getToken(SQLiteParser.DETACH, 0)

        def DISTINCT(self):
            return self.getToken(SQLiteParser.DISTINCT, 0)

        def DROP(self):
            return self.getToken(SQLiteParser.DROP, 0)

        def EACH(self):
            return self.getToken(SQLiteParser.EACH, 0)

        def ELSE(self):
            return self.getToken(SQLiteParser.ELSE, 0)

        def END(self):
            return self.getToken(SQLiteParser.END, 0)

        def ESCAPE(self):
            return self.getToken(SQLiteParser.ESCAPE, 0)

        def EXCEPT(self):
            return self.getToken(SQLiteParser.EXCEPT, 0)

        def EXCLUSIVE(self):
            return self.getToken(SQLiteParser.EXCLUSIVE, 0)

        def EXISTS(self):
            return self.getToken(SQLiteParser.EXISTS, 0)

        def EXPLAIN(self):
            return self.getToken(SQLiteParser.EXPLAIN, 0)

        def FAIL(self):
            return self.getToken(SQLiteParser.FAIL, 0)

        def FOR(self):
            return self.getToken(SQLiteParser.FOR, 0)

        def FOREIGN(self):
            return self.getToken(SQLiteParser.FOREIGN, 0)

        def FROM(self):
            return self.getToken(SQLiteParser.FROM, 0)

        def FULL(self):
            return self.getToken(SQLiteParser.FULL, 0)

        def GLOB(self):
            return self.getToken(SQLiteParser.GLOB, 0)

        def GROUP(self):
            return self.getToken(SQLiteParser.GROUP, 0)

        def HAVING(self):
            return self.getToken(SQLiteParser.HAVING, 0)

        def IF(self):
            return self.getToken(SQLiteParser.IF, 0)

        def IGNORE(self):
            return self.getToken(SQLiteParser.IGNORE, 0)

        def IMMEDIATE(self):
            return self.getToken(SQLiteParser.IMMEDIATE, 0)

        def IN(self):
            return self.getToken(SQLiteParser.IN, 0)

        def INDEX(self):
            return self.getToken(SQLiteParser.INDEX, 0)

        def INDEXED(self):
            return self.getToken(SQLiteParser.INDEXED, 0)

        def INITIALLY(self):
            return self.getToken(SQLiteParser.INITIALLY, 0)

        def INNER(self):
            return self.getToken(SQLiteParser.INNER, 0)

        def INSERT(self):
            return self.getToken(SQLiteParser.INSERT, 0)

        def INSTEAD(self):
            return self.getToken(SQLiteParser.INSTEAD, 0)

        def INTERSECT(self):
            return self.getToken(SQLiteParser.INTERSECT, 0)

        def INTO(self):
            return self.getToken(SQLiteParser.INTO, 0)

        def IS(self):
            return self.getToken(SQLiteParser.IS, 0)

        def ISNULL(self):
            return self.getToken(SQLiteParser.ISNULL, 0)

        def JOIN(self):
            return self.getToken(SQLiteParser.JOIN, 0)

        def KEY(self):
            return self.getToken(SQLiteParser.KEY, 0)

        def LEFT(self):
            return self.getToken(SQLiteParser.LEFT, 0)

        def LIKE(self):
            return self.getToken(SQLiteParser.LIKE, 0)

        def LIMIT(self):
            return self.getToken(SQLiteParser.LIMIT, 0)

        def MATCH(self):
            return self.getToken(SQLiteParser.MATCH, 0)

        def NATURAL(self):
            return self.getToken(SQLiteParser.NATURAL, 0)

        def NO(self):
            return self.getToken(SQLiteParser.NO, 0)

        def NOT(self):
            return self.getToken(SQLiteParser.NOT, 0)

        def NOTNULL(self):
            return self.getToken(SQLiteParser.NOTNULL, 0)

        def NULL_(self):
            return self.getToken(SQLiteParser.NULL_, 0)

        def OF(self):
            return self.getToken(SQLiteParser.OF, 0)

        def OFFSET(self):
            return self.getToken(SQLiteParser.OFFSET, 0)

        def ON(self):
            return self.getToken(SQLiteParser.ON, 0)

        def OR(self):
            return self.getToken(SQLiteParser.OR, 0)

        def ORDER(self):
            return self.getToken(SQLiteParser.ORDER, 0)

        def OUTER(self):
            return self.getToken(SQLiteParser.OUTER, 0)

        def PLAN(self):
            return self.getToken(SQLiteParser.PLAN, 0)

        def PRAGMA(self):
            return self.getToken(SQLiteParser.PRAGMA, 0)

        def PRIMARY(self):
            return self.getToken(SQLiteParser.PRIMARY, 0)

        def QUERY(self):
            return self.getToken(SQLiteParser.QUERY, 0)

        def RAISE(self):
            return self.getToken(SQLiteParser.RAISE, 0)

        def RECURSIVE(self):
            return self.getToken(SQLiteParser.RECURSIVE, 0)

        def REFERENCES(self):
            return self.getToken(SQLiteParser.REFERENCES, 0)

        def REGEXP(self):
            return self.getToken(SQLiteParser.REGEXP, 0)

        def REINDEX(self):
            return self.getToken(SQLiteParser.REINDEX, 0)

        def RELEASE(self):
            return self.getToken(SQLiteParser.RELEASE, 0)

        def RENAME(self):
            return self.getToken(SQLiteParser.RENAME, 0)

        def REPLACE(self):
            return self.getToken(SQLiteParser.REPLACE, 0)

        def RESTRICT(self):
            return self.getToken(SQLiteParser.RESTRICT, 0)

        def RIGHT(self):
            return self.getToken(SQLiteParser.RIGHT, 0)

        def ROLLBACK(self):
            return self.getToken(SQLiteParser.ROLLBACK, 0)

        def ROW(self):
            return self.getToken(SQLiteParser.ROW, 0)

        def ROWS(self):
            return self.getToken(SQLiteParser.ROWS, 0)

        def SAVEPOINT(self):
            return self.getToken(SQLiteParser.SAVEPOINT, 0)

        def SELECT(self):
            return self.getToken(SQLiteParser.SELECT, 0)

        def SET(self):
            return self.getToken(SQLiteParser.SET, 0)

        def TABLE(self):
            return self.getToken(SQLiteParser.TABLE, 0)

        def TEMP(self):
            return self.getToken(SQLiteParser.TEMP, 0)

        def TEMPORARY(self):
            return self.getToken(SQLiteParser.TEMPORARY, 0)

        def THEN(self):
            return self.getToken(SQLiteParser.THEN, 0)

        def TO(self):
            return self.getToken(SQLiteParser.TO, 0)

        def TRANSACTION(self):
            return self.getToken(SQLiteParser.TRANSACTION, 0)

        def TRIGGER(self):
            return self.getToken(SQLiteParser.TRIGGER, 0)

        def UNION(self):
            return self.getToken(SQLiteParser.UNION, 0)

        def UNIQUE(self):
            return self.getToken(SQLiteParser.UNIQUE, 0)

        def UPDATE(self):
            return self.getToken(SQLiteParser.UPDATE, 0)

        def USING(self):
            return self.getToken(SQLiteParser.USING, 0)

        def VACUUM(self):
            return self.getToken(SQLiteParser.VACUUM, 0)

        def VALUES(self):
            return self.getToken(SQLiteParser.VALUES, 0)

        def VIEW(self):
            return self.getToken(SQLiteParser.VIEW, 0)

        def VIRTUAL(self):
            return self.getToken(SQLiteParser.VIRTUAL, 0)

        def WHEN(self):
            return self.getToken(SQLiteParser.WHEN, 0)

        def WHERE(self):
            return self.getToken(SQLiteParser.WHERE, 0)

        def WITH(self):
            return self.getToken(SQLiteParser.WITH, 0)

        def WITHOUT(self):
            return self.getToken(SQLiteParser.WITHOUT, 0)

        def FIRST_VALUE(self):
            return self.getToken(SQLiteParser.FIRST_VALUE, 0)

        def OVER(self):
            return self.getToken(SQLiteParser.OVER, 0)

        def PARTITION(self):
            return self.getToken(SQLiteParser.PARTITION, 0)

        def RANGE(self):
            return self.getToken(SQLiteParser.RANGE, 0)

        def PRECEDING(self):
            return self.getToken(SQLiteParser.PRECEDING, 0)

        def UNBOUNDED(self):
            return self.getToken(SQLiteParser.UNBOUNDED, 0)

        def CURRENT(self):
            return self.getToken(SQLiteParser.CURRENT, 0)

        def FOLLOWING(self):
            return self.getToken(SQLiteParser.FOLLOWING, 0)

        def CUME_DIST(self):
            return self.getToken(SQLiteParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(SQLiteParser.DENSE_RANK, 0)

        def LAG(self):
            return self.getToken(SQLiteParser.LAG, 0)

        def LAST_VALUE(self):
            return self.getToken(SQLiteParser.LAST_VALUE, 0)

        def LEAD(self):
            return self.getToken(SQLiteParser.LEAD, 0)

        def NTH_VALUE(self):
            return self.getToken(SQLiteParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(SQLiteParser.NTILE, 0)

        def PERCENT_RANK(self):
            return self.getToken(SQLiteParser.PERCENT_RANK, 0)

        def RANK(self):
            return self.getToken(SQLiteParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(SQLiteParser.ROW_NUMBER, 0)

        def GENERATED(self):
            return self.getToken(SQLiteParser.GENERATED, 0)

        def ALWAYS(self):
            return self.getToken(SQLiteParser.ALWAYS, 0)

        def STORED(self):
            return self.getToken(SQLiteParser.STORED, 0)

        def TRUE_(self):
            return self.getToken(SQLiteParser.TRUE_, 0)

        def FALSE_(self):
            return self.getToken(SQLiteParser.FALSE_, 0)

        def WINDOW(self):
            return self.getToken(SQLiteParser.WINDOW, 0)

        def NULLS(self):
            return self.getToken(SQLiteParser.NULLS, 0)

        def FIRST(self):
            return self.getToken(SQLiteParser.FIRST, 0)

        def LAST(self):
            return self.getToken(SQLiteParser.LAST, 0)

        def FILTER(self):
            return self.getToken(SQLiteParser.FILTER, 0)

        def GROUPS(self):
            return self.getToken(SQLiteParser.GROUPS, 0)

        def EXCLUDE(self):
            return self.getToken(SQLiteParser.EXCLUDE, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_keyword

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeyword" ):
                listener.enterKeyword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeyword" ):
                listener.exitKeyword(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKeyword" ):
                return visitor.visitKeyword(self)
            else:
                return visitor.visitChildren(self)




    def keyword(self):

        localctx = SQLiteParser.KeywordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_keyword)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1994
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << SQLiteParser.ABORT) | (1 << SQLiteParser.ACTION) | (1 << SQLiteParser.ADD) | (1 << SQLiteParser.AFTER) | (1 << SQLiteParser.ALL) | (1 << SQLiteParser.ALTER) | (1 << SQLiteParser.ANALYZE) | (1 << SQLiteParser.AND) | (1 << SQLiteParser.AS) | (1 << SQLiteParser.ASC) | (1 << SQLiteParser.ATTACH) | (1 << SQLiteParser.AUTOINCREMENT) | (1 << SQLiteParser.BEFORE) | (1 << SQLiteParser.BEGIN) | (1 << SQLiteParser.BETWEEN) | (1 << SQLiteParser.BY) | (1 << SQLiteParser.CASCADE) | (1 << SQLiteParser.CASE) | (1 << SQLiteParser.CAST) | (1 << SQLiteParser.CHECK) | (1 << SQLiteParser.COLLATE) | (1 << SQLiteParser.COLUMN) | (1 << SQLiteParser.COMMIT) | (1 << SQLiteParser.CONFLICT) | (1 << SQLiteParser.CONSTRAINT) | (1 << SQLiteParser.CREATE) | (1 << SQLiteParser.CROSS) | (1 << SQLiteParser.CURRENT_DATE) | (1 << SQLiteParser.CURRENT_TIME) | (1 << SQLiteParser.CURRENT_TIMESTAMP) | (1 << SQLiteParser.DATABASE) | (1 << SQLiteParser.DEFAULT) | (1 << SQLiteParser.DEFERRABLE) | (1 << SQLiteParser.DEFERRED) | (1 << SQLiteParser.DELETE) | (1 << SQLiteParser.DESC) | (1 << SQLiteParser.DETACH) | (1 << SQLiteParser.DISTINCT))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (SQLiteParser.DROP - 64)) | (1 << (SQLiteParser.EACH - 64)) | (1 << (SQLiteParser.ELSE - 64)) | (1 << (SQLiteParser.END - 64)) | (1 << (SQLiteParser.ESCAPE - 64)) | (1 << (SQLiteParser.EXCEPT - 64)) | (1 << (SQLiteParser.EXCLUSIVE - 64)) | (1 << (SQLiteParser.EXISTS - 64)) | (1 << (SQLiteParser.EXPLAIN - 64)) | (1 << (SQLiteParser.FAIL - 64)) | (1 << (SQLiteParser.FOR - 64)) | (1 << (SQLiteParser.FOREIGN - 64)) | (1 << (SQLiteParser.FROM - 64)) | (1 << (SQLiteParser.FULL - 64)) | (1 << (SQLiteParser.GLOB - 64)) | (1 << (SQLiteParser.GROUP - 64)) | (1 << (SQLiteParser.HAVING - 64)) | (1 << (SQLiteParser.IF - 64)) | (1 << (SQLiteParser.IGNORE - 64)) | (1 << (SQLiteParser.IMMEDIATE - 64)) | (1 << (SQLiteParser.IN - 64)) | (1 << (SQLiteParser.INDEX - 64)) | (1 << (SQLiteParser.INDEXED - 64)) | (1 << (SQLiteParser.INITIALLY - 64)) | (1 << (SQLiteParser.INNER - 64)) | (1 << (SQLiteParser.INSERT - 64)) | (1 << (SQLiteParser.INSTEAD - 64)) | (1 << (SQLiteParser.INTERSECT - 64)) | (1 << (SQLiteParser.INTO - 64)) | (1 << (SQLiteParser.IS - 64)) | (1 << (SQLiteParser.ISNULL - 64)) | (1 << (SQLiteParser.JOIN - 64)) | (1 << (SQLiteParser.KEY - 64)) | (1 << (SQLiteParser.LEFT - 64)) | (1 << (SQLiteParser.LIKE - 64)) | (1 << (SQLiteParser.LIMIT - 64)) | (1 << (SQLiteParser.MATCH - 64)) | (1 << (SQLiteParser.NATURAL - 64)) | (1 << (SQLiteParser.NO - 64)) | (1 << (SQLiteParser.NOT - 64)) | (1 << (SQLiteParser.NOTNULL - 64)) | (1 << (SQLiteParser.NULL_ - 64)) | (1 << (SQLiteParser.OF - 64)) | (1 << (SQLiteParser.OFFSET - 64)) | (1 << (SQLiteParser.ON - 64)) | (1 << (SQLiteParser.OR - 64)) | (1 << (SQLiteParser.ORDER - 64)) | (1 << (SQLiteParser.OUTER - 64)) | (1 << (SQLiteParser.PLAN - 64)) | (1 << (SQLiteParser.PRAGMA - 64)) | (1 << (SQLiteParser.PRIMARY - 64)) | (1 << (SQLiteParser.QUERY - 64)) | (1 << (SQLiteParser.RAISE - 64)) | (1 << (SQLiteParser.RECURSIVE - 64)) | (1 << (SQLiteParser.REFERENCES - 64)) | (1 << (SQLiteParser.REGEXP - 64)) | (1 << (SQLiteParser.REINDEX - 64)) | (1 << (SQLiteParser.RELEASE - 64)) | (1 << (SQLiteParser.RENAME - 64)) | (1 << (SQLiteParser.REPLACE - 64)) | (1 << (SQLiteParser.RESTRICT - 64)) | (1 << (SQLiteParser.RIGHT - 64)) | (1 << (SQLiteParser.ROLLBACK - 64)) | (1 << (SQLiteParser.ROW - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (SQLiteParser.ROWS - 128)) | (1 << (SQLiteParser.SAVEPOINT - 128)) | (1 << (SQLiteParser.SELECT - 128)) | (1 << (SQLiteParser.SET - 128)) | (1 << (SQLiteParser.TABLE - 128)) | (1 << (SQLiteParser.TEMP - 128)) | (1 << (SQLiteParser.TEMPORARY - 128)) | (1 << (SQLiteParser.THEN - 128)) | (1 << (SQLiteParser.TO - 128)) | (1 << (SQLiteParser.TRANSACTION - 128)) | (1 << (SQLiteParser.TRIGGER - 128)) | (1 << (SQLiteParser.UNION - 128)) | (1 << (SQLiteParser.UNIQUE - 128)) | (1 << (SQLiteParser.UPDATE - 128)) | (1 << (SQLiteParser.USING - 128)) | (1 << (SQLiteParser.VACUUM - 128)) | (1 << (SQLiteParser.VALUES - 128)) | (1 << (SQLiteParser.VIEW - 128)) | (1 << (SQLiteParser.VIRTUAL - 128)) | (1 << (SQLiteParser.WHEN - 128)) | (1 << (SQLiteParser.WHERE - 128)) | (1 << (SQLiteParser.WITH - 128)) | (1 << (SQLiteParser.WITHOUT - 128)) | (1 << (SQLiteParser.FIRST_VALUE - 128)) | (1 << (SQLiteParser.OVER - 128)) | (1 << (SQLiteParser.PARTITION - 128)) | (1 << (SQLiteParser.RANGE - 128)) | (1 << (SQLiteParser.PRECEDING - 128)) | (1 << (SQLiteParser.UNBOUNDED - 128)) | (1 << (SQLiteParser.CURRENT - 128)) | (1 << (SQLiteParser.FOLLOWING - 128)) | (1 << (SQLiteParser.CUME_DIST - 128)) | (1 << (SQLiteParser.DENSE_RANK - 128)) | (1 << (SQLiteParser.LAG - 128)) | (1 << (SQLiteParser.LAST_VALUE - 128)) | (1 << (SQLiteParser.LEAD - 128)) | (1 << (SQLiteParser.NTH_VALUE - 128)) | (1 << (SQLiteParser.NTILE - 128)) | (1 << (SQLiteParser.PERCENT_RANK - 128)) | (1 << (SQLiteParser.RANK - 128)) | (1 << (SQLiteParser.ROW_NUMBER - 128)) | (1 << (SQLiteParser.GENERATED - 128)) | (1 << (SQLiteParser.ALWAYS - 128)) | (1 << (SQLiteParser.STORED - 128)) | (1 << (SQLiteParser.TRUE_ - 128)) | (1 << (SQLiteParser.FALSE_ - 128)) | (1 << (SQLiteParser.WINDOW - 128)) | (1 << (SQLiteParser.NULLS - 128)) | (1 << (SQLiteParser.FIRST - 128)) | (1 << (SQLiteParser.LAST - 128)) | (1 << (SQLiteParser.FILTER - 128)) | (1 << (SQLiteParser.GROUPS - 128)) | (1 << (SQLiteParser.EXCLUDE - 128)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = SQLiteParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1996
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunction_name" ):
                listener.enterFunction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunction_name" ):
                listener.exitFunction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunction_name" ):
                return visitor.visitFunction_name(self)
            else:
                return visitor.visitChildren(self)




    def function_name(self):

        localctx = SQLiteParser.Function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Schema_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_schema_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSchema_name" ):
                listener.enterSchema_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSchema_name" ):
                listener.exitSchema_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSchema_name" ):
                return visitor.visitSchema_name(self)
            else:
                return visitor.visitChildren(self)




    def schema_name(self):

        localctx = SQLiteParser.Schema_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_schema_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_name" ):
                listener.enterTable_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_name" ):
                listener.exitTable_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_name" ):
                return visitor.visitTable_name(self)
            else:
                return visitor.visitChildren(self)




    def table_name(self):

        localctx = SQLiteParser.Table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2002
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_or_index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_or_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_or_index_name" ):
                listener.enterTable_or_index_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_or_index_name" ):
                listener.exitTable_or_index_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_or_index_name" ):
                return visitor.visitTable_or_index_name(self)
            else:
                return visitor.visitChildren(self)




    def table_or_index_name(self):

        localctx = SQLiteParser.Table_or_index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_table_or_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class New_table_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_new_table_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNew_table_name" ):
                listener.enterNew_table_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNew_table_name" ):
                listener.exitNew_table_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNew_table_name" ):
                return visitor.visitNew_table_name(self)
            else:
                return visitor.visitChildren(self)




    def new_table_name(self):

        localctx = SQLiteParser.New_table_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_new_table_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Column_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_column_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumn_name" ):
                listener.enterColumn_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumn_name" ):
                listener.exitColumn_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitColumn_name" ):
                return visitor.visitColumn_name(self)
            else:
                return visitor.visitChildren(self)




    def column_name(self):

        localctx = SQLiteParser.Column_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_column_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2008
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collation_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_collation_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollation_name" ):
                listener.enterCollation_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollation_name" ):
                listener.exitCollation_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollation_name" ):
                return visitor.visitCollation_name(self)
            else:
                return visitor.visitChildren(self)




    def collation_name(self):

        localctx = SQLiteParser.Collation_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_collation_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2010
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Foreign_tableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_foreign_table

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeign_table" ):
                listener.enterForeign_table(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeign_table" ):
                listener.exitForeign_table(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForeign_table" ):
                return visitor.visitForeign_table(self)
            else:
                return visitor.visitChildren(self)




    def foreign_table(self):

        localctx = SQLiteParser.Foreign_tableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_foreign_table)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2012
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Index_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_index_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndex_name" ):
                listener.enterIndex_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndex_name" ):
                listener.exitIndex_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIndex_name" ):
                return visitor.visitIndex_name(self)
            else:
                return visitor.visitChildren(self)




    def index_name(self):

        localctx = SQLiteParser.Index_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_index_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2014
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Trigger_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_trigger_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrigger_name" ):
                listener.enterTrigger_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrigger_name" ):
                listener.exitTrigger_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrigger_name" ):
                return visitor.visitTrigger_name(self)
            else:
                return visitor.visitChildren(self)




    def trigger_name(self):

        localctx = SQLiteParser.Trigger_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_trigger_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2016
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class View_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_view_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterView_name" ):
                listener.enterView_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitView_name" ):
                listener.exitView_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitView_name" ):
                return visitor.visitView_name(self)
            else:
                return visitor.visitChildren(self)




    def view_name(self):

        localctx = SQLiteParser.View_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_view_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2018
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Module_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_module_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule_name" ):
                listener.enterModule_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule_name" ):
                listener.exitModule_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModule_name" ):
                return visitor.visitModule_name(self)
            else:
                return visitor.visitChildren(self)




    def module_name(self):

        localctx = SQLiteParser.Module_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_module_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2020
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pragma_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_pragma_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPragma_name" ):
                listener.enterPragma_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPragma_name" ):
                listener.exitPragma_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPragma_name" ):
                return visitor.visitPragma_name(self)
            else:
                return visitor.visitChildren(self)




    def pragma_name(self):

        localctx = SQLiteParser.Pragma_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_pragma_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Savepoint_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_savepoint_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepoint_name" ):
                listener.enterSavepoint_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepoint_name" ):
                listener.exitSavepoint_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSavepoint_name" ):
                return visitor.visitSavepoint_name(self)
            else:
                return visitor.visitChildren(self)




    def savepoint_name(self):

        localctx = SQLiteParser.Savepoint_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_savepoint_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2024
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_aliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_alias" ):
                listener.enterTable_alias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_alias" ):
                listener.exitTable_alias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_alias" ):
                return visitor.visitTable_alias(self)
            else:
                return visitor.visitChildren(self)




    def table_alias(self):

        localctx = SQLiteParser.Table_aliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_table_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2026
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Transaction_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_transaction_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransaction_name" ):
                listener.enterTransaction_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransaction_name" ):
                listener.exitTransaction_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTransaction_name" ):
                return visitor.visitTransaction_name(self)
            else:
                return visitor.visitChildren(self)




    def transaction_name(self):

        localctx = SQLiteParser.Transaction_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_transaction_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2028
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindow_name" ):
                listener.enterWindow_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindow_name" ):
                listener.exitWindow_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWindow_name" ):
                return visitor.visitWindow_name(self)
            else:
                return visitor.visitChildren(self)




    def window_name(self):

        localctx = SQLiteParser.Window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2030
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_alias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlias" ):
                listener.enterAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlias" ):
                listener.exitAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlias" ):
                return visitor.visitAlias(self)
            else:
                return visitor.visitChildren(self)




    def alias(self):

        localctx = SQLiteParser.AliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_alias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2032
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FilenameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_filename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFilename" ):
                listener.enterFilename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFilename" ):
                listener.exitFilename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFilename" ):
                return visitor.visitFilename(self)
            else:
                return visitor.visitChildren(self)




    def filename(self):

        localctx = SQLiteParser.FilenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_filename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Base_window_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_base_window_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBase_window_name" ):
                listener.enterBase_window_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBase_window_name" ):
                listener.exitBase_window_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBase_window_name" ):
                return visitor.visitBase_window_name(self)
            else:
                return visitor.visitChildren(self)




    def base_window_name(self):

        localctx = SQLiteParser.Base_window_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_base_window_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2036
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_simple_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_func" ):
                listener.enterSimple_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_func" ):
                listener.exitSimple_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_func" ):
                return visitor.visitSimple_func(self)
            else:
                return visitor.visitChildren(self)




    def simple_func(self):

        localctx = SQLiteParser.Simple_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_simple_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Aggregate_funcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_aggregate_func

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregate_func" ):
                listener.enterAggregate_func(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregate_func" ):
                listener.exitAggregate_func(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAggregate_func" ):
                return visitor.visitAggregate_func(self)
            else:
                return visitor.visitChildren(self)




    def aggregate_func(self):

        localctx = SQLiteParser.Aggregate_funcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_aggregate_func)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2040
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Table_function_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def getRuleIndex(self):
            return SQLiteParser.RULE_table_function_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTable_function_name" ):
                listener.enterTable_function_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTable_function_name" ):
                listener.exitTable_function_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTable_function_name" ):
                return visitor.visitTable_function_name(self)
            else:
                return visitor.visitChildren(self)




    def table_function_name(self):

        localctx = SQLiteParser.Table_function_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_table_function_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2042
            self.any_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Any_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IDENTIFIER(self):
            return self.getToken(SQLiteParser.IDENTIFIER, 0)

        def keyword(self):
            return self.getTypedRuleContext(SQLiteParser.KeywordContext,0)


        def STRING_LITERAL(self):
            return self.getToken(SQLiteParser.STRING_LITERAL, 0)

        def REF_FIELD(self):
            return self.getToken(SQLiteParser.REF_FIELD, 0)

        def OPEN_PAR(self):
            return self.getToken(SQLiteParser.OPEN_PAR, 0)

        def any_name(self):
            return self.getTypedRuleContext(SQLiteParser.Any_nameContext,0)


        def CLOSE_PAR(self):
            return self.getToken(SQLiteParser.CLOSE_PAR, 0)

        def getRuleIndex(self):
            return SQLiteParser.RULE_any_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAny_name" ):
                listener.enterAny_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAny_name" ):
                listener.exitAny_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAny_name" ):
                return visitor.visitAny_name(self)
            else:
                return visitor.visitChildren(self)




    def any_name(self):

        localctx = SQLiteParser.Any_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_any_name)
        try:
            self.state = 2052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [SQLiteParser.IDENTIFIER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2044
                self.match(SQLiteParser.IDENTIFIER)
                pass
            elif token in [SQLiteParser.ABORT, SQLiteParser.ACTION, SQLiteParser.ADD, SQLiteParser.AFTER, SQLiteParser.ALL, SQLiteParser.ALTER, SQLiteParser.ANALYZE, SQLiteParser.AND, SQLiteParser.AS, SQLiteParser.ASC, SQLiteParser.ATTACH, SQLiteParser.AUTOINCREMENT, SQLiteParser.BEFORE, SQLiteParser.BEGIN, SQLiteParser.BETWEEN, SQLiteParser.BY, SQLiteParser.CASCADE, SQLiteParser.CASE, SQLiteParser.CAST, SQLiteParser.CHECK, SQLiteParser.COLLATE, SQLiteParser.COLUMN, SQLiteParser.COMMIT, SQLiteParser.CONFLICT, SQLiteParser.CONSTRAINT, SQLiteParser.CREATE, SQLiteParser.CROSS, SQLiteParser.CURRENT_DATE, SQLiteParser.CURRENT_TIME, SQLiteParser.CURRENT_TIMESTAMP, SQLiteParser.DATABASE, SQLiteParser.DEFAULT, SQLiteParser.DEFERRABLE, SQLiteParser.DEFERRED, SQLiteParser.DELETE, SQLiteParser.DESC, SQLiteParser.DETACH, SQLiteParser.DISTINCT, SQLiteParser.DROP, SQLiteParser.EACH, SQLiteParser.ELSE, SQLiteParser.END, SQLiteParser.ESCAPE, SQLiteParser.EXCEPT, SQLiteParser.EXCLUSIVE, SQLiteParser.EXISTS, SQLiteParser.EXPLAIN, SQLiteParser.FAIL, SQLiteParser.FOR, SQLiteParser.FOREIGN, SQLiteParser.FROM, SQLiteParser.FULL, SQLiteParser.GLOB, SQLiteParser.GROUP, SQLiteParser.HAVING, SQLiteParser.IF, SQLiteParser.IGNORE, SQLiteParser.IMMEDIATE, SQLiteParser.IN, SQLiteParser.INDEX, SQLiteParser.INDEXED, SQLiteParser.INITIALLY, SQLiteParser.INNER, SQLiteParser.INSERT, SQLiteParser.INSTEAD, SQLiteParser.INTERSECT, SQLiteParser.INTO, SQLiteParser.IS, SQLiteParser.ISNULL, SQLiteParser.JOIN, SQLiteParser.KEY, SQLiteParser.LEFT, SQLiteParser.LIKE, SQLiteParser.LIMIT, SQLiteParser.MATCH, SQLiteParser.NATURAL, SQLiteParser.NO, SQLiteParser.NOT, SQLiteParser.NOTNULL, SQLiteParser.NULL_, SQLiteParser.OF, SQLiteParser.OFFSET, SQLiteParser.ON, SQLiteParser.OR, SQLiteParser.ORDER, SQLiteParser.OUTER, SQLiteParser.PLAN, SQLiteParser.PRAGMA, SQLiteParser.PRIMARY, SQLiteParser.QUERY, SQLiteParser.RAISE, SQLiteParser.RECURSIVE, SQLiteParser.REFERENCES, SQLiteParser.REGEXP, SQLiteParser.REINDEX, SQLiteParser.RELEASE, SQLiteParser.RENAME, SQLiteParser.REPLACE, SQLiteParser.RESTRICT, SQLiteParser.RIGHT, SQLiteParser.ROLLBACK, SQLiteParser.ROW, SQLiteParser.ROWS, SQLiteParser.SAVEPOINT, SQLiteParser.SELECT, SQLiteParser.SET, SQLiteParser.TABLE, SQLiteParser.TEMP, SQLiteParser.TEMPORARY, SQLiteParser.THEN, SQLiteParser.TO, SQLiteParser.TRANSACTION, SQLiteParser.TRIGGER, SQLiteParser.UNION, SQLiteParser.UNIQUE, SQLiteParser.UPDATE, SQLiteParser.USING, SQLiteParser.VACUUM, SQLiteParser.VALUES, SQLiteParser.VIEW, SQLiteParser.VIRTUAL, SQLiteParser.WHEN, SQLiteParser.WHERE, SQLiteParser.WITH, SQLiteParser.WITHOUT, SQLiteParser.FIRST_VALUE, SQLiteParser.OVER, SQLiteParser.PARTITION, SQLiteParser.RANGE, SQLiteParser.PRECEDING, SQLiteParser.UNBOUNDED, SQLiteParser.CURRENT, SQLiteParser.FOLLOWING, SQLiteParser.CUME_DIST, SQLiteParser.DENSE_RANK, SQLiteParser.LAG, SQLiteParser.LAST_VALUE, SQLiteParser.LEAD, SQLiteParser.NTH_VALUE, SQLiteParser.NTILE, SQLiteParser.PERCENT_RANK, SQLiteParser.RANK, SQLiteParser.ROW_NUMBER, SQLiteParser.GENERATED, SQLiteParser.ALWAYS, SQLiteParser.STORED, SQLiteParser.TRUE_, SQLiteParser.FALSE_, SQLiteParser.WINDOW, SQLiteParser.NULLS, SQLiteParser.FIRST, SQLiteParser.LAST, SQLiteParser.FILTER, SQLiteParser.GROUPS, SQLiteParser.EXCLUDE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2045
                self.keyword()
                pass
            elif token in [SQLiteParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2046
                self.match(SQLiteParser.STRING_LITERAL)
                pass
            elif token in [SQLiteParser.REF_FIELD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2047
                self.match(SQLiteParser.REF_FIELD)
                pass
            elif token in [SQLiteParser.OPEN_PAR]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2048
                self.match(SQLiteParser.OPEN_PAR)
                self.state = 2049
                self.any_name()
                self.state = 2050
                self.match(SQLiteParser.CLOSE_PAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[33] = self.expr_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         




