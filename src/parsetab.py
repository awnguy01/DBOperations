
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND COLUMNNAME EQUALS FLOAT GREATERTHAN GREATERTHANEQUAL INT LESSTHAN LESSTHANEQUAL LPAREN NOT NOTEQUALS OR RPAREN STRING\n\n\tselect : simpleexpression\n\t\t   | empty\n\n\n\t\n\tvalue : INT\n\t\t  | FLOAT\n\n\t\n\tstring : STRING\n\n\t\n\tattribute : COLUMNNAME\n\n\t\n\trelational : GREATERTHANEQUAL\n\t\t\t   | LESSTHANEQUAL\n\t\t\t   | GREATERTHAN\n\t\t\t   | LESSTHAN\n\t\t\t   | NOTEQUALS\n\t\t\t   | EQUALS\n\n\t\n\t\tlogical : AND\n\t\t\t\t| OR\n\t\t\t\t| NOT\n\n\t\t\n\n\tsimpleexpression : attribute relational value\n\t\t\t   | attribute relational string\n\t\t\t   | LPAREN simpleexpression RPAREN\n\t\t\t   | simpleexpression logical simpleexpression\n\t\t\t   | LPAREN simpleexpression logical simpleexpression RPAREN\n\n\t\n\n\tempty :\n\n\t'
    
_lr_action_items = {'LPAREN':([0,5,7,8,9,10,26,],[5,5,5,-13,-14,-15,5,]),'$end':([0,1,2,3,19,20,21,22,23,24,25,28,],[-21,0,-1,-2,-19,-16,-17,-3,-4,-5,-18,-20,]),'COLUMNNAME':([0,5,7,8,9,10,26,],[6,6,6,-13,-14,-15,6,]),'AND':([2,18,19,20,21,22,23,24,25,27,28,],[8,8,8,-16,-17,-3,-4,-5,-18,8,-20,]),'OR':([2,18,19,20,21,22,23,24,25,27,28,],[9,9,9,-16,-17,-3,-4,-5,-18,9,-20,]),'NOT':([2,18,19,20,21,22,23,24,25,27,28,],[10,10,10,-16,-17,-3,-4,-5,-18,10,-20,]),'GREATERTHANEQUAL':([4,6,],[12,-6,]),'LESSTHANEQUAL':([4,6,],[13,-6,]),'GREATERTHAN':([4,6,],[14,-6,]),'LESSTHAN':([4,6,],[15,-6,]),'NOTEQUALS':([4,6,],[16,-6,]),'EQUALS':([4,6,],[17,-6,]),'INT':([11,12,13,14,15,16,17,],[22,-7,-8,-9,-10,-11,-12,]),'FLOAT':([11,12,13,14,15,16,17,],[23,-7,-8,-9,-10,-11,-12,]),'STRING':([11,12,13,14,15,16,17,],[24,-7,-8,-9,-10,-11,-12,]),'RPAREN':([18,19,20,21,22,23,24,25,27,28,],[25,-19,-16,-17,-3,-4,-5,-18,28,-20,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'select':([0,],[1,]),'simpleexpression':([0,5,7,26,],[2,18,19,27,]),'empty':([0,],[3,]),'attribute':([0,5,7,26,],[4,4,4,4,]),'logical':([2,18,19,27,],[7,26,7,7,]),'relational':([4,],[11,]),'value':([11,],[20,]),'string':([11,],[21,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> select","S'",1,None,None,None),
  ('select -> simpleexpression','select',1,'p_select','parse_cond.py',83),
  ('select -> empty','select',1,'p_select','parse_cond.py',84),
  ('value -> INT','value',1,'p_value','parse_cond.py',96),
  ('value -> FLOAT','value',1,'p_value','parse_cond.py',97),
  ('string -> STRING','string',1,'p_string','parse_cond.py',105),
  ('attribute -> COLUMNNAME','attribute',1,'p_attribute','parse_cond.py',113),
  ('relational -> GREATERTHANEQUAL','relational',1,'p_relational','parse_cond.py',121),
  ('relational -> LESSTHANEQUAL','relational',1,'p_relational','parse_cond.py',122),
  ('relational -> GREATERTHAN','relational',1,'p_relational','parse_cond.py',123),
  ('relational -> LESSTHAN','relational',1,'p_relational','parse_cond.py',124),
  ('relational -> NOTEQUALS','relational',1,'p_relational','parse_cond.py',125),
  ('relational -> EQUALS','relational',1,'p_relational','parse_cond.py',126),
  ('logical -> AND','logical',1,'p_logical_op','parse_cond.py',134),
  ('logical -> OR','logical',1,'p_logical_op','parse_cond.py',135),
  ('logical -> NOT','logical',1,'p_logical_op','parse_cond.py',136),
  ('simpleexpression -> attribute relational value','simpleexpression',3,'p_simpleexpression','parse_cond.py',145),
  ('simpleexpression -> attribute relational string','simpleexpression',3,'p_simpleexpression','parse_cond.py',146),
  ('simpleexpression -> LPAREN simpleexpression RPAREN','simpleexpression',3,'p_simpleexpression','parse_cond.py',147),
  ('simpleexpression -> simpleexpression logical simpleexpression','simpleexpression',3,'p_simpleexpression','parse_cond.py',148),
  ('simpleexpression -> LPAREN simpleexpression logical simpleexpression RPAREN','simpleexpression',5,'p_simpleexpression','parse_cond.py',149),
  ('empty -> <empty>','empty',0,'p_empty','parse_cond.py',174),
]
